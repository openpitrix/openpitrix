// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OpenpitrixClusterNode openpitrix cluster node
// swagger:model openpitrixClusterNode
type OpenpitrixClusterNode struct {

	// auto backup or not
	AutoBackup bool `json:"auto_backup,omitempty"`

	// cluster common info
	ClusterCommon *OpenpitrixClusterCommon `json:"cluster_common,omitempty"`

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// cluster role
	ClusterRole *OpenpitrixClusterRole `json:"cluster_role,omitempty"`

	// the time when cluster node create
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// custom metadata
	CustomMetadata string `json:"custom_metadata,omitempty"`

	// device
	Device string `json:"device,omitempty"`

	// elastic ip, if attach ip
	Eip string `json:"eip,omitempty"`

	// global server id
	GlobalServerID int64 `json:"global_server_id,omitempty"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// health status default empty eg.[healthy|unhealthy|""]
	HealthStatus string `json:"health_status,omitempty"`

	// host id
	HostID string `json:"host_id,omitempty"`

	// host ip
	HostIP string `json:"host_ip,omitempty"`

	// instance id
	InstanceID string `json:"instance_id,omitempty"`

	// backup or not
	IsBackup bool `json:"is_backup,omitempty"`

	// list of ssh key pair id
	KeyPairID []string `json:"key_pair_id"`

	// name, default empty
	Name string `json:"name,omitempty"`

	// cluster node(cluster contain one more node) id
	NodeID string `json:"node_id,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// own path, concat string group_path:user_id
	OwnerPath string `json:"owner_path,omitempty"`

	// private ip
	PrivateIP string `json:"private_ip,omitempty"`

	// public key
	PubKey string `json:"pub_key,omitempty"`

	// role eg.[wordpress|mysql|...]
	Role string `json:"role,omitempty"`

	// server id
	ServerID int64 `json:"server_id,omitempty"`

	// status eg.[active|used|enabled|disabled|deleted|stopped|ceased|successful|failed]
	Status string `json:"status,omitempty"`

	// record cluster node status changed time
	StatusTime strfmt.DateTime `json:"status_time,omitempty"`

	// subnet id
	SubnetID string `json:"subnet_id,omitempty"`

	// transition status eg.[creating|deleting|upgrading|updating|rollbacking|stopping|starting|recovering|ceasing|resizing|scaling]
	TransitionStatus string `json:"transition_status,omitempty"`

	// volume id, if mount volume
	VolumeID string `json:"volume_id,omitempty"`
}

// Validate validates this openpitrix cluster node
func (m *OpenpitrixClusterNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterCommon(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClusterRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeyPairID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenpitrixClusterNode) validateClusterCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterCommon) { // not required
		return nil
	}

	if m.ClusterCommon != nil {

		if err := m.ClusterCommon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_common")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateClusterRole(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterRole) { // not required
		return nil
	}

	if m.ClusterRole != nil {

		if err := m.ClusterRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_role")
			}
			return err
		}
	}

	return nil
}

func (m *OpenpitrixClusterNode) validateKeyPairID(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyPairID) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenpitrixClusterNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenpitrixClusterNode) UnmarshalBinary(b []byte) error {
	var res OpenpitrixClusterNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
