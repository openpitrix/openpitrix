// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadata/pilot/pilot.proto

package pbpilot

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	types "openpitrix.io/openpitrix/pkg/pb/metadata/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("metadata/pilot/pilot.proto", fileDescriptor_9b294d1323d9005f) }

var fileDescriptor_9b294d1323d9005f = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x97, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x35, 0x09, 0x21, 0xed, 0xc0, 0xca, 0x96, 0x01, 0xa3, 0x19, 0x1b, 0x17, 0x30, 0x69,
	0x42, 0x5b, 0x83, 0x86, 0x84, 0x40, 0x5c, 0xad, 0xdd, 0x1f, 0xca, 0xda, 0x31, 0x35, 0x63, 0x48,
	0xbb, 0x00, 0xb9, 0xcd, 0x59, 0xb0, 0xda, 0xda, 0x26, 0x76, 0x81, 0x3d, 0x02, 0x2f, 0xc9, 0xb3,
	0xa0, 0x38, 0x49, 0x9b, 0x26, 0x75, 0x22, 0xad, 0xbb, 0xe2, 0x26, 0xd1, 0x7c, 0xbe, 0xf3, 0xcb,
	0x77, 0x7c, 0xe6, 0x33, 0x0f, 0xec, 0x21, 0x2a, 0xe2, 0x11, 0x45, 0x1c, 0x41, 0x07, 0x5c, 0x45,
	0xcf, 0x9a, 0x08, 0xb8, 0xe2, 0x56, 0x25, 0x89, 0xd5, 0xf4, 0xaa, 0xfd, 0xd4, 0xe7, 0xdc, 0x1f,
	0xa0, 0x43, 0x04, 0x75, 0x08, 0x63, 0x5c, 0x11, 0x45, 0x39, 0x93, 0x91, 0xda, 0xde, 0xd1, 0xaf,
	0xde, 0xae, 0x8f, 0x6c, 0x57, 0xfe, 0x22, 0xbe, 0x8f, 0x81, 0xc3, 0x85, 0x56, 0xcc, 0x50, 0x4f,
	0xbe, 0xab, 0xae, 0x05, 0xca, 0xe8, 0x69, 0x88, 0xf5, 0x38, 0xbb, 0xf2, 0x0c, 0x31, 0x2f, 0xe0,
	0x0c, 0xe3, 0xd8, 0x66, 0x26, 0x76, 0x15, 0x70, 0xa6, 0x7c, 0xa2, 0xd0, 0x90, 0x9b, 0xaa, 0xd5,
	0xae, 0x66, 0xfd, 0x10, 0xd9, 0x8f, 0x42, 0x7b, 0x7f, 0x57, 0xe0, 0xfe, 0x59, 0x28, 0x75, 0x31,
	0xf8, 0x49, 0x7b, 0x68, 0xed, 0xc3, 0x83, 0x63, 0x54, 0x7a, 0xe9, 0x02, 0x03, 0x49, 0x39, 0xb3,
	0x1e, 0xd5, 0xc6, 0x7b, 0x15, 0x55, 0x72, 0x38, 0x14, 0xea, 0xda, 0x5e, 0xcb, 0x2e, 0x27, 0xfa,
	0x13, 0x58, 0x3d, 0x46, 0x75, 0x94, 0x18, 0x4c, 0x96, 0xd7, 0xb3, 0xfa, 0xb1, 0xa2, 0xe9, 0x99,
	0x61, 0x4d, 0xed, 0xe7, 0x20, 0xdc, 0x89, 0x64, 0x69, 0x23, 0xab, 0xd5, 0xd1, 0x43, 0xe6, 0x09,
	0x4e, 0x99, 0x32, 0xa3, 0x0e, 0xa0, 0x92, 0x94, 0xd6, 0xe0, 0xec, 0x8a, 0xfa, 0xa6, 0xca, 0x72,
	0x4e, 0xd3, 0x39, 0x17, 0xb0, 0x36, 0xa6, 0x0c, 0x28, 0x32, 0x75, 0xde, 0x72, 0x8b, 0x71, 0x2f,
	0x66, 0xe3, 0x32, 0xc9, 0x1f, 0x61, 0x39, 0xbd, 0x6b, 0x2d, 0x2a, 0x95, 0x09, 0xf8, 0xac, 0x60,
	0x27, 0x75, 0x5e, 0x07, 0xac, 0x34, 0x2b, 0xfe, 0x42, 0x61, 0x03, 0xcc, 0xcc, 0x38, 0xbb, 0x05,
	0x96, 0x9b, 0x67, 0x96, 0xa5, 0xd9, 0xb3, 0x4b, 0xb0, 0x5a, 0xba, 0x17, 0xba, 0x71, 0x31, 0xa9,
	0xa4, 0xab, 0xeb, 0x33, 0xc3, 0x71, 0xee, 0x29, 0x54, 0xdc, 0x69, 0xda, 0x56, 0x56, 0x3e, 0x1d,
	0xef, 0xe0, 0x8f, 0x11, 0x4a, 0x55, 0xec, 0x2e, 0x94, 0x7a, 0x26, 0x77, 0x3a, 0x68, 0x76, 0x97,
	0xce, 0x3d, 0x84, 0x4a, 0x53, 0xea, 0x85, 0xce, 0x88, 0x31, 0xca, 0x4a, 0x6b, 0x7d, 0x98, 0x0d,
	0xd7, 0x39, 0x1f, 0x58, 0x75, 0x00, 0x57, 0x91, 0x20, 0xb2, 0x55, 0x86, 0x30, 0x14, 0xb6, 0x0f,
	0x8b, 0xae, 0xe2, 0x62, 0x1e, 0x84, 0x0b, 0xcb, 0x1d, 0xf4, 0xa9, 0x54, 0x18, 0xb4, 0xe3, 0xb8,
	0xb5, 0x9d, 0xdb, 0xed, 0x51, 0xf7, 0x9c, 0xc8, 0xfe, 0xb7, 0xac, 0xd2, 0x04, 0xfd, 0x02, 0xd6,
	0x01, 0x06, 0x59, 0xec, 0x4b, 0x13, 0x36, 0xaf, 0x35, 0x81, 0x2f, 0x61, 0x2d, 0xeb, 0xa1, 0x4d,
	0x84, 0x08, 0x9b, 0x30, 0xb7, 0xe9, 0xaf, 0x50, 0xcd, 0x1b, 0x49, 0xe8, 0xb7, 0xe0, 0xbd, 0x09,
	0xf7, 0x12, 0x2b, 0x8d, 0xa1, 0x67, 0x3d, 0x2f, 0xf3, 0xdb, 0x18, 0x7a, 0x26, 0x54, 0x1b, 0x96,
	0x26, 0xdf, 0x0d, 0x61, 0x5b, 0xe5, 0xf6, 0x0a, 0x70, 0x2d, 0x3d, 0xab, 0xdc, 0x51, 0x37, 0xfc,
	0x4b, 0xe2, 0x2a, 0xa2, 0x46, 0xd2, 0xaa, 0x1a, 0x88, 0x4d, 0xcf, 0xde, 0x30, 0x84, 0xe2, 0xcc,
	0x23, 0x58, 0xfa, 0x40, 0x98, 0x37, 0xc0, 0x18, 0x68, 0x6d, 0x1a, 0xf4, 0x6d, 0x94, 0x92, 0xf8,
	0x68, 0x72, 0xf5, 0x0e, 0x16, 0xcf, 0x28, 0xf3, 0xf5, 0x74, 0x35, 0x8d, 0x4e, 0x43, 0x6a, 0x03,
	0x96, 0xc2, 0xd4, 0xf1, 0xf0, 0x2a, 0x9e, 0x95, 0x06, 0xc8, 0x09, 0xac, 0x4c, 0x41, 0x4e, 0xb9,
	0x87, 0x05, 0x03, 0x32, 0x0c, 0x9b, 0x61, 0xfb, 0x51, 0x31, 0xfa, 0x48, 0xde, 0xf0, 0xa4, 0x36,
	0x61, 0x35, 0x44, 0x24, 0xbf, 0x66, 0x75, 0xd2, 0xeb, 0x23, 0xf3, 0x6e, 0x54, 0x1a, 0x81, 0x6a,
	0x67, 0xc4, 0x1a, 0x7c, 0x38, 0x24, 0xcc, 0xfb, 0xc4, 0xa6, 0x4b, 0xdc, 0xc9, 0xe6, 0xcc, 0x94,
	0x26, 0x23, 0xf7, 0x71, 0xae, 0xb9, 0x2a, 0x08, 0x0f, 0xcc, 0x67, 0x58, 0x49, 0xe7, 0x45, 0x85,
	0x6f, 0x17, 0xa1, 0xb5, 0xa4, 0x04, 0xbb, 0xf7, 0xe7, 0x0e, 0x3c, 0x49, 0x5f, 0x70, 0x8e, 0x78,
	0x30, 0xe9, 0xf2, 0x7f, 0x7c, 0xd9, 0x99, 0xe3, 0x30, 0xdc, 0xce, 0x3d, 0xe9, 0x04, 0x56, 0x3b,
	0x28, 0x78, 0xa0, 0xa6, 0x0f, 0x7b, 0xf1, 0x2c, 0x30, 0x5b, 0x5a, 0x9e, 0x5c, 0x2c, 0xbe, 0x13,
	0xc6, 0x70, 0x90, 0x37, 0x55, 0xbf, 0x56, 0x38, 0x83, 0xa0, 0x97, 0xb7, 0x17, 0x5e, 0x2d, 0xd4,
	0xdf, 0x5e, 0xbe, 0xe1, 0x02, 0x99, 0xa0, 0x2a, 0xa0, 0xbf, 0x6b, 0x94, 0x3b, 0x93, 0x9f, 0x1c,
	0xd1, 0xf7, 0x1d, 0xd1, 0x75, 0xa6, 0xff, 0x63, 0x78, 0x2f, 0xba, 0xfa, 0xdd, 0xbd, 0xab, 0x6f,
	0xcb, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xf9, 0x19, 0xf1, 0x52, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PilotServiceClient is the client API for PilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PilotServiceClient interface {
	GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error)
	GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error)
	GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error)
	GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error)
	GetPilotClientTLSConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotClientTLSConfig, error)
	GetFrontgateList(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateIdList, error)
	GetFrontgateConfig(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.FrontgateConfig, error)
	SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error)
	GetDroneConfig(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.DroneConfig, error)
	SetDroneConfig(ctx context.Context, in *types.SetDroneConfigRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetConfdConfig(ctx context.Context, in *types.ConfdEndpoint, opts ...grpc.CallOption) (*types.ConfdConfig, error)
	IsConfdRunning(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Bool, error)
	StartConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	StopConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterMetadata(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	DeregisterMetadata(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterMetadataMapping(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	DeregisterMetadataMapping(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterCmd(ctx context.Context, in *types.SubTask_RegisterCmd, opts ...grpc.CallOption) (*types.Empty, error)
	DeregisterCmd(ctx context.Context, in *types.SubTask_DeregisterCmd, opts ...grpc.CallOption) (*types.Empty, error)
	GetSubtaskStatus(ctx context.Context, in *types.SubTaskId, opts ...grpc.CallOption) (*types.SubTaskStatus, error)
	HandleSubtask(ctx context.Context, in *types.SubTaskMessage, opts ...grpc.CallOption) (*types.Empty, error)
	PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	PingFrontgate(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error)
	PingFrontgateNode(ctx context.Context, in *types.FrontgateNodeId, opts ...grpc.CallOption) (*types.Empty, error)
	PingDrone(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	PingMetadataBackend(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error)
	RunCommandOnFrontgateNode(ctx context.Context, in *types.RunCommandOnFrontgateRequest, opts ...grpc.CallOption) (*types.String, error)
	RunCommandOnDrone(ctx context.Context, in *types.RunCommandOnDroneRequest, opts ...grpc.CallOption) (*types.String, error)
}

type pilotServiceClient struct {
	cc *grpc.ClientConn
}

func NewPilotServiceClient(cc *grpc.ClientConn) PilotServiceClient {
	return &pilotServiceClient{cc}
}

func (c *pilotServiceClient) GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetDroneVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error) {
	out := new(types.PilotConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetPilotClientTLSConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotClientTLSConfig, error) {
	out := new(types.PilotClientTLSConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotClientTLSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateList(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateIdList, error) {
	out := new(types.FrontgateIdList)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateConfig(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.FrontgateConfig, error) {
	out := new(types.FrontgateConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/SetFrontgateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetDroneConfig(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.DroneConfig, error) {
	out := new(types.DroneConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) SetDroneConfig(ctx context.Context, in *types.SetDroneConfigRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/SetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetConfdConfig(ctx context.Context, in *types.ConfdEndpoint, opts ...grpc.CallOption) (*types.ConfdConfig, error) {
	out := new(types.ConfdConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetConfdConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) IsConfdRunning(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/IsConfdRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) StartConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/StartConfd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) StopConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/StopConfd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RegisterMetadata(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RegisterMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) DeregisterMetadata(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/DeregisterMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RegisterMetadataMapping(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RegisterMetadataMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) DeregisterMetadataMapping(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/DeregisterMetadataMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RegisterCmd(ctx context.Context, in *types.SubTask_RegisterCmd, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RegisterCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) DeregisterCmd(ctx context.Context, in *types.SubTask_DeregisterCmd, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/DeregisterCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetSubtaskStatus(ctx context.Context, in *types.SubTaskId, opts ...grpc.CallOption) (*types.SubTaskStatus, error) {
	out := new(types.SubTaskStatus)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetSubtaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) HandleSubtask(ctx context.Context, in *types.SubTaskMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/HandleSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingPilot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingFrontgate(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingFrontgate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingFrontgateNode(ctx context.Context, in *types.FrontgateNodeId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingFrontgateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingDrone(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingMetadataBackend(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingMetadataBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RunCommandOnFrontgateNode(ctx context.Context, in *types.RunCommandOnFrontgateRequest, opts ...grpc.CallOption) (*types.String, error) {
	out := new(types.String)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RunCommandOnFrontgateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RunCommandOnDrone(ctx context.Context, in *types.RunCommandOnDroneRequest, opts ...grpc.CallOption) (*types.String, error) {
	out := new(types.String)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RunCommandOnDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PilotServiceServer is the server API for PilotService service.
type PilotServiceServer interface {
	GetPilotVersion(context.Context, *types.Empty) (*types.Version, error)
	GetFrontgateVersion(context.Context, *types.FrontgateId) (*types.Version, error)
	GetDroneVersion(context.Context, *types.DroneEndpoint) (*types.Version, error)
	GetPilotConfig(context.Context, *types.Empty) (*types.PilotConfig, error)
	GetPilotClientTLSConfig(context.Context, *types.Empty) (*types.PilotClientTLSConfig, error)
	GetFrontgateList(context.Context, *types.Empty) (*types.FrontgateIdList, error)
	GetFrontgateConfig(context.Context, *types.FrontgateId) (*types.FrontgateConfig, error)
	SetFrontgateConfig(context.Context, *types.FrontgateConfig) (*types.Empty, error)
	GetDroneConfig(context.Context, *types.DroneEndpoint) (*types.DroneConfig, error)
	SetDroneConfig(context.Context, *types.SetDroneConfigRequest) (*types.Empty, error)
	GetConfdConfig(context.Context, *types.ConfdEndpoint) (*types.ConfdConfig, error)
	IsConfdRunning(context.Context, *types.DroneEndpoint) (*types.Bool, error)
	StartConfd(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	StopConfd(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	RegisterMetadata(context.Context, *types.SubTask_RegisterMetadata) (*types.Empty, error)
	DeregisterMetadata(context.Context, *types.SubTask_DeregisterMetadata) (*types.Empty, error)
	RegisterMetadataMapping(context.Context, *types.SubTask_RegisterMetadata) (*types.Empty, error)
	DeregisterMetadataMapping(context.Context, *types.SubTask_DeregisterMetadata) (*types.Empty, error)
	RegisterCmd(context.Context, *types.SubTask_RegisterCmd) (*types.Empty, error)
	DeregisterCmd(context.Context, *types.SubTask_DeregisterCmd) (*types.Empty, error)
	GetSubtaskStatus(context.Context, *types.SubTaskId) (*types.SubTaskStatus, error)
	HandleSubtask(context.Context, *types.SubTaskMessage) (*types.Empty, error)
	PingPilot(context.Context, *types.Empty) (*types.Empty, error)
	PingFrontgate(context.Context, *types.FrontgateId) (*types.Empty, error)
	PingFrontgateNode(context.Context, *types.FrontgateNodeId) (*types.Empty, error)
	PingDrone(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	PingMetadataBackend(context.Context, *types.FrontgateId) (*types.Empty, error)
	RunCommandOnFrontgateNode(context.Context, *types.RunCommandOnFrontgateRequest) (*types.String, error)
	RunCommandOnDrone(context.Context, *types.RunCommandOnDroneRequest) (*types.String, error)
}

// UnimplementedPilotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPilotServiceServer struct {
}

func (*UnimplementedPilotServiceServer) GetPilotVersion(ctx context.Context, req *types.Empty) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotVersion not implemented")
}
func (*UnimplementedPilotServiceServer) GetFrontgateVersion(ctx context.Context, req *types.FrontgateId) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontgateVersion not implemented")
}
func (*UnimplementedPilotServiceServer) GetDroneVersion(ctx context.Context, req *types.DroneEndpoint) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDroneVersion not implemented")
}
func (*UnimplementedPilotServiceServer) GetPilotConfig(ctx context.Context, req *types.Empty) (*types.PilotConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotConfig not implemented")
}
func (*UnimplementedPilotServiceServer) GetPilotClientTLSConfig(ctx context.Context, req *types.Empty) (*types.PilotClientTLSConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotClientTLSConfig not implemented")
}
func (*UnimplementedPilotServiceServer) GetFrontgateList(ctx context.Context, req *types.Empty) (*types.FrontgateIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontgateList not implemented")
}
func (*UnimplementedPilotServiceServer) GetFrontgateConfig(ctx context.Context, req *types.FrontgateId) (*types.FrontgateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontgateConfig not implemented")
}
func (*UnimplementedPilotServiceServer) SetFrontgateConfig(ctx context.Context, req *types.FrontgateConfig) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFrontgateConfig not implemented")
}
func (*UnimplementedPilotServiceServer) GetDroneConfig(ctx context.Context, req *types.DroneEndpoint) (*types.DroneConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDroneConfig not implemented")
}
func (*UnimplementedPilotServiceServer) SetDroneConfig(ctx context.Context, req *types.SetDroneConfigRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDroneConfig not implemented")
}
func (*UnimplementedPilotServiceServer) GetConfdConfig(ctx context.Context, req *types.ConfdEndpoint) (*types.ConfdConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfdConfig not implemented")
}
func (*UnimplementedPilotServiceServer) IsConfdRunning(ctx context.Context, req *types.DroneEndpoint) (*types.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConfdRunning not implemented")
}
func (*UnimplementedPilotServiceServer) StartConfd(ctx context.Context, req *types.DroneEndpoint) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConfd not implemented")
}
func (*UnimplementedPilotServiceServer) StopConfd(ctx context.Context, req *types.DroneEndpoint) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopConfd not implemented")
}
func (*UnimplementedPilotServiceServer) RegisterMetadata(ctx context.Context, req *types.SubTask_RegisterMetadata) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMetadata not implemented")
}
func (*UnimplementedPilotServiceServer) DeregisterMetadata(ctx context.Context, req *types.SubTask_DeregisterMetadata) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterMetadata not implemented")
}
func (*UnimplementedPilotServiceServer) RegisterMetadataMapping(ctx context.Context, req *types.SubTask_RegisterMetadata) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMetadataMapping not implemented")
}
func (*UnimplementedPilotServiceServer) DeregisterMetadataMapping(ctx context.Context, req *types.SubTask_DeregisterMetadata) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterMetadataMapping not implemented")
}
func (*UnimplementedPilotServiceServer) RegisterCmd(ctx context.Context, req *types.SubTask_RegisterCmd) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCmd not implemented")
}
func (*UnimplementedPilotServiceServer) DeregisterCmd(ctx context.Context, req *types.SubTask_DeregisterCmd) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterCmd not implemented")
}
func (*UnimplementedPilotServiceServer) GetSubtaskStatus(ctx context.Context, req *types.SubTaskId) (*types.SubTaskStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtaskStatus not implemented")
}
func (*UnimplementedPilotServiceServer) HandleSubtask(ctx context.Context, req *types.SubTaskMessage) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSubtask not implemented")
}
func (*UnimplementedPilotServiceServer) PingPilot(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPilot not implemented")
}
func (*UnimplementedPilotServiceServer) PingFrontgate(ctx context.Context, req *types.FrontgateId) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFrontgate not implemented")
}
func (*UnimplementedPilotServiceServer) PingFrontgateNode(ctx context.Context, req *types.FrontgateNodeId) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFrontgateNode not implemented")
}
func (*UnimplementedPilotServiceServer) PingDrone(ctx context.Context, req *types.DroneEndpoint) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDrone not implemented")
}
func (*UnimplementedPilotServiceServer) PingMetadataBackend(ctx context.Context, req *types.FrontgateId) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingMetadataBackend not implemented")
}
func (*UnimplementedPilotServiceServer) RunCommandOnFrontgateNode(ctx context.Context, req *types.RunCommandOnFrontgateRequest) (*types.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommandOnFrontgateNode not implemented")
}
func (*UnimplementedPilotServiceServer) RunCommandOnDrone(ctx context.Context, req *types.RunCommandOnDroneRequest) (*types.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommandOnDrone not implemented")
}

func RegisterPilotServiceServer(s *grpc.Server, srv PilotServiceServer) {
	s.RegisterService(&_PilotService_serviceDesc, srv)
}

func _PilotService_GetPilotVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotVersion(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateVersion(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetDroneVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetDroneVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetDroneVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetDroneVersion(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetPilotConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetPilotClientTLSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotClientTLSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotClientTLSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotClientTLSConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateList(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateConfig(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_SetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).SetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/SetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).SetFrontgateConfig(ctx, req.(*types.FrontgateConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetDroneConfig(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_SetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SetDroneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).SetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/SetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).SetDroneConfig(ctx, req.(*types.SetDroneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetConfdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ConfdEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetConfdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetConfdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetConfdConfig(ctx, req.(*types.ConfdEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_IsConfdRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).IsConfdRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/IsConfdRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).IsConfdRunning(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_StartConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).StartConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/StartConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).StartConfd(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_StopConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).StopConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/StopConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).StopConfd(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RegisterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_RegisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RegisterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RegisterMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RegisterMetadata(ctx, req.(*types.SubTask_RegisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_DeregisterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_DeregisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).DeregisterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/DeregisterMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).DeregisterMetadata(ctx, req.(*types.SubTask_DeregisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RegisterMetadataMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_RegisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RegisterMetadataMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RegisterMetadataMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RegisterMetadataMapping(ctx, req.(*types.SubTask_RegisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_DeregisterMetadataMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_DeregisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).DeregisterMetadataMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/DeregisterMetadataMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).DeregisterMetadataMapping(ctx, req.(*types.SubTask_DeregisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RegisterCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_RegisterCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RegisterCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RegisterCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RegisterCmd(ctx, req.(*types.SubTask_RegisterCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_DeregisterCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_DeregisterCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).DeregisterCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/DeregisterCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).DeregisterCmd(ctx, req.(*types.SubTask_DeregisterCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetSubtaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetSubtaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetSubtaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetSubtaskStatus(ctx, req.(*types.SubTaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_HandleSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).HandleSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/HandleSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).HandleSubtask(ctx, req.(*types.SubTaskMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingPilot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingPilot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingPilot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingPilot(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingFrontgate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingFrontgate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingFrontgate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingFrontgate(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingFrontgateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateNodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingFrontgateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingFrontgateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingFrontgateNode(ctx, req.(*types.FrontgateNodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingDrone(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingMetadataBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingMetadataBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingMetadataBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingMetadataBackend(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RunCommandOnFrontgateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RunCommandOnFrontgateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RunCommandOnFrontgateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RunCommandOnFrontgateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RunCommandOnFrontgateNode(ctx, req.(*types.RunCommandOnFrontgateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RunCommandOnDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RunCommandOnDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RunCommandOnDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RunCommandOnDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RunCommandOnDrone(ctx, req.(*types.RunCommandOnDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PilotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pilot.PilotService",
	HandlerType: (*PilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPilotVersion",
			Handler:    _PilotService_GetPilotVersion_Handler,
		},
		{
			MethodName: "GetFrontgateVersion",
			Handler:    _PilotService_GetFrontgateVersion_Handler,
		},
		{
			MethodName: "GetDroneVersion",
			Handler:    _PilotService_GetDroneVersion_Handler,
		},
		{
			MethodName: "GetPilotConfig",
			Handler:    _PilotService_GetPilotConfig_Handler,
		},
		{
			MethodName: "GetPilotClientTLSConfig",
			Handler:    _PilotService_GetPilotClientTLSConfig_Handler,
		},
		{
			MethodName: "GetFrontgateList",
			Handler:    _PilotService_GetFrontgateList_Handler,
		},
		{
			MethodName: "GetFrontgateConfig",
			Handler:    _PilotService_GetFrontgateConfig_Handler,
		},
		{
			MethodName: "SetFrontgateConfig",
			Handler:    _PilotService_SetFrontgateConfig_Handler,
		},
		{
			MethodName: "GetDroneConfig",
			Handler:    _PilotService_GetDroneConfig_Handler,
		},
		{
			MethodName: "SetDroneConfig",
			Handler:    _PilotService_SetDroneConfig_Handler,
		},
		{
			MethodName: "GetConfdConfig",
			Handler:    _PilotService_GetConfdConfig_Handler,
		},
		{
			MethodName: "IsConfdRunning",
			Handler:    _PilotService_IsConfdRunning_Handler,
		},
		{
			MethodName: "StartConfd",
			Handler:    _PilotService_StartConfd_Handler,
		},
		{
			MethodName: "StopConfd",
			Handler:    _PilotService_StopConfd_Handler,
		},
		{
			MethodName: "RegisterMetadata",
			Handler:    _PilotService_RegisterMetadata_Handler,
		},
		{
			MethodName: "DeregisterMetadata",
			Handler:    _PilotService_DeregisterMetadata_Handler,
		},
		{
			MethodName: "RegisterMetadataMapping",
			Handler:    _PilotService_RegisterMetadataMapping_Handler,
		},
		{
			MethodName: "DeregisterMetadataMapping",
			Handler:    _PilotService_DeregisterMetadataMapping_Handler,
		},
		{
			MethodName: "RegisterCmd",
			Handler:    _PilotService_RegisterCmd_Handler,
		},
		{
			MethodName: "DeregisterCmd",
			Handler:    _PilotService_DeregisterCmd_Handler,
		},
		{
			MethodName: "GetSubtaskStatus",
			Handler:    _PilotService_GetSubtaskStatus_Handler,
		},
		{
			MethodName: "HandleSubtask",
			Handler:    _PilotService_HandleSubtask_Handler,
		},
		{
			MethodName: "PingPilot",
			Handler:    _PilotService_PingPilot_Handler,
		},
		{
			MethodName: "PingFrontgate",
			Handler:    _PilotService_PingFrontgate_Handler,
		},
		{
			MethodName: "PingFrontgateNode",
			Handler:    _PilotService_PingFrontgateNode_Handler,
		},
		{
			MethodName: "PingDrone",
			Handler:    _PilotService_PingDrone_Handler,
		},
		{
			MethodName: "PingMetadataBackend",
			Handler:    _PilotService_PingMetadataBackend_Handler,
		},
		{
			MethodName: "RunCommandOnFrontgateNode",
			Handler:    _PilotService_RunCommandOnFrontgateNode_Handler,
		},
		{
			MethodName: "RunCommandOnDrone",
			Handler:    _PilotService_RunCommandOnDrone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata/pilot/pilot.proto",
}

// PilotServiceForFrontgateClient is the client API for PilotServiceForFrontgate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PilotServiceForFrontgateClient interface {
	GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error)
	GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error)
	GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error)
	PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error)
	ReportSubTaskStatus(ctx context.Context, in *types.SubTaskStatus, opts ...grpc.CallOption) (*types.Empty, error)
	FrontgateChannel(ctx context.Context, opts ...grpc.CallOption) (PilotServiceForFrontgate_FrontgateChannelClient, error)
}

type pilotServiceForFrontgateClient struct {
	cc *grpc.ClientConn
}

func NewPilotServiceForFrontgateClient(cc *grpc.ClientConn) PilotServiceForFrontgateClient {
	return &pilotServiceForFrontgateClient{cc}
}

func (c *pilotServiceForFrontgateClient) GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetPilotVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetFrontgateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetDroneVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/PingPilot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error) {
	out := new(types.PilotConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetPilotConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) ReportSubTaskStatus(ctx context.Context, in *types.SubTaskStatus, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/ReportSubTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) FrontgateChannel(ctx context.Context, opts ...grpc.CallOption) (PilotServiceForFrontgate_FrontgateChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PilotServiceForFrontgate_serviceDesc.Streams[0], "/metadata.pilot.PilotServiceForFrontgate/FrontgateChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &pilotServiceForFrontgateFrontgateChannelClient{stream}
	return x, nil
}

type PilotServiceForFrontgate_FrontgateChannelClient interface {
	Send(*types.Bytes) error
	Recv() (*types.Bytes, error)
	grpc.ClientStream
}

type pilotServiceForFrontgateFrontgateChannelClient struct {
	grpc.ClientStream
}

func (x *pilotServiceForFrontgateFrontgateChannelClient) Send(m *types.Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pilotServiceForFrontgateFrontgateChannelClient) Recv() (*types.Bytes, error) {
	m := new(types.Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PilotServiceForFrontgateServer is the server API for PilotServiceForFrontgate service.
type PilotServiceForFrontgateServer interface {
	GetPilotVersion(context.Context, *types.Empty) (*types.Version, error)
	GetFrontgateVersion(context.Context, *types.FrontgateId) (*types.Version, error)
	GetDroneVersion(context.Context, *types.DroneEndpoint) (*types.Version, error)
	PingPilot(context.Context, *types.Empty) (*types.Empty, error)
	GetPilotConfig(context.Context, *types.Empty) (*types.PilotConfig, error)
	ReportSubTaskStatus(context.Context, *types.SubTaskStatus) (*types.Empty, error)
	FrontgateChannel(PilotServiceForFrontgate_FrontgateChannelServer) error
}

// UnimplementedPilotServiceForFrontgateServer can be embedded to have forward compatible implementations.
type UnimplementedPilotServiceForFrontgateServer struct {
}

func (*UnimplementedPilotServiceForFrontgateServer) GetPilotVersion(ctx context.Context, req *types.Empty) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotVersion not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) GetFrontgateVersion(ctx context.Context, req *types.FrontgateId) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontgateVersion not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) GetDroneVersion(ctx context.Context, req *types.DroneEndpoint) (*types.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDroneVersion not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) PingPilot(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPilot not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) GetPilotConfig(ctx context.Context, req *types.Empty) (*types.PilotConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotConfig not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) ReportSubTaskStatus(ctx context.Context, req *types.SubTaskStatus) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSubTaskStatus not implemented")
}
func (*UnimplementedPilotServiceForFrontgateServer) FrontgateChannel(srv PilotServiceForFrontgate_FrontgateChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method FrontgateChannel not implemented")
}

func RegisterPilotServiceForFrontgateServer(s *grpc.Server, srv PilotServiceForFrontgateServer) {
	s.RegisterService(&_PilotServiceForFrontgate_serviceDesc, srv)
}

func _PilotServiceForFrontgate_GetPilotVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetPilotVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetPilotVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetPilotVersion(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetFrontgateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetFrontgateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetFrontgateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetFrontgateVersion(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetDroneVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetDroneVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetDroneVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetDroneVersion(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_PingPilot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).PingPilot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/PingPilot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).PingPilot(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetPilotConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetPilotConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetPilotConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetPilotConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_ReportSubTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).ReportSubTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/ReportSubTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).ReportSubTaskStatus(ctx, req.(*types.SubTaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_FrontgateChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PilotServiceForFrontgateServer).FrontgateChannel(&pilotServiceForFrontgateFrontgateChannelServer{stream})
}

type PilotServiceForFrontgate_FrontgateChannelServer interface {
	Send(*types.Bytes) error
	Recv() (*types.Bytes, error)
	grpc.ServerStream
}

type pilotServiceForFrontgateFrontgateChannelServer struct {
	grpc.ServerStream
}

func (x *pilotServiceForFrontgateFrontgateChannelServer) Send(m *types.Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pilotServiceForFrontgateFrontgateChannelServer) Recv() (*types.Bytes, error) {
	m := new(types.Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PilotServiceForFrontgate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pilot.PilotServiceForFrontgate",
	HandlerType: (*PilotServiceForFrontgateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPilotVersion",
			Handler:    _PilotServiceForFrontgate_GetPilotVersion_Handler,
		},
		{
			MethodName: "GetFrontgateVersion",
			Handler:    _PilotServiceForFrontgate_GetFrontgateVersion_Handler,
		},
		{
			MethodName: "GetDroneVersion",
			Handler:    _PilotServiceForFrontgate_GetDroneVersion_Handler,
		},
		{
			MethodName: "PingPilot",
			Handler:    _PilotServiceForFrontgate_PingPilot_Handler,
		},
		{
			MethodName: "GetPilotConfig",
			Handler:    _PilotServiceForFrontgate_GetPilotConfig_Handler,
		},
		{
			MethodName: "ReportSubTaskStatus",
			Handler:    _PilotServiceForFrontgate_ReportSubTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrontgateChannel",
			Handler:       _PilotServiceForFrontgate_FrontgateChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metadata/pilot/pilot.proto",
}
