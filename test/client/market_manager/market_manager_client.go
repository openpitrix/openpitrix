// Code generated by go-swagger; DO NOT EDIT.

package market_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new market manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateMarket creates market
*/
func (a *Client) CreateMarket(params *CreateMarketParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMarketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMarketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMarket",
		Method:             "POST",
		PathPattern:        "/v1/markets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMarketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMarketOK), nil

}

/*
DeleteMarkets deletes markets
*/
func (a *Client) DeleteMarkets(params *DeleteMarketsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMarketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMarketsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMarkets",
		Method:             "DELETE",
		PathPattern:        "/v1/markets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMarketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMarketsOK), nil

}

/*
DescribeMarketUsers gets users with filter
*/
func (a *Client) DescribeMarketUsers(params *DescribeMarketUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeMarketUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeMarketUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeMarketUsers",
		Method:             "GET",
		PathPattern:        "/v1/market_users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeMarketUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeMarketUsersOK), nil

}

/*
DescribeMarkets describes markets with filter
*/
func (a *Client) DescribeMarkets(params *DescribeMarketsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeMarketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeMarketsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeMarkets",
		Method:             "GET",
		PathPattern:        "/v1/markets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeMarketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeMarketsOK), nil

}

/*
ModifyMarket modifies market
*/
func (a *Client) ModifyMarket(params *ModifyMarketParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyMarketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyMarketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyMarket",
		Method:             "PATCH",
		PathPattern:        "/v1/markets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyMarketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyMarketOK), nil

}

/*
UserJoinMarket joins market
*/
func (a *Client) UserJoinMarket(params *UserJoinMarketParams, authInfo runtime.ClientAuthInfoWriter) (*UserJoinMarketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserJoinMarketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserJoinMarket",
		Method:             "POST",
		PathPattern:        "/v1/markets:join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserJoinMarketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserJoinMarketOK), nil

}

/*
UserLeaveMarket leaves market
*/
func (a *Client) UserLeaveMarket(params *UserLeaveMarketParams, authInfo runtime.ClientAuthInfoWriter) (*UserLeaveMarketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserLeaveMarketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserLeaveMarket",
		Method:             "POST",
		PathPattern:        "/v1/markets:leave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserLeaveMarketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserLeaveMarketOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
