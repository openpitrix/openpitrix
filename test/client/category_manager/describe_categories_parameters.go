// Code generated by go-swagger; DO NOT EDIT.

package category_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeCategoriesParams creates a new DescribeCategoriesParams object
// with the default values initialized.
func NewDescribeCategoriesParams() *DescribeCategoriesParams {
	var ()
	return &DescribeCategoriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeCategoriesParamsWithTimeout creates a new DescribeCategoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeCategoriesParamsWithTimeout(timeout time.Duration) *DescribeCategoriesParams {
	var ()
	return &DescribeCategoriesParams{

		timeout: timeout,
	}
}

// NewDescribeCategoriesParamsWithContext creates a new DescribeCategoriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeCategoriesParamsWithContext(ctx context.Context) *DescribeCategoriesParams {
	var ()
	return &DescribeCategoriesParams{

		Context: ctx,
	}
}

// NewDescribeCategoriesParamsWithHTTPClient creates a new DescribeCategoriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeCategoriesParamsWithHTTPClient(client *http.Client) *DescribeCategoriesParams {
	var ()
	return &DescribeCategoriesParams{
		HTTPClient: client,
	}
}

/*DescribeCategoriesParams contains all the parameters to send to the API endpoint
for the describe categories operation typically these are written to a http.Request
*/
type DescribeCategoriesParams struct {

	/*CategoryID*/
	CategoryID []string
	/*DisplayColumns*/
	DisplayColumns []string
	/*Limit*/
	Limit *int64
	/*Name*/
	Name []string
	/*Offset*/
	Offset *int64
	/*Owner*/
	Owner []string
	/*Reverse*/
	Reverse *bool
	/*SearchWord*/
	SearchWord *string
	/*SortKey*/
	SortKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe categories params
func (o *DescribeCategoriesParams) WithTimeout(timeout time.Duration) *DescribeCategoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe categories params
func (o *DescribeCategoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe categories params
func (o *DescribeCategoriesParams) WithContext(ctx context.Context) *DescribeCategoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe categories params
func (o *DescribeCategoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe categories params
func (o *DescribeCategoriesParams) WithHTTPClient(client *http.Client) *DescribeCategoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe categories params
func (o *DescribeCategoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategoryID adds the categoryID to the describe categories params
func (o *DescribeCategoriesParams) WithCategoryID(categoryID []string) *DescribeCategoriesParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the describe categories params
func (o *DescribeCategoriesParams) SetCategoryID(categoryID []string) {
	o.CategoryID = categoryID
}

// WithDisplayColumns adds the displayColumns to the describe categories params
func (o *DescribeCategoriesParams) WithDisplayColumns(displayColumns []string) *DescribeCategoriesParams {
	o.SetDisplayColumns(displayColumns)
	return o
}

// SetDisplayColumns adds the displayColumns to the describe categories params
func (o *DescribeCategoriesParams) SetDisplayColumns(displayColumns []string) {
	o.DisplayColumns = displayColumns
}

// WithLimit adds the limit to the describe categories params
func (o *DescribeCategoriesParams) WithLimit(limit *int64) *DescribeCategoriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe categories params
func (o *DescribeCategoriesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the describe categories params
func (o *DescribeCategoriesParams) WithName(name []string) *DescribeCategoriesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the describe categories params
func (o *DescribeCategoriesParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the describe categories params
func (o *DescribeCategoriesParams) WithOffset(offset *int64) *DescribeCategoriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe categories params
func (o *DescribeCategoriesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the describe categories params
func (o *DescribeCategoriesParams) WithOwner(owner []string) *DescribeCategoriesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the describe categories params
func (o *DescribeCategoriesParams) SetOwner(owner []string) {
	o.Owner = owner
}

// WithReverse adds the reverse to the describe categories params
func (o *DescribeCategoriesParams) WithReverse(reverse *bool) *DescribeCategoriesParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe categories params
func (o *DescribeCategoriesParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithSearchWord adds the searchWord to the describe categories params
func (o *DescribeCategoriesParams) WithSearchWord(searchWord *string) *DescribeCategoriesParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe categories params
func (o *DescribeCategoriesParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the describe categories params
func (o *DescribeCategoriesParams) WithSortKey(sortKey *string) *DescribeCategoriesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe categories params
func (o *DescribeCategoriesParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeCategoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCategoryID := o.CategoryID

	joinedCategoryID := swag.JoinByFormat(valuesCategoryID, "multi")
	// query array param category_id
	if err := r.SetQueryParam("category_id", joinedCategoryID...); err != nil {
		return err
	}

	valuesDisplayColumns := o.DisplayColumns

	joinedDisplayColumns := swag.JoinByFormat(valuesDisplayColumns, "multi")
	// query array param display_columns
	if err := r.SetQueryParam("display_columns", joinedDisplayColumns...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "multi")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesOwner := o.Owner

	joinedOwner := swag.JoinByFormat(valuesOwner, "multi")
	// query array param owner
	if err := r.SetQueryParam("owner", joinedOwner...); err != nil {
		return err
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
