// Code generated by go-swagger; DO NOT EDIT.

package task_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeTasksParams creates a new DescribeTasksParams object
// with the default values initialized.
func NewDescribeTasksParams() *DescribeTasksParams {
	var ()
	return &DescribeTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeTasksParamsWithTimeout creates a new DescribeTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeTasksParamsWithTimeout(timeout time.Duration) *DescribeTasksParams {
	var ()
	return &DescribeTasksParams{

		timeout: timeout,
	}
}

// NewDescribeTasksParamsWithContext creates a new DescribeTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeTasksParamsWithContext(ctx context.Context) *DescribeTasksParams {
	var ()
	return &DescribeTasksParams{

		Context: ctx,
	}
}

// NewDescribeTasksParamsWithHTTPClient creates a new DescribeTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeTasksParamsWithHTTPClient(client *http.Client) *DescribeTasksParams {
	var ()
	return &DescribeTasksParams{
		HTTPClient: client,
	}
}

/*DescribeTasksParams contains all the parameters to send to the API endpoint
for the describe tasks operation typically these are written to a http.Request
*/
type DescribeTasksParams struct {

	/*DisplayColumns*/
	DisplayColumns []string
	/*Executor*/
	Executor *string
	/*JobID*/
	JobID []string
	/*Limit
	  default is 20, max value is 200.

	*/
	Limit *int64
	/*Offset
	  default is 0.

	*/
	Offset *int64
	/*Owner*/
	Owner []string
	/*SearchWord*/
	SearchWord *string
	/*Status*/
	Status []string
	/*Target*/
	Target *string
	/*TaskID*/
	TaskID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe tasks params
func (o *DescribeTasksParams) WithTimeout(timeout time.Duration) *DescribeTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe tasks params
func (o *DescribeTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe tasks params
func (o *DescribeTasksParams) WithContext(ctx context.Context) *DescribeTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe tasks params
func (o *DescribeTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe tasks params
func (o *DescribeTasksParams) WithHTTPClient(client *http.Client) *DescribeTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe tasks params
func (o *DescribeTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDisplayColumns adds the displayColumns to the describe tasks params
func (o *DescribeTasksParams) WithDisplayColumns(displayColumns []string) *DescribeTasksParams {
	o.SetDisplayColumns(displayColumns)
	return o
}

// SetDisplayColumns adds the displayColumns to the describe tasks params
func (o *DescribeTasksParams) SetDisplayColumns(displayColumns []string) {
	o.DisplayColumns = displayColumns
}

// WithExecutor adds the executor to the describe tasks params
func (o *DescribeTasksParams) WithExecutor(executor *string) *DescribeTasksParams {
	o.SetExecutor(executor)
	return o
}

// SetExecutor adds the executor to the describe tasks params
func (o *DescribeTasksParams) SetExecutor(executor *string) {
	o.Executor = executor
}

// WithJobID adds the jobID to the describe tasks params
func (o *DescribeTasksParams) WithJobID(jobID []string) *DescribeTasksParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the describe tasks params
func (o *DescribeTasksParams) SetJobID(jobID []string) {
	o.JobID = jobID
}

// WithLimit adds the limit to the describe tasks params
func (o *DescribeTasksParams) WithLimit(limit *int64) *DescribeTasksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe tasks params
func (o *DescribeTasksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe tasks params
func (o *DescribeTasksParams) WithOffset(offset *int64) *DescribeTasksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe tasks params
func (o *DescribeTasksParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the describe tasks params
func (o *DescribeTasksParams) WithOwner(owner []string) *DescribeTasksParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the describe tasks params
func (o *DescribeTasksParams) SetOwner(owner []string) {
	o.Owner = owner
}

// WithSearchWord adds the searchWord to the describe tasks params
func (o *DescribeTasksParams) WithSearchWord(searchWord *string) *DescribeTasksParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe tasks params
func (o *DescribeTasksParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithStatus adds the status to the describe tasks params
func (o *DescribeTasksParams) WithStatus(status []string) *DescribeTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe tasks params
func (o *DescribeTasksParams) SetStatus(status []string) {
	o.Status = status
}

// WithTarget adds the target to the describe tasks params
func (o *DescribeTasksParams) WithTarget(target *string) *DescribeTasksParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the describe tasks params
func (o *DescribeTasksParams) SetTarget(target *string) {
	o.Target = target
}

// WithTaskID adds the taskID to the describe tasks params
func (o *DescribeTasksParams) WithTaskID(taskID []string) *DescribeTasksParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the describe tasks params
func (o *DescribeTasksParams) SetTaskID(taskID []string) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDisplayColumns := o.DisplayColumns

	joinedDisplayColumns := swag.JoinByFormat(valuesDisplayColumns, "multi")
	// query array param display_columns
	if err := r.SetQueryParam("display_columns", joinedDisplayColumns...); err != nil {
		return err
	}

	if o.Executor != nil {

		// query param executor
		var qrExecutor string
		if o.Executor != nil {
			qrExecutor = *o.Executor
		}
		qExecutor := qrExecutor
		if qExecutor != "" {
			if err := r.SetQueryParam("executor", qExecutor); err != nil {
				return err
			}
		}

	}

	valuesJobID := o.JobID

	joinedJobID := swag.JoinByFormat(valuesJobID, "multi")
	// query array param job_id
	if err := r.SetQueryParam("job_id", joinedJobID...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesOwner := o.Owner

	joinedOwner := swag.JoinByFormat(valuesOwner, "multi")
	// query array param owner
	if err := r.SetQueryParam("owner", joinedOwner...); err != nil {
		return err
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if o.Target != nil {

		// query param target
		var qrTarget string
		if o.Target != nil {
			qrTarget = *o.Target
		}
		qTarget := qrTarget
		if qTarget != "" {
			if err := r.SetQueryParam("target", qTarget); err != nil {
				return err
			}
		}

	}

	valuesTaskID := o.TaskID

	joinedTaskID := swag.JoinByFormat(valuesTaskID, "multi")
	// query array param task_id
	if err := r.SetQueryParam("task_id", joinedTaskID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
