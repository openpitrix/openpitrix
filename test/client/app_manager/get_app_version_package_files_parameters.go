// Code generated by go-swagger; DO NOT EDIT.

package app_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppVersionPackageFilesParams creates a new GetAppVersionPackageFilesParams object
// with the default values initialized.
func NewGetAppVersionPackageFilesParams() *GetAppVersionPackageFilesParams {
	var ()
	return &GetAppVersionPackageFilesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppVersionPackageFilesParamsWithTimeout creates a new GetAppVersionPackageFilesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppVersionPackageFilesParamsWithTimeout(timeout time.Duration) *GetAppVersionPackageFilesParams {
	var ()
	return &GetAppVersionPackageFilesParams{

		timeout: timeout,
	}
}

// NewGetAppVersionPackageFilesParamsWithContext creates a new GetAppVersionPackageFilesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppVersionPackageFilesParamsWithContext(ctx context.Context) *GetAppVersionPackageFilesParams {
	var ()
	return &GetAppVersionPackageFilesParams{

		Context: ctx,
	}
}

// NewGetAppVersionPackageFilesParamsWithHTTPClient creates a new GetAppVersionPackageFilesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppVersionPackageFilesParamsWithHTTPClient(client *http.Client) *GetAppVersionPackageFilesParams {
	var ()
	return &GetAppVersionPackageFilesParams{
		HTTPClient: client,
	}
}

/*GetAppVersionPackageFilesParams contains all the parameters to send to the API endpoint
for the get app version package files operation typically these are written to a http.Request
*/
type GetAppVersionPackageFilesParams struct {

	/*Files
	  files.

	*/
	Files []string
	/*VersionID
	  use version id to get file of package.

	*/
	VersionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get app version package files params
func (o *GetAppVersionPackageFilesParams) WithTimeout(timeout time.Duration) *GetAppVersionPackageFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get app version package files params
func (o *GetAppVersionPackageFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get app version package files params
func (o *GetAppVersionPackageFilesParams) WithContext(ctx context.Context) *GetAppVersionPackageFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get app version package files params
func (o *GetAppVersionPackageFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get app version package files params
func (o *GetAppVersionPackageFilesParams) WithHTTPClient(client *http.Client) *GetAppVersionPackageFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get app version package files params
func (o *GetAppVersionPackageFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFiles adds the files to the get app version package files params
func (o *GetAppVersionPackageFilesParams) WithFiles(files []string) *GetAppVersionPackageFilesParams {
	o.SetFiles(files)
	return o
}

// SetFiles adds the files to the get app version package files params
func (o *GetAppVersionPackageFilesParams) SetFiles(files []string) {
	o.Files = files
}

// WithVersionID adds the versionID to the get app version package files params
func (o *GetAppVersionPackageFilesParams) WithVersionID(versionID *string) *GetAppVersionPackageFilesParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the get app version package files params
func (o *GetAppVersionPackageFilesParams) SetVersionID(versionID *string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppVersionPackageFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFiles := o.Files

	joinedFiles := swag.JoinByFormat(valuesFiles, "multi")
	// query array param files
	if err := r.SetQueryParam("files", joinedFiles...); err != nil {
		return err
	}

	if o.VersionID != nil {

		// query param version_id
		var qrVersionID string
		if o.VersionID != nil {
			qrVersionID = *o.VersionID
		}
		qVersionID := qrVersionID
		if qVersionID != "" {
			if err := r.SetQueryParam("version_id", qVersionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
