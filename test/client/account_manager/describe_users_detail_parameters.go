// Code generated by go-swagger; DO NOT EDIT.

package account_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeUsersDetailParams creates a new DescribeUsersDetailParams object
// with the default values initialized.
func NewDescribeUsersDetailParams() *DescribeUsersDetailParams {
	var ()
	return &DescribeUsersDetailParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeUsersDetailParamsWithTimeout creates a new DescribeUsersDetailParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeUsersDetailParamsWithTimeout(timeout time.Duration) *DescribeUsersDetailParams {
	var ()
	return &DescribeUsersDetailParams{

		timeout: timeout,
	}
}

// NewDescribeUsersDetailParamsWithContext creates a new DescribeUsersDetailParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeUsersDetailParamsWithContext(ctx context.Context) *DescribeUsersDetailParams {
	var ()
	return &DescribeUsersDetailParams{

		Context: ctx,
	}
}

// NewDescribeUsersDetailParamsWithHTTPClient creates a new DescribeUsersDetailParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeUsersDetailParamsWithHTTPClient(client *http.Client) *DescribeUsersDetailParams {
	var ()
	return &DescribeUsersDetailParams{
		HTTPClient: client,
	}
}

/*DescribeUsersDetailParams contains all the parameters to send to the API endpoint
for the describe users detail operation typically these are written to a http.Request
*/
type DescribeUsersDetailParams struct {

	/*Email
	  email, eg.op@yunify.com.

	*/
	Email []string
	/*GroupID
	  group ids.

	*/
	GroupID []string
	/*Limit
	  data limit, default 20, max 200.

	*/
	Limit *int64
	/*Offset
	  data offset, default 0.

	*/
	Offset *int64
	/*PhoneNumber
	  phone number, string of 11 digital.

	*/
	PhoneNumber []string
	/*Reverse
	  value = 0 sort ASC, value = 1 sort DESC.

	*/
	Reverse *bool
	/*RoleID
	  role ids.

	*/
	RoleID []string
	/*RootGroupID
	  use root group ids to get all group ids.

	*/
	RootGroupID []string
	/*SearchWord
	  query key, support these fields(user_id, email, phone_number, status).

	*/
	SearchWord *string
	/*SortKey
	  sort key, order by sort_key, default create_time.

	*/
	SortKey *string
	/*Status
	  status eg.[active|deleted].

	*/
	Status []string
	/*UserID
	  user ids.

	*/
	UserID []string
	/*Username
	  username.

	*/
	Username []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe users detail params
func (o *DescribeUsersDetailParams) WithTimeout(timeout time.Duration) *DescribeUsersDetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe users detail params
func (o *DescribeUsersDetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe users detail params
func (o *DescribeUsersDetailParams) WithContext(ctx context.Context) *DescribeUsersDetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe users detail params
func (o *DescribeUsersDetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe users detail params
func (o *DescribeUsersDetailParams) WithHTTPClient(client *http.Client) *DescribeUsersDetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe users detail params
func (o *DescribeUsersDetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the describe users detail params
func (o *DescribeUsersDetailParams) WithEmail(email []string) *DescribeUsersDetailParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the describe users detail params
func (o *DescribeUsersDetailParams) SetEmail(email []string) {
	o.Email = email
}

// WithGroupID adds the groupID to the describe users detail params
func (o *DescribeUsersDetailParams) WithGroupID(groupID []string) *DescribeUsersDetailParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the describe users detail params
func (o *DescribeUsersDetailParams) SetGroupID(groupID []string) {
	o.GroupID = groupID
}

// WithLimit adds the limit to the describe users detail params
func (o *DescribeUsersDetailParams) WithLimit(limit *int64) *DescribeUsersDetailParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe users detail params
func (o *DescribeUsersDetailParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe users detail params
func (o *DescribeUsersDetailParams) WithOffset(offset *int64) *DescribeUsersDetailParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe users detail params
func (o *DescribeUsersDetailParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPhoneNumber adds the phoneNumber to the describe users detail params
func (o *DescribeUsersDetailParams) WithPhoneNumber(phoneNumber []string) *DescribeUsersDetailParams {
	o.SetPhoneNumber(phoneNumber)
	return o
}

// SetPhoneNumber adds the phoneNumber to the describe users detail params
func (o *DescribeUsersDetailParams) SetPhoneNumber(phoneNumber []string) {
	o.PhoneNumber = phoneNumber
}

// WithReverse adds the reverse to the describe users detail params
func (o *DescribeUsersDetailParams) WithReverse(reverse *bool) *DescribeUsersDetailParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe users detail params
func (o *DescribeUsersDetailParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithRoleID adds the roleID to the describe users detail params
func (o *DescribeUsersDetailParams) WithRoleID(roleID []string) *DescribeUsersDetailParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the describe users detail params
func (o *DescribeUsersDetailParams) SetRoleID(roleID []string) {
	o.RoleID = roleID
}

// WithRootGroupID adds the rootGroupID to the describe users detail params
func (o *DescribeUsersDetailParams) WithRootGroupID(rootGroupID []string) *DescribeUsersDetailParams {
	o.SetRootGroupID(rootGroupID)
	return o
}

// SetRootGroupID adds the rootGroupId to the describe users detail params
func (o *DescribeUsersDetailParams) SetRootGroupID(rootGroupID []string) {
	o.RootGroupID = rootGroupID
}

// WithSearchWord adds the searchWord to the describe users detail params
func (o *DescribeUsersDetailParams) WithSearchWord(searchWord *string) *DescribeUsersDetailParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe users detail params
func (o *DescribeUsersDetailParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the describe users detail params
func (o *DescribeUsersDetailParams) WithSortKey(sortKey *string) *DescribeUsersDetailParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe users detail params
func (o *DescribeUsersDetailParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the describe users detail params
func (o *DescribeUsersDetailParams) WithStatus(status []string) *DescribeUsersDetailParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe users detail params
func (o *DescribeUsersDetailParams) SetStatus(status []string) {
	o.Status = status
}

// WithUserID adds the userID to the describe users detail params
func (o *DescribeUsersDetailParams) WithUserID(userID []string) *DescribeUsersDetailParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the describe users detail params
func (o *DescribeUsersDetailParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WithUsername adds the username to the describe users detail params
func (o *DescribeUsersDetailParams) WithUsername(username []string) *DescribeUsersDetailParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the describe users detail params
func (o *DescribeUsersDetailParams) SetUsername(username []string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeUsersDetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesEmail := o.Email

	joinedEmail := swag.JoinByFormat(valuesEmail, "multi")
	// query array param email
	if err := r.SetQueryParam("email", joinedEmail...); err != nil {
		return err
	}

	valuesGroupID := o.GroupID

	joinedGroupID := swag.JoinByFormat(valuesGroupID, "multi")
	// query array param group_id
	if err := r.SetQueryParam("group_id", joinedGroupID...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesPhoneNumber := o.PhoneNumber

	joinedPhoneNumber := swag.JoinByFormat(valuesPhoneNumber, "multi")
	// query array param phone_number
	if err := r.SetQueryParam("phone_number", joinedPhoneNumber...); err != nil {
		return err
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	valuesRoleID := o.RoleID

	joinedRoleID := swag.JoinByFormat(valuesRoleID, "multi")
	// query array param role_id
	if err := r.SetQueryParam("role_id", joinedRoleID...); err != nil {
		return err
	}

	valuesRootGroupID := o.RootGroupID

	joinedRootGroupID := swag.JoinByFormat(valuesRootGroupID, "multi")
	// query array param root_group_id
	if err := r.SetQueryParam("root_group_id", joinedRootGroupID...); err != nil {
		return err
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	valuesUserID := o.UserID

	joinedUserID := swag.JoinByFormat(valuesUserID, "multi")
	// query array param user_id
	if err := r.SetQueryParam("user_id", joinedUserID...); err != nil {
		return err
	}

	valuesUsername := o.Username

	joinedUsername := swag.JoinByFormat(valuesUsername, "multi")
	// query array param username
	if err := r.SetQueryParam("username", joinedUsername...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
