// Code generated by go-swagger; DO NOT EDIT.

package account_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangePassword changes user password
*/
func (a *Client) ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangePassword",
		Method:             "POST",
		PathPattern:        "/v1/users/password:change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangePasswordOK), nil

}

/*
CreateGroup creates group a group contain one more user
*/
func (a *Client) CreateGroup(params *CreateGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateGroup",
		Method:             "POST",
		PathPattern:        "/v1/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGroupOK), nil

}

/*
CreatePasswordReset creates a request to reset user s passwo
*/
func (a *Client) CreatePasswordReset(params *CreatePasswordResetParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePasswordResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePasswordReset",
		Method:             "POST",
		PathPattern:        "/v1/users/password:reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePasswordResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePasswordResetOK), nil

}

/*
CreateUser creates user if user have admin permission
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserOK), nil

}

/*
DeleteGroups deletes groups
*/
func (a *Client) DeleteGroups(params *DeleteGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGroups",
		Method:             "DELETE",
		PathPattern:        "/v1/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupsOK), nil

}

/*
DeleteUsers deletes user by user id
*/
func (a *Client) DeleteUsers(params *DeleteUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsers",
		Method:             "DELETE",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersOK), nil

}

/*
DescribeGroups gets groups can filter with these fields group id parent group id group path status default return all groups
*/
func (a *Client) DescribeGroups(params *DescribeGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeGroups",
		Method:             "GET",
		PathPattern:        "/v1/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeGroupsOK), nil

}

/*
DescribeGroupsDetail gets groups include all user in this group can filter with these fields group id parent group id group path status default return all groups
*/
func (a *Client) DescribeGroupsDetail(params *DescribeGroupsDetailParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeGroupsDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeGroupsDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeGroupsDetail",
		Method:             "GET",
		PathPattern:        "/v1/groups_detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeGroupsDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeGroupsDetailOK), nil

}

/*
DescribeUsers gets users filter with fields user id email phone number status default return all users
*/
func (a *Client) DescribeUsers(params *DescribeUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeUsers",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeUsersOK), nil

}

/*
DescribeUsersDetail gets users include user info of role and group filter with fields user id email phone number status default return all users
*/
func (a *Client) DescribeUsersDetail(params *DescribeUsersDetailParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeUsersDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUsersDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeUsersDetail",
		Method:             "GET",
		PathPattern:        "/v1/users_detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeUsersDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeUsersDetailOK), nil

}

/*
GetPasswordReset gets a request of reset user s password
*/
func (a *Client) GetPasswordReset(params *GetPasswordResetParams, authInfo runtime.ClientAuthInfoWriter) (*GetPasswordResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPasswordReset",
		Method:             "GET",
		PathPattern:        "/v1/users/password:reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPasswordResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPasswordResetOK), nil

}

/*
IsvCreateUser isvs of platform create user
*/
func (a *Client) IsvCreateUser(params *IsvCreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*IsvCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsvCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsvCreateUser",
		Method:             "POST",
		PathPattern:        "/v1/isv_users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IsvCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsvCreateUserOK), nil

}

/*
JoinGroup joins groups user can join in groups
*/
func (a *Client) JoinGroup(params *JoinGroupParams, authInfo runtime.ClientAuthInfoWriter) (*JoinGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJoinGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JoinGroup",
		Method:             "POST",
		PathPattern:        "/v1/groups:join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JoinGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JoinGroupOK), nil

}

/*
LeaveGroup leaves groups user can leave from groups
*/
func (a *Client) LeaveGroup(params *LeaveGroupParams, authInfo runtime.ClientAuthInfoWriter) (*LeaveGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeaveGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LeaveGroup",
		Method:             "POST",
		PathPattern:        "/v1/groups:leave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LeaveGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LeaveGroupOK), nil

}

/*
ModifyGroup modifies group info
*/
func (a *Client) ModifyGroup(params *ModifyGroupParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyGroup",
		Method:             "PATCH",
		PathPattern:        "/v1/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyGroupOK), nil

}

/*
ModifyUser modifies user info
*/
func (a *Client) ModifyUser(params *ModifyUserParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyUser",
		Method:             "PATCH",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyUserOK), nil

}

/*
ValidateUserPassword validates user and password
*/
func (a *Client) ValidateUserPassword(params *ValidateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateUserPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUserPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ValidateUserPassword",
		Method:             "POST",
		PathPattern:        "/v1/users/password:validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ValidateUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ValidateUserPasswordOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
