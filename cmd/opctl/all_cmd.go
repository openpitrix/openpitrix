// Code generated by opctl-gen-cmd. DO NOT EDIT.
//
// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

package main

import (
	"io/ioutil"

	"github.com/go-openapi/strfmt"

	"openpitrix.io/openpitrix/test/client/access_manager"
	"openpitrix.io/openpitrix/test/client/account_manager"
	"openpitrix.io/openpitrix/test/client/app_manager"
	"openpitrix.io/openpitrix/test/client/app_vendor_manager"
	"openpitrix.io/openpitrix/test/client/attachment_service"
	"openpitrix.io/openpitrix/test/client/category_manager"
	"openpitrix.io/openpitrix/test/client/cluster_manager"
	"openpitrix.io/openpitrix/test/client/job_manager"
	"openpitrix.io/openpitrix/test/client/market_manager"
	"openpitrix.io/openpitrix/test/client/repo_indexer"
	"openpitrix.io/openpitrix/test/client/repo_manager"
	"openpitrix.io/openpitrix/test/client/runtime_manager"
	"openpitrix.io/openpitrix/test/client/service_config"
	"openpitrix.io/openpitrix/test/client/task_manager"
	"openpitrix.io/openpitrix/test/client/token_manager"
	"openpitrix.io/openpitrix/test/models"
)

var AllCmd = []Cmd{
	NewBindUserRoleCmd(),
	NewCanDoCmd(),
	NewCreateRoleCmd(),
	NewDeleteRolesCmd(),
	NewDescribeRolesCmd(),
	NewGetRoleCmd(),
	NewGetRoleModuleCmd(),
	NewModifyRoleCmd(),
	NewModifyRoleModuleCmd(),
	NewUnbindUserRoleCmd(),
	NewChangePasswordCmd(),
	NewCreateGroupCmd(),
	NewCreatePasswordResetCmd(),
	NewCreateUserCmd(),
	NewDeleteGroupsCmd(),
	NewDeleteUsersCmd(),
	NewDescribeGroupsCmd(),
	NewDescribeGroupsDetailCmd(),
	NewDescribeUsersCmd(),
	NewDescribeUsersDetailCmd(),
	NewGetPasswordResetCmd(),
	NewIsvCreateUserCmd(),
	NewJoinGroupCmd(),
	NewLeaveGroupCmd(),
	NewModifyGroupCmd(),
	NewModifyUserCmd(),
	NewValidateUserPasswordCmd(),
	NewBusinessPassAppVersionCmd(),
	NewBusinessRejectAppVersionCmd(),
	NewBusinessReviewAppVersionCmd(),
	NewCancelAppVersionCmd(),
	NewCreateAppCmd(),
	NewCreateAppVersionCmd(),
	NewDeleteAppVersionCmd(),
	NewDeleteAppsCmd(),
	NewDescribeActiveAppVersionsCmd(),
	NewDescribeActiveAppsCmd(),
	NewDescribeAppVersionAuditsCmd(),
	NewDescribeAppVersionReviewsCmd(),
	NewDescribeAppVersionsCmd(),
	NewDescribeAppsCmd(),
	NewGetAppStatisticsCmd(),
	NewGetAppVersionPackageCmd(),
	NewGetAppVersionPackageFilesCmd(),
	NewIsvPassAppVersionCmd(),
	NewIsvRejectAppVersionCmd(),
	NewIsvReviewAppVersionCmd(),
	NewModifyAppCmd(),
	NewModifyAppVersionCmd(),
	NewRecoverAppVersionCmd(),
	NewReleaseAppVersionCmd(),
	NewSubmitAppVersionCmd(),
	NewSuspendAppVersionCmd(),
	NewTechnicalPassAppVersionCmd(),
	NewTechnicalRejectAppVersionCmd(),
	NewTechnicalReviewAppVersionCmd(),
	NewUploadAppAttachmentCmd(),
	NewValidatePackageCmd(),
	NewDescribeAppVendorStatisticsCmd(),
	NewDescribeVendorVerifyInfosCmd(),
	NewGetVendorVerifyInfoCmd(),
	NewPassVendorVerifyInfoCmd(),
	NewRejectVendorVerifyInfoCmd(),
	NewSubmitVendorVerifyInfoCmd(),
	NewGetAttachmentCmd(),
	NewCreateCategoryCmd(),
	NewDeleteCategoriesCmd(),
	NewDescribeCategoriesCmd(),
	NewModifyCategoryCmd(),
	NewAddClusterNodesCmd(),
	NewAttachKeyPairsCmd(),
	NewCeaseClustersCmd(),
	NewCreateClusterCmd(),
	NewCreateDebugClusterCmd(),
	NewCreateKeyPairCmd(),
	NewDeleteClusterNodesCmd(),
	NewDeleteClustersCmd(),
	NewDeleteKeyPairsCmd(),
	NewDescribeAppClustersCmd(),
	NewDescribeClusterNodesCmd(),
	NewDescribeClustersCmd(),
	NewDescribeDebugAppClustersCmd(),
	NewDescribeDebugClustersCmd(),
	NewDescribeKeyPairsCmd(),
	NewDescribeSubnetsCmd(),
	NewDetachKeyPairsCmd(),
	NewGetClusterStatisticsCmd(),
	NewModifyClusterAttributesCmd(),
	NewModifyClusterNodeAttributesCmd(),
	NewRecoverClustersCmd(),
	NewResizeClusterCmd(),
	NewRollbackClusterCmd(),
	NewStartClustersCmd(),
	NewStopClustersCmd(),
	NewUpdateClusterEnvCmd(),
	NewUpgradeClusterCmd(),
	NewDescribeJobsCmd(),
	NewCreateMarketCmd(),
	NewDeleteMarketsCmd(),
	NewDescribeMarketUsersCmd(),
	NewDescribeMarketsCmd(),
	NewModifyMarketCmd(),
	NewUserJoinMarketCmd(),
	NewUserLeaveMarketCmd(),
	NewDescribeRepoEventsCmd(),
	NewIndexRepoCmd(),
	NewCreateRepoCmd(),
	NewDeleteReposCmd(),
	NewDescribeReposCmd(),
	NewModifyRepoCmd(),
	NewValidateRepoCmd(),
	NewCreateDebugRuntimeCmd(),
	NewCreateDebugRuntimeCredentialCmd(),
	NewCreateRuntimeCmd(),
	NewCreateRuntimeCredentialCmd(),
	NewDeleteRuntimeCredentialsCmd(),
	NewDeleteRuntimesCmd(),
	NewDescribeDebugRuntimeCredentialsCmd(),
	NewDescribeDebugRuntimesCmd(),
	NewDescribeRuntimeCredentialsCmd(),
	NewDescribeRuntimeProviderZonesCmd(),
	NewDescribeRuntimesCmd(),
	NewGetRuntimeStatisticsCmd(),
	NewModifyRuntimeCmd(),
	NewModifyRuntimeCredentialCmd(),
	NewValidateRuntimeCredentialCmd(),
	NewGetServiceConfigCmd(),
	NewSetServiceConfigCmd(),
	NewValidateEmailServiceCmd(),
	NewDescribeTasksCmd(),
	NewRetryTasksCmd(),
	NewCreateClientCmd(),
	NewTokenCmd(),
}

type BindUserRoleCmd struct {
	*models.OpenpitrixBindUserRoleRequest
}

func NewBindUserRoleCmd() Cmd {
	cmd := &BindUserRoleCmd{}
	cmd.OpenpitrixBindUserRoleRequest = &models.OpenpitrixBindUserRoleRequest{}
	return cmd
}

func (*BindUserRoleCmd) GetActionName() string {
	return "BindUserRole"
}

func (c *BindUserRoleCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *BindUserRoleCmd) Run(out Out) error {
	params := access_manager.NewBindUserRoleParams()
	params.WithBody(c.OpenpitrixBindUserRoleRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.BindUserRole(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CanDoCmd struct {
	*models.OpenpitrixCanDoRequest
}

func NewCanDoCmd() Cmd {
	cmd := &CanDoCmd{}
	cmd.OpenpitrixCanDoRequest = &models.OpenpitrixCanDoRequest{}
	return cmd
}

func (*CanDoCmd) GetActionName() string {
	return "CanDo"
}

func (c *CanDoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.APIMethod, "api_method", "", "", "")
	f.StringVarP(&c.URL, "url", "", "", "")
	f.StringVarP(&c.URLMethod, "url_method", "", "", "")
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *CanDoCmd) Run(out Out) error {
	params := access_manager.NewCanDoParams()
	params.WithBody(c.OpenpitrixCanDoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.CanDo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateRoleCmd struct {
	*models.OpenpitrixCreateRoleRequest
}

func NewCreateRoleCmd() Cmd {
	cmd := &CreateRoleCmd{}
	cmd.OpenpitrixCreateRoleRequest = &models.OpenpitrixCreateRoleRequest{}
	return cmd
}

func (*CreateRoleCmd) GetActionName() string {
	return "CreateRole"
}

func (c *CreateRoleCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Portal, "portal", "", "", "")
	f.StringVarP(&c.RoleName, "role_name", "", "", "")
}

func (c *CreateRoleCmd) Run(out Out) error {
	params := access_manager.NewCreateRoleParams()
	params.WithBody(c.OpenpitrixCreateRoleRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.CreateRole(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteRolesCmd struct {
	*models.OpenpitrixDeleteRolesRequest
}

func NewDeleteRolesCmd() Cmd {
	cmd := &DeleteRolesCmd{}
	cmd.OpenpitrixDeleteRolesRequest = &models.OpenpitrixDeleteRolesRequest{}
	return cmd
}

func (*DeleteRolesCmd) GetActionName() string {
	return "DeleteRoles"
}

func (c *DeleteRolesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
}

func (c *DeleteRolesCmd) Run(out Out) error {
	params := access_manager.NewDeleteRolesParams()
	params.WithBody(c.OpenpitrixDeleteRolesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.DeleteRoles(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeRolesCmd struct {
	*access_manager.DescribeRolesParams
}

func NewDescribeRolesCmd() Cmd {
	return &DescribeRolesCmd{
		access_manager.NewDescribeRolesParams(),
	}
}

func (*DescribeRolesCmd) GetActionName() string {
	return "DescribeRoles"
}

func (c *DescribeRolesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.ActionBundleID, "action_bundle_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.Portal, "portal", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
	f.StringSliceVarP(&c.RoleName, "role_name", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeRolesCmd) Run(out Out) error {
	params := c.DescribeRolesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.DescribeRoles(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetRoleCmd struct {
	*access_manager.GetRoleParams
}

func NewGetRoleCmd() Cmd {
	return &GetRoleCmd{
		access_manager.NewGetRoleParams(),
	}
}

func (*GetRoleCmd) GetActionName() string {
	return "GetRole"
}

func (c *GetRoleCmd) ParseFlag(f Flag) {
	c.RoleID = new(string)
	f.StringVarP(c.RoleID, "role_id", "", "", "")
}

func (c *GetRoleCmd) Run(out Out) error {
	params := c.GetRoleParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.GetRole(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetRoleModuleCmd struct {
	*access_manager.GetRoleModuleParams
}

func NewGetRoleModuleCmd() Cmd {
	return &GetRoleModuleCmd{
		access_manager.NewGetRoleModuleParams(),
	}
}

func (*GetRoleModuleCmd) GetActionName() string {
	return "GetRoleModule"
}

func (c *GetRoleModuleCmd) ParseFlag(f Flag) {
	c.RoleID = new(string)
	f.StringVarP(c.RoleID, "role_id", "", "", "")
}

func (c *GetRoleModuleCmd) Run(out Out) error {
	params := c.GetRoleModuleParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.GetRoleModule(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyRoleCmd struct {
	*models.OpenpitrixModifyRoleRequest
}

func NewModifyRoleCmd() Cmd {
	cmd := &ModifyRoleCmd{}
	cmd.OpenpitrixModifyRoleRequest = &models.OpenpitrixModifyRoleRequest{}
	return cmd
}

func (*ModifyRoleCmd) GetActionName() string {
	return "ModifyRole"
}

func (c *ModifyRoleCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.RoleID, "role_id", "", "", "")
	f.StringVarP(&c.RoleName, "role_name", "", "", "")
}

func (c *ModifyRoleCmd) Run(out Out) error {
	params := access_manager.NewModifyRoleParams()
	params.WithBody(c.OpenpitrixModifyRoleRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.ModifyRole(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyRoleModuleCmd struct {
	*models.OpenpitrixModifyRoleModuleRequest
}

func NewModifyRoleModuleCmd() Cmd {
	cmd := &ModifyRoleModuleCmd{}
	cmd.OpenpitrixModifyRoleModuleRequest = &models.OpenpitrixModifyRoleModuleRequest{}
	return cmd
}

func (*ModifyRoleModuleCmd) GetActionName() string {
	return "ModifyRoleModule"
}

func (c *ModifyRoleModuleCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.RoleID, "role_id", "", "", "")
}

func (c *ModifyRoleModuleCmd) Run(out Out) error {
	params := access_manager.NewModifyRoleModuleParams()
	params.WithBody(c.OpenpitrixModifyRoleModuleRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.ModifyRoleModule(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UnbindUserRoleCmd struct {
	*models.OpenpitrixUnbindUserRoleRequest
}

func NewUnbindUserRoleCmd() Cmd {
	cmd := &UnbindUserRoleCmd{}
	cmd.OpenpitrixUnbindUserRoleRequest = &models.OpenpitrixUnbindUserRoleRequest{}
	return cmd
}

func (*UnbindUserRoleCmd) GetActionName() string {
	return "UnbindUserRole"
}

func (c *UnbindUserRoleCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *UnbindUserRoleCmd) Run(out Out) error {
	params := access_manager.NewUnbindUserRoleParams()
	params.WithBody(c.OpenpitrixUnbindUserRoleRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccessManager.UnbindUserRole(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ChangePasswordCmd struct {
	*models.OpenpitrixChangePasswordRequest
}

func NewChangePasswordCmd() Cmd {
	cmd := &ChangePasswordCmd{}
	cmd.OpenpitrixChangePasswordRequest = &models.OpenpitrixChangePasswordRequest{}
	return cmd
}

func (*ChangePasswordCmd) GetActionName() string {
	return "ChangePassword"
}

func (c *ChangePasswordCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.NewPassword, "new_password", "", "", "")
	f.StringVarP(&c.ResetID, "reset_id", "", "", "")
}

func (c *ChangePasswordCmd) Run(out Out) error {
	params := account_manager.NewChangePasswordParams()
	params.WithBody(c.OpenpitrixChangePasswordRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.ChangePassword(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateGroupCmd struct {
	*models.OpenpitrixCreateGroupRequest
}

func NewCreateGroupCmd() Cmd {
	cmd := &CreateGroupCmd{}
	cmd.OpenpitrixCreateGroupRequest = &models.OpenpitrixCreateGroupRequest{}
	return cmd
}

func (*CreateGroupCmd) GetActionName() string {
	return "CreateGroup"
}

func (c *CreateGroupCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.ParentGroupID, "parent_group_id", "", "", "")
}

func (c *CreateGroupCmd) Run(out Out) error {
	params := account_manager.NewCreateGroupParams()
	params.WithBody(c.OpenpitrixCreateGroupRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.CreateGroup(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreatePasswordResetCmd struct {
	*models.OpenpitrixCreatePasswordResetRequest
}

func NewCreatePasswordResetCmd() Cmd {
	cmd := &CreatePasswordResetCmd{}
	cmd.OpenpitrixCreatePasswordResetRequest = &models.OpenpitrixCreatePasswordResetRequest{}
	return cmd
}

func (*CreatePasswordResetCmd) GetActionName() string {
	return "CreatePasswordReset"
}

func (c *CreatePasswordResetCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Password, "password", "", "", "")
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *CreatePasswordResetCmd) Run(out Out) error {
	params := account_manager.NewCreatePasswordResetParams()
	params.WithBody(c.OpenpitrixCreatePasswordResetRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.CreatePasswordReset(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateUserCmd struct {
	*models.OpenpitrixCreateUserRequest
}

func NewCreateUserCmd() Cmd {
	cmd := &CreateUserCmd{}
	cmd.OpenpitrixCreateUserRequest = &models.OpenpitrixCreateUserRequest{}
	return cmd
}

func (*CreateUserCmd) GetActionName() string {
	return "CreateUser"
}

func (c *CreateUserCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Email, "email", "", "", "")
	f.StringVarP(&c.Password, "password", "", "", "")
	f.StringVarP(&c.PhoneNumber, "phone_number", "", "", "")
	f.StringVarP(&c.RoleID, "role_id", "", "", "")
}

func (c *CreateUserCmd) Run(out Out) error {
	params := account_manager.NewCreateUserParams()
	params.WithBody(c.OpenpitrixCreateUserRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.CreateUser(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteGroupsCmd struct {
	*models.OpenpitrixDeleteGroupsRequest
}

func NewDeleteGroupsCmd() Cmd {
	cmd := &DeleteGroupsCmd{}
	cmd.OpenpitrixDeleteGroupsRequest = &models.OpenpitrixDeleteGroupsRequest{}
	return cmd
}

func (*DeleteGroupsCmd) GetActionName() string {
	return "DeleteGroups"
}

func (c *DeleteGroupsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
}

func (c *DeleteGroupsCmd) Run(out Out) error {
	params := account_manager.NewDeleteGroupsParams()
	params.WithBody(c.OpenpitrixDeleteGroupsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DeleteGroups(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteUsersCmd struct {
	*models.OpenpitrixDeleteUsersRequest
}

func NewDeleteUsersCmd() Cmd {
	cmd := &DeleteUsersCmd{}
	cmd.OpenpitrixDeleteUsersRequest = &models.OpenpitrixDeleteUsersRequest{}
	return cmd
}

func (*DeleteUsersCmd) GetActionName() string {
	return "DeleteUsers"
}

func (c *DeleteUsersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *DeleteUsersCmd) Run(out Out) error {
	params := account_manager.NewDeleteUsersParams()
	params.WithBody(c.OpenpitrixDeleteUsersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DeleteUsers(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeGroupsCmd struct {
	*account_manager.DescribeGroupsParams
}

func NewDescribeGroupsCmd() Cmd {
	return &DescribeGroupsCmd{
		account_manager.NewDescribeGroupsParams(),
	}
}

func (*DescribeGroupsCmd) GetActionName() string {
	return "DescribeGroups"
}

func (c *DescribeGroupsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	f.StringSliceVarP(&c.GroupName, "group_name", "", []string{}, "")
	f.StringSliceVarP(&c.GroupPath, "group_path", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.ParentGroupID, "parent_group_id", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RootGroupID, "root_group_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeGroupsCmd) Run(out Out) error {
	params := c.DescribeGroupsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DescribeGroups(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeGroupsDetailCmd struct {
	*account_manager.DescribeGroupsDetailParams
}

func NewDescribeGroupsDetailCmd() Cmd {
	return &DescribeGroupsDetailCmd{
		account_manager.NewDescribeGroupsDetailParams(),
	}
}

func (*DescribeGroupsDetailCmd) GetActionName() string {
	return "DescribeGroupsDetail"
}

func (c *DescribeGroupsDetailCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	f.StringSliceVarP(&c.GroupName, "group_name", "", []string{}, "")
	f.StringSliceVarP(&c.GroupPath, "group_path", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.ParentGroupID, "parent_group_id", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RootGroupID, "root_group_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeGroupsDetailCmd) Run(out Out) error {
	params := c.DescribeGroupsDetailParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DescribeGroupsDetail(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeUsersCmd struct {
	*account_manager.DescribeUsersParams
}

func NewDescribeUsersCmd() Cmd {
	return &DescribeUsersCmd{
		account_manager.NewDescribeUsersParams(),
	}
}

func (*DescribeUsersCmd) GetActionName() string {
	return "DescribeUsers"
}

func (c *DescribeUsersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.Email, "email", "", []string{}, "")
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.PhoneNumber, "phone_number", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
	f.StringSliceVarP(&c.RootGroupID, "root_group_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
	f.StringSliceVarP(&c.Username, "username", "", []string{}, "")
}

func (c *DescribeUsersCmd) Run(out Out) error {
	params := c.DescribeUsersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DescribeUsers(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeUsersDetailCmd struct {
	*account_manager.DescribeUsersDetailParams
}

func NewDescribeUsersDetailCmd() Cmd {
	return &DescribeUsersDetailCmd{
		account_manager.NewDescribeUsersDetailParams(),
	}
}

func (*DescribeUsersDetailCmd) GetActionName() string {
	return "DescribeUsersDetail"
}

func (c *DescribeUsersDetailCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.Email, "email", "", []string{}, "")
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.PhoneNumber, "phone_number", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RoleID, "role_id", "", []string{}, "")
	f.StringSliceVarP(&c.RootGroupID, "root_group_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
	f.StringSliceVarP(&c.Username, "username", "", []string{}, "")
}

func (c *DescribeUsersDetailCmd) Run(out Out) error {
	params := c.DescribeUsersDetailParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.DescribeUsersDetail(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetPasswordResetCmd struct {
	*account_manager.GetPasswordResetParams
}

func NewGetPasswordResetCmd() Cmd {
	return &GetPasswordResetCmd{
		account_manager.NewGetPasswordResetParams(),
	}
}

func (*GetPasswordResetCmd) GetActionName() string {
	return "GetPasswordReset"
}

func (c *GetPasswordResetCmd) ParseFlag(f Flag) {
	c.ResetID = new(string)
	f.StringVarP(c.ResetID, "reset_id", "", "", "")
}

func (c *GetPasswordResetCmd) Run(out Out) error {
	params := c.GetPasswordResetParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.GetPasswordReset(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type IsvCreateUserCmd struct {
	*models.OpenpitrixCreateUserRequest
}

func NewIsvCreateUserCmd() Cmd {
	cmd := &IsvCreateUserCmd{}
	cmd.OpenpitrixCreateUserRequest = &models.OpenpitrixCreateUserRequest{}
	return cmd
}

func (*IsvCreateUserCmd) GetActionName() string {
	return "IsvCreateUser"
}

func (c *IsvCreateUserCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Email, "email", "", "", "")
	f.StringVarP(&c.Password, "password", "", "", "")
	f.StringVarP(&c.PhoneNumber, "phone_number", "", "", "")
	f.StringVarP(&c.RoleID, "role_id", "", "", "")
}

func (c *IsvCreateUserCmd) Run(out Out) error {
	params := account_manager.NewIsvCreateUserParams()
	params.WithBody(c.OpenpitrixCreateUserRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.IsvCreateUser(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type JoinGroupCmd struct {
	*models.OpenpitrixJoinGroupRequest
}

func NewJoinGroupCmd() Cmd {
	cmd := &JoinGroupCmd{}
	cmd.OpenpitrixJoinGroupRequest = &models.OpenpitrixJoinGroupRequest{}
	return cmd
}

func (*JoinGroupCmd) GetActionName() string {
	return "JoinGroup"
}

func (c *JoinGroupCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *JoinGroupCmd) Run(out Out) error {
	params := account_manager.NewJoinGroupParams()
	params.WithBody(c.OpenpitrixJoinGroupRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.JoinGroup(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type LeaveGroupCmd struct {
	*models.OpenpitrixLeaveGroupRequest
}

func NewLeaveGroupCmd() Cmd {
	cmd := &LeaveGroupCmd{}
	cmd.OpenpitrixLeaveGroupRequest = &models.OpenpitrixLeaveGroupRequest{}
	return cmd
}

func (*LeaveGroupCmd) GetActionName() string {
	return "LeaveGroup"
}

func (c *LeaveGroupCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.GroupID, "group_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *LeaveGroupCmd) Run(out Out) error {
	params := account_manager.NewLeaveGroupParams()
	params.WithBody(c.OpenpitrixLeaveGroupRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.LeaveGroup(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyGroupCmd struct {
	*models.OpenpitrixModifyGroupRequest
}

func NewModifyGroupCmd() Cmd {
	cmd := &ModifyGroupCmd{}
	cmd.OpenpitrixModifyGroupRequest = &models.OpenpitrixModifyGroupRequest{}
	return cmd
}

func (*ModifyGroupCmd) GetActionName() string {
	return "ModifyGroup"
}

func (c *ModifyGroupCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.GroupID, "group_id", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.ParentGroupID, "parent_group_id", "", "", "")
}

func (c *ModifyGroupCmd) Run(out Out) error {
	params := account_manager.NewModifyGroupParams()
	params.WithBody(c.OpenpitrixModifyGroupRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.ModifyGroup(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyUserCmd struct {
	*models.OpenpitrixModifyUserRequest
}

func NewModifyUserCmd() Cmd {
	cmd := &ModifyUserCmd{}
	cmd.OpenpitrixModifyUserRequest = &models.OpenpitrixModifyUserRequest{}
	return cmd
}

func (*ModifyUserCmd) GetActionName() string {
	return "ModifyUser"
}

func (c *ModifyUserCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Email, "email", "", "", "")
	f.StringVarP(&c.Password, "password", "", "", "")
	f.StringVarP(&c.PhoneNumber, "phone_number", "", "", "")
	f.StringVarP(&c.UserID, "user_id", "", "", "")
	f.StringVarP(&c.Username, "username", "", "", "")
}

func (c *ModifyUserCmd) Run(out Out) error {
	params := account_manager.NewModifyUserParams()
	params.WithBody(c.OpenpitrixModifyUserRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.ModifyUser(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ValidateUserPasswordCmd struct {
	*models.OpenpitrixValidateUserPasswordRequest
}

func NewValidateUserPasswordCmd() Cmd {
	cmd := &ValidateUserPasswordCmd{}
	cmd.OpenpitrixValidateUserPasswordRequest = &models.OpenpitrixValidateUserPasswordRequest{}
	return cmd
}

func (*ValidateUserPasswordCmd) GetActionName() string {
	return "ValidateUserPassword"
}

func (c *ValidateUserPasswordCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Email, "email", "", "", "")
	f.StringVarP(&c.Password, "password", "", "", "")
}

func (c *ValidateUserPasswordCmd) Run(out Out) error {
	params := account_manager.NewValidateUserPasswordParams()
	params.WithBody(c.OpenpitrixValidateUserPasswordRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AccountManager.ValidateUserPassword(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type BusinessPassAppVersionCmd struct {
	*models.OpenpitrixPassAppVersionRequest
}

func NewBusinessPassAppVersionCmd() Cmd {
	cmd := &BusinessPassAppVersionCmd{}
	cmd.OpenpitrixPassAppVersionRequest = &models.OpenpitrixPassAppVersionRequest{}
	return cmd
}

func (*BusinessPassAppVersionCmd) GetActionName() string {
	return "BusinessPassAppVersion"
}

func (c *BusinessPassAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *BusinessPassAppVersionCmd) Run(out Out) error {
	params := app_manager.NewBusinessPassAppVersionParams()
	params.WithBody(c.OpenpitrixPassAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.BusinessPassAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type BusinessRejectAppVersionCmd struct {
	*models.OpenpitrixRejectAppVersionRequest
}

func NewBusinessRejectAppVersionCmd() Cmd {
	cmd := &BusinessRejectAppVersionCmd{}
	cmd.OpenpitrixRejectAppVersionRequest = &models.OpenpitrixRejectAppVersionRequest{}
	return cmd
}

func (*BusinessRejectAppVersionCmd) GetActionName() string {
	return "BusinessRejectAppVersion"
}

func (c *BusinessRejectAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Message, "message", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *BusinessRejectAppVersionCmd) Run(out Out) error {
	params := app_manager.NewBusinessRejectAppVersionParams()
	params.WithBody(c.OpenpitrixRejectAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.BusinessRejectAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type BusinessReviewAppVersionCmd struct {
	*models.OpenpitrixReviewAppVersionRequest
}

func NewBusinessReviewAppVersionCmd() Cmd {
	cmd := &BusinessReviewAppVersionCmd{}
	cmd.OpenpitrixReviewAppVersionRequest = &models.OpenpitrixReviewAppVersionRequest{}
	return cmd
}

func (*BusinessReviewAppVersionCmd) GetActionName() string {
	return "BusinessReviewAppVersion"
}

func (c *BusinessReviewAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *BusinessReviewAppVersionCmd) Run(out Out) error {
	params := app_manager.NewBusinessReviewAppVersionParams()
	params.WithBody(c.OpenpitrixReviewAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.BusinessReviewAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CancelAppVersionCmd struct {
	*models.OpenpitrixCancelAppVersionRequest
}

func NewCancelAppVersionCmd() Cmd {
	cmd := &CancelAppVersionCmd{}
	cmd.OpenpitrixCancelAppVersionRequest = &models.OpenpitrixCancelAppVersionRequest{}
	return cmd
}

func (*CancelAppVersionCmd) GetActionName() string {
	return "CancelAppVersion"
}

func (c *CancelAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *CancelAppVersionCmd) Run(out Out) error {
	params := app_manager.NewCancelAppVersionParams()
	params.WithBody(c.OpenpitrixCancelAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.CancelAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateAppCmd struct {
	*models.OpenpitrixCreateAppRequest
	IconPath           string
	VersionPackagePath string
}

func NewCreateAppCmd() Cmd {
	cmd := &CreateAppCmd{}
	cmd.OpenpitrixCreateAppRequest = &models.OpenpitrixCreateAppRequest{}
	return cmd
}

func (*CreateAppCmd) GetActionName() string {
	return "CreateApp"
}

func (c *CreateAppCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.IconPath, "icon", "", "", "filepath of icon. set the app icon")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.VersionName, "version_name", "", "", "create app version with specify name")
	f.StringVarP(&c.VersionPackagePath, "version_package", "", "", "filepath of version_package. create app version with specify package")
	f.StringVarP(&c.VersionType, "version_type", "", "", "optional: vmbased/helm")
}

func (c *CreateAppCmd) Run(out Out) error {
	if c.IconPath != "" {
		content, err := ioutil.ReadFile(c.IconPath)
		if err != nil {
			return err
		}
		c.Icon = strfmt.Base64(content)
	}
	if c.VersionPackagePath != "" {
		content, err := ioutil.ReadFile(c.VersionPackagePath)
		if err != nil {
			return err
		}
		c.VersionPackage = strfmt.Base64(content)
	}
	params := app_manager.NewCreateAppParams()
	params.WithBody(c.OpenpitrixCreateAppRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.CreateApp(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateAppVersionCmd struct {
	*models.OpenpitrixCreateAppVersionRequest
	PackagePath string
}

func NewCreateAppVersionCmd() Cmd {
	cmd := &CreateAppVersionCmd{}
	cmd.OpenpitrixCreateAppVersionRequest = &models.OpenpitrixCreateAppVersionRequest{}
	return cmd
}

func (*CreateAppVersionCmd) GetActionName() string {
	return "CreateAppVersion"
}

func (c *CreateAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.AppID, "app_id", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.PackagePath, "package", "", "", "filepath of package. ")
	f.StringVarP(&c.Type, "type", "", "", "optional: vmbased/helm")
}

func (c *CreateAppVersionCmd) Run(out Out) error {
	if c.PackagePath != "" {
		content, err := ioutil.ReadFile(c.PackagePath)
		if err != nil {
			return err
		}
		c.Package = strfmt.Base64(content)
	}
	params := app_manager.NewCreateAppVersionParams()
	params.WithBody(c.OpenpitrixCreateAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.CreateAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteAppVersionCmd struct {
	*models.OpenpitrixDeleteAppVersionRequest
}

func NewDeleteAppVersionCmd() Cmd {
	cmd := &DeleteAppVersionCmd{}
	cmd.OpenpitrixDeleteAppVersionRequest = &models.OpenpitrixDeleteAppVersionRequest{}
	return cmd
}

func (*DeleteAppVersionCmd) GetActionName() string {
	return "DeleteAppVersion"
}

func (c *DeleteAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *DeleteAppVersionCmd) Run(out Out) error {
	params := app_manager.NewDeleteAppVersionParams()
	params.WithBody(c.OpenpitrixDeleteAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DeleteAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteAppsCmd struct {
	*models.OpenpitrixDeleteAppsRequest
}

func NewDeleteAppsCmd() Cmd {
	cmd := &DeleteAppsCmd{}
	cmd.OpenpitrixDeleteAppsRequest = &models.OpenpitrixDeleteAppsRequest{}
	return cmd
}

func (*DeleteAppsCmd) GetActionName() string {
	return "DeleteApps"
}

func (c *DeleteAppsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
}

func (c *DeleteAppsCmd) Run(out Out) error {
	params := app_manager.NewDeleteAppsParams()
	params.WithBody(c.OpenpitrixDeleteAppsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DeleteApps(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeActiveAppVersionsCmd struct {
	*app_manager.DescribeActiveAppVersionsParams
}

func NewDescribeActiveAppVersionsCmd() Cmd {
	return &DescribeActiveAppVersionsCmd{
		app_manager.NewDescribeActiveAppVersionsParams(),
	}
}

func (*DescribeActiveAppVersionsCmd) GetActionName() string {
	return "DescribeActiveAppVersions"
}

func (c *DescribeActiveAppVersionsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.Description, "description", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.PackageName, "package_name", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.Type, "type", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
}

func (c *DescribeActiveAppVersionsCmd) Run(out Out) error {
	params := c.DescribeActiveAppVersionsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeActiveAppVersions(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeActiveAppsCmd struct {
	*app_manager.DescribeActiveAppsParams
}

func NewDescribeActiveAppsCmd() Cmd {
	return &DescribeActiveAppsCmd{
		app_manager.NewDescribeActiveAppsParams(),
	}
}

func (*DescribeActiveAppsCmd) GetActionName() string {
	return "DescribeActiveApps"
}

func (c *DescribeActiveAppsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.CategoryID, "category_id", "", []string{}, "")
	f.StringSliceVarP(&c.ChartName, "chart_name", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.RepoID, "repo_id", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeActiveAppsCmd) Run(out Out) error {
	params := c.DescribeActiveAppsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeActiveApps(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppVersionAuditsCmd struct {
	*app_manager.DescribeAppVersionAuditsParams
}

func NewDescribeAppVersionAuditsCmd() Cmd {
	return &DescribeAppVersionAuditsCmd{
		app_manager.NewDescribeAppVersionAuditsParams(),
	}
}

func (*DescribeAppVersionAuditsCmd) GetActionName() string {
	return "DescribeAppVersionAudits"
}

func (c *DescribeAppVersionAuditsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Operator, "operator", "", []string{}, "")
	f.StringSliceVarP(&c.OperatorType, "operator_type", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
}

func (c *DescribeAppVersionAuditsCmd) Run(out Out) error {
	params := c.DescribeAppVersionAuditsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeAppVersionAudits(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppVersionReviewsCmd struct {
	*app_manager.DescribeAppVersionReviewsParams
}

func NewDescribeAppVersionReviewsCmd() Cmd {
	return &DescribeAppVersionReviewsCmd{
		app_manager.NewDescribeAppVersionReviewsParams(),
	}
}

func (*DescribeAppVersionReviewsCmd) GetActionName() string {
	return "DescribeAppVersionReviews"
}

func (c *DescribeAppVersionReviewsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.ReviewID, "review_id", "", []string{}, "")
	f.StringSliceVarP(&c.Reviewer, "reviewer", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
}

func (c *DescribeAppVersionReviewsCmd) Run(out Out) error {
	params := c.DescribeAppVersionReviewsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeAppVersionReviews(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppVersionsCmd struct {
	*app_manager.DescribeAppVersionsParams
}

func NewDescribeAppVersionsCmd() Cmd {
	return &DescribeAppVersionsCmd{
		app_manager.NewDescribeAppVersionsParams(),
	}
}

func (*DescribeAppVersionsCmd) GetActionName() string {
	return "DescribeAppVersions"
}

func (c *DescribeAppVersionsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.Description, "description", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.PackageName, "package_name", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.Type, "type", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
}

func (c *DescribeAppVersionsCmd) Run(out Out) error {
	params := c.DescribeAppVersionsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeAppVersions(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppsCmd struct {
	*app_manager.DescribeAppsParams
}

func NewDescribeAppsCmd() Cmd {
	return &DescribeAppsCmd{
		app_manager.NewDescribeAppsParams(),
	}
}

func (*DescribeAppsCmd) GetActionName() string {
	return "DescribeApps"
}

func (c *DescribeAppsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.CategoryID, "category_id", "", []string{}, "")
	f.StringSliceVarP(&c.ChartName, "chart_name", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.RepoID, "repo_id", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeAppsCmd) Run(out Out) error {
	params := c.DescribeAppsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.DescribeApps(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetAppStatisticsCmd struct {
	*app_manager.GetAppStatisticsParams
}

func NewGetAppStatisticsCmd() Cmd {
	return &GetAppStatisticsCmd{
		app_manager.NewGetAppStatisticsParams(),
	}
}

func (*GetAppStatisticsCmd) GetActionName() string {
	return "GetAppStatistics"
}

func (c *GetAppStatisticsCmd) ParseFlag(f Flag) {
}

func (c *GetAppStatisticsCmd) Run(out Out) error {
	params := c.GetAppStatisticsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.GetAppStatistics(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetAppVersionPackageCmd struct {
	*app_manager.GetAppVersionPackageParams
}

func NewGetAppVersionPackageCmd() Cmd {
	return &GetAppVersionPackageCmd{
		app_manager.NewGetAppVersionPackageParams(),
	}
}

func (*GetAppVersionPackageCmd) GetActionName() string {
	return "GetAppVersionPackage"
}

func (c *GetAppVersionPackageCmd) ParseFlag(f Flag) {
	c.VersionID = new(string)
	f.StringVarP(c.VersionID, "version_id", "", "", "")
}

func (c *GetAppVersionPackageCmd) Run(out Out) error {
	params := c.GetAppVersionPackageParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.GetAppVersionPackage(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetAppVersionPackageFilesCmd struct {
	*app_manager.GetAppVersionPackageFilesParams
}

func NewGetAppVersionPackageFilesCmd() Cmd {
	return &GetAppVersionPackageFilesCmd{
		app_manager.NewGetAppVersionPackageFilesParams(),
	}
}

func (*GetAppVersionPackageFilesCmd) GetActionName() string {
	return "GetAppVersionPackageFiles"
}

func (c *GetAppVersionPackageFilesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.Files, "files", "", []string{}, "")
	c.VersionID = new(string)
	f.StringVarP(c.VersionID, "version_id", "", "", "")
}

func (c *GetAppVersionPackageFilesCmd) Run(out Out) error {
	params := c.GetAppVersionPackageFilesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.GetAppVersionPackageFiles(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type IsvPassAppVersionCmd struct {
	*models.OpenpitrixPassAppVersionRequest
}

func NewIsvPassAppVersionCmd() Cmd {
	cmd := &IsvPassAppVersionCmd{}
	cmd.OpenpitrixPassAppVersionRequest = &models.OpenpitrixPassAppVersionRequest{}
	return cmd
}

func (*IsvPassAppVersionCmd) GetActionName() string {
	return "IsvPassAppVersion"
}

func (c *IsvPassAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *IsvPassAppVersionCmd) Run(out Out) error {
	params := app_manager.NewIsvPassAppVersionParams()
	params.WithBody(c.OpenpitrixPassAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.IsvPassAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type IsvRejectAppVersionCmd struct {
	*models.OpenpitrixRejectAppVersionRequest
}

func NewIsvRejectAppVersionCmd() Cmd {
	cmd := &IsvRejectAppVersionCmd{}
	cmd.OpenpitrixRejectAppVersionRequest = &models.OpenpitrixRejectAppVersionRequest{}
	return cmd
}

func (*IsvRejectAppVersionCmd) GetActionName() string {
	return "IsvRejectAppVersion"
}

func (c *IsvRejectAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Message, "message", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *IsvRejectAppVersionCmd) Run(out Out) error {
	params := app_manager.NewIsvRejectAppVersionParams()
	params.WithBody(c.OpenpitrixRejectAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.IsvRejectAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type IsvReviewAppVersionCmd struct {
	*models.OpenpitrixReviewAppVersionRequest
}

func NewIsvReviewAppVersionCmd() Cmd {
	cmd := &IsvReviewAppVersionCmd{}
	cmd.OpenpitrixReviewAppVersionRequest = &models.OpenpitrixReviewAppVersionRequest{}
	return cmd
}

func (*IsvReviewAppVersionCmd) GetActionName() string {
	return "IsvReviewAppVersion"
}

func (c *IsvReviewAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *IsvReviewAppVersionCmd) Run(out Out) error {
	params := app_manager.NewIsvReviewAppVersionParams()
	params.WithBody(c.OpenpitrixReviewAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.IsvReviewAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyAppCmd struct {
	*models.OpenpitrixModifyAppRequest
}

func NewModifyAppCmd() Cmd {
	cmd := &ModifyAppCmd{}
	cmd.OpenpitrixModifyAppRequest = &models.OpenpitrixModifyAppRequest{}
	return cmd
}

func (*ModifyAppCmd) GetActionName() string {
	return "ModifyApp"
}

func (c *ModifyAppCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Abstraction, "abstraction", "", "", "")
	f.StringVarP(&c.AppID, "app_id", "", "", "")
	f.StringVarP(&c.CategoryID, "category_id", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Home, "home", "", "", "")
	f.StringVarP(&c.Keywords, "keywords", "", "", "")
	f.StringVarP(&c.Maintainers, "maintainers", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Readme, "readme", "", "", "")
	f.StringVarP(&c.Sources, "sources", "", "", "")
	f.StringVarP(&c.Tos, "tos", "", "", "")
}

func (c *ModifyAppCmd) Run(out Out) error {
	params := app_manager.NewModifyAppParams()
	params.WithBody(c.OpenpitrixModifyAppRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.ModifyApp(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyAppVersionCmd struct {
	*models.OpenpitrixModifyAppVersionRequest
	PackagePath string
}

func NewModifyAppVersionCmd() Cmd {
	cmd := &ModifyAppVersionCmd{}
	cmd.OpenpitrixModifyAppVersionRequest = &models.OpenpitrixModifyAppVersionRequest{}
	return cmd
}

func (*ModifyAppVersionCmd) GetActionName() string {
	return "ModifyAppVersion"
}

func (c *ModifyAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.PackagePath, "package", "", "", "filepath of package. ")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *ModifyAppVersionCmd) Run(out Out) error {
	if c.PackagePath != "" {
		content, err := ioutil.ReadFile(c.PackagePath)
		if err != nil {
			return err
		}
		c.Package = strfmt.Base64(content)
	}
	params := app_manager.NewModifyAppVersionParams()
	params.WithBody(c.OpenpitrixModifyAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.ModifyAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type RecoverAppVersionCmd struct {
	*models.OpenpitrixRecoverAppVersionRequest
}

func NewRecoverAppVersionCmd() Cmd {
	cmd := &RecoverAppVersionCmd{}
	cmd.OpenpitrixRecoverAppVersionRequest = &models.OpenpitrixRecoverAppVersionRequest{}
	return cmd
}

func (*RecoverAppVersionCmd) GetActionName() string {
	return "RecoverAppVersion"
}

func (c *RecoverAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *RecoverAppVersionCmd) Run(out Out) error {
	params := app_manager.NewRecoverAppVersionParams()
	params.WithBody(c.OpenpitrixRecoverAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.RecoverAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ReleaseAppVersionCmd struct {
	*models.OpenpitrixReleaseAppVersionRequest
}

func NewReleaseAppVersionCmd() Cmd {
	cmd := &ReleaseAppVersionCmd{}
	cmd.OpenpitrixReleaseAppVersionRequest = &models.OpenpitrixReleaseAppVersionRequest{}
	return cmd
}

func (*ReleaseAppVersionCmd) GetActionName() string {
	return "ReleaseAppVersion"
}

func (c *ReleaseAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *ReleaseAppVersionCmd) Run(out Out) error {
	params := app_manager.NewReleaseAppVersionParams()
	params.WithBody(c.OpenpitrixReleaseAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.ReleaseAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type SubmitAppVersionCmd struct {
	*models.OpenpitrixSubmitAppVersionRequest
}

func NewSubmitAppVersionCmd() Cmd {
	cmd := &SubmitAppVersionCmd{}
	cmd.OpenpitrixSubmitAppVersionRequest = &models.OpenpitrixSubmitAppVersionRequest{}
	return cmd
}

func (*SubmitAppVersionCmd) GetActionName() string {
	return "SubmitAppVersion"
}

func (c *SubmitAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *SubmitAppVersionCmd) Run(out Out) error {
	params := app_manager.NewSubmitAppVersionParams()
	params.WithBody(c.OpenpitrixSubmitAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.SubmitAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type SuspendAppVersionCmd struct {
	*models.OpenpitrixSuspendAppVersionRequest
}

func NewSuspendAppVersionCmd() Cmd {
	cmd := &SuspendAppVersionCmd{}
	cmd.OpenpitrixSuspendAppVersionRequest = &models.OpenpitrixSuspendAppVersionRequest{}
	return cmd
}

func (*SuspendAppVersionCmd) GetActionName() string {
	return "SuspendAppVersion"
}

func (c *SuspendAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *SuspendAppVersionCmd) Run(out Out) error {
	params := app_manager.NewSuspendAppVersionParams()
	params.WithBody(c.OpenpitrixSuspendAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.SuspendAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type TechnicalPassAppVersionCmd struct {
	*models.OpenpitrixPassAppVersionRequest
}

func NewTechnicalPassAppVersionCmd() Cmd {
	cmd := &TechnicalPassAppVersionCmd{}
	cmd.OpenpitrixPassAppVersionRequest = &models.OpenpitrixPassAppVersionRequest{}
	return cmd
}

func (*TechnicalPassAppVersionCmd) GetActionName() string {
	return "TechnicalPassAppVersion"
}

func (c *TechnicalPassAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *TechnicalPassAppVersionCmd) Run(out Out) error {
	params := app_manager.NewTechnicalPassAppVersionParams()
	params.WithBody(c.OpenpitrixPassAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.TechnicalPassAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type TechnicalRejectAppVersionCmd struct {
	*models.OpenpitrixRejectAppVersionRequest
}

func NewTechnicalRejectAppVersionCmd() Cmd {
	cmd := &TechnicalRejectAppVersionCmd{}
	cmd.OpenpitrixRejectAppVersionRequest = &models.OpenpitrixRejectAppVersionRequest{}
	return cmd
}

func (*TechnicalRejectAppVersionCmd) GetActionName() string {
	return "TechnicalRejectAppVersion"
}

func (c *TechnicalRejectAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Message, "message", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *TechnicalRejectAppVersionCmd) Run(out Out) error {
	params := app_manager.NewTechnicalRejectAppVersionParams()
	params.WithBody(c.OpenpitrixRejectAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.TechnicalRejectAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type TechnicalReviewAppVersionCmd struct {
	*models.OpenpitrixReviewAppVersionRequest
}

func NewTechnicalReviewAppVersionCmd() Cmd {
	cmd := &TechnicalReviewAppVersionCmd{}
	cmd.OpenpitrixReviewAppVersionRequest = &models.OpenpitrixReviewAppVersionRequest{}
	return cmd
}

func (*TechnicalReviewAppVersionCmd) GetActionName() string {
	return "TechnicalReviewAppVersion"
}

func (c *TechnicalReviewAppVersionCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *TechnicalReviewAppVersionCmd) Run(out Out) error {
	params := app_manager.NewTechnicalReviewAppVersionParams()
	params.WithBody(c.OpenpitrixReviewAppVersionRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.TechnicalReviewAppVersion(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UploadAppAttachmentCmd struct {
	*models.OpenpitrixUploadAppAttachmentRequest
	AttachmentContentPath string
}

func NewUploadAppAttachmentCmd() Cmd {
	cmd := &UploadAppAttachmentCmd{}
	cmd.OpenpitrixUploadAppAttachmentRequest = &models.OpenpitrixUploadAppAttachmentRequest{}
	return cmd
}

func (*UploadAppAttachmentCmd) GetActionName() string {
	return "UploadAppAttachment"
}

func (c *UploadAppAttachmentCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.AppID, "app_id", "", "", "")
	f.StringVarP(&c.AttachmentContentPath, "attachment_content", "", "", "filepath of attachment_content. ")
}

func (c *UploadAppAttachmentCmd) Run(out Out) error {
	if c.AttachmentContentPath != "" {
		content, err := ioutil.ReadFile(c.AttachmentContentPath)
		if err != nil {
			return err
		}
		c.AttachmentContent = strfmt.Base64(content)
	}
	params := app_manager.NewUploadAppAttachmentParams()
	params.WithBody(c.OpenpitrixUploadAppAttachmentRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.UploadAppAttachment(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ValidatePackageCmd struct {
	*models.OpenpitrixValidatePackageRequest
	VersionPackagePath string
}

func NewValidatePackageCmd() Cmd {
	cmd := &ValidatePackageCmd{}
	cmd.OpenpitrixValidatePackageRequest = &models.OpenpitrixValidatePackageRequest{}
	return cmd
}

func (*ValidatePackageCmd) GetActionName() string {
	return "ValidatePackage"
}

func (c *ValidatePackageCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.VersionPackagePath, "version_package", "", "", "filepath of version_package. ")
	f.StringVarP(&c.VersionType, "version_type", "", "", "optional: vmbased/helm")
}

func (c *ValidatePackageCmd) Run(out Out) error {
	if c.VersionPackagePath != "" {
		content, err := ioutil.ReadFile(c.VersionPackagePath)
		if err != nil {
			return err
		}
		c.VersionPackage = strfmt.Base64(content)
	}
	params := app_manager.NewValidatePackageParams()
	params.WithBody(c.OpenpitrixValidatePackageRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppManager.ValidatePackage(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppVendorStatisticsCmd struct {
	*app_vendor_manager.DescribeAppVendorStatisticsParams
}

func NewDescribeAppVendorStatisticsCmd() Cmd {
	return &DescribeAppVendorStatisticsCmd{
		app_vendor_manager.NewDescribeAppVendorStatisticsParams(),
	}
}

func (*DescribeAppVendorStatisticsCmd) GetActionName() string {
	return "DescribeAppVendorStatistics"
}

func (c *DescribeAppVendorStatisticsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *DescribeAppVendorStatisticsCmd) Run(out Out) error {
	params := c.DescribeAppVendorStatisticsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.DescribeAppVendorStatistics(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeVendorVerifyInfosCmd struct {
	*app_vendor_manager.DescribeVendorVerifyInfosParams
}

func NewDescribeVendorVerifyInfosCmd() Cmd {
	return &DescribeVendorVerifyInfosCmd{
		app_vendor_manager.NewDescribeVendorVerifyInfosParams(),
	}
}

func (*DescribeVendorVerifyInfosCmd) GetActionName() string {
	return "DescribeVendorVerifyInfos"
}

func (c *DescribeVendorVerifyInfosCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *DescribeVendorVerifyInfosCmd) Run(out Out) error {
	params := c.DescribeVendorVerifyInfosParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.DescribeVendorVerifyInfos(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetVendorVerifyInfoCmd struct {
	*app_vendor_manager.GetVendorVerifyInfoParams
}

func NewGetVendorVerifyInfoCmd() Cmd {
	return &GetVendorVerifyInfoCmd{
		app_vendor_manager.NewGetVendorVerifyInfoParams(),
	}
}

func (*GetVendorVerifyInfoCmd) GetActionName() string {
	return "GetVendorVerifyInfo"
}

func (c *GetVendorVerifyInfoCmd) ParseFlag(f Flag) {
	c.UserID = new(string)
	f.StringVarP(c.UserID, "user_id", "", "", "")
}

func (c *GetVendorVerifyInfoCmd) Run(out Out) error {
	params := c.GetVendorVerifyInfoParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.GetVendorVerifyInfo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type PassVendorVerifyInfoCmd struct {
	*models.OpenpitrixPassVendorVerifyInfoRequest
}

func NewPassVendorVerifyInfoCmd() Cmd {
	cmd := &PassVendorVerifyInfoCmd{}
	cmd.OpenpitrixPassVendorVerifyInfoRequest = &models.OpenpitrixPassVendorVerifyInfoRequest{}
	return cmd
}

func (*PassVendorVerifyInfoCmd) GetActionName() string {
	return "PassVendorVerifyInfo"
}

func (c *PassVendorVerifyInfoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *PassVendorVerifyInfoCmd) Run(out Out) error {
	params := app_vendor_manager.NewPassVendorVerifyInfoParams()
	params.WithBody(c.OpenpitrixPassVendorVerifyInfoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.PassVendorVerifyInfo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type RejectVendorVerifyInfoCmd struct {
	*models.OpenpitrixRejectVendorVerifyInfoRequest
}

func NewRejectVendorVerifyInfoCmd() Cmd {
	cmd := &RejectVendorVerifyInfoCmd{}
	cmd.OpenpitrixRejectVendorVerifyInfoRequest = &models.OpenpitrixRejectVendorVerifyInfoRequest{}
	return cmd
}

func (*RejectVendorVerifyInfoCmd) GetActionName() string {
	return "RejectVendorVerifyInfo"
}

func (c *RejectVendorVerifyInfoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.RejectMessage, "reject_message", "", "", "")
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *RejectVendorVerifyInfoCmd) Run(out Out) error {
	params := app_vendor_manager.NewRejectVendorVerifyInfoParams()
	params.WithBody(c.OpenpitrixRejectVendorVerifyInfoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.RejectVendorVerifyInfo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type SubmitVendorVerifyInfoCmd struct {
	*models.OpenpitrixSubmitVendorVerifyInfoRequest
}

func NewSubmitVendorVerifyInfoCmd() Cmd {
	cmd := &SubmitVendorVerifyInfoCmd{}
	cmd.OpenpitrixSubmitVendorVerifyInfoRequest = &models.OpenpitrixSubmitVendorVerifyInfoRequest{}
	return cmd
}

func (*SubmitVendorVerifyInfoCmd) GetActionName() string {
	return "SubmitVendorVerifyInfo"
}

func (c *SubmitVendorVerifyInfoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.AuthorizerEmail, "authorizer_email", "", "", "")
	f.StringVarP(&c.AuthorizerName, "authorizer_name", "", "", "")
	f.StringVarP(&c.AuthorizerPhone, "authorizer_phone", "", "", "")
	f.StringVarP(&c.BankAccountName, "bank_account_name", "", "", "")
	f.StringVarP(&c.BankAccountNumber, "bank_account_number", "", "", "")
	f.StringVarP(&c.BankName, "bank_name", "", "", "")
	f.StringVarP(&c.CompanyName, "company_name", "", "", "")
	f.StringVarP(&c.CompanyProfile, "company_profile", "", "", "")
	f.StringVarP(&c.CompanyWebsite, "company_website", "", "", "")
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *SubmitVendorVerifyInfoCmd) Run(out Out) error {
	params := app_vendor_manager.NewSubmitVendorVerifyInfoParams()
	params.WithBody(c.OpenpitrixSubmitVendorVerifyInfoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AppVendorManager.SubmitVendorVerifyInfo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetAttachmentCmd struct {
	*attachment_service.GetAttachmentParams
}

func NewGetAttachmentCmd() Cmd {
	return &GetAttachmentCmd{
		attachment_service.NewGetAttachmentParams(),
	}
}

func (*GetAttachmentCmd) GetActionName() string {
	return "GetAttachment"
}

func (c *GetAttachmentCmd) ParseFlag(f Flag) {
	c.AttachmentID = new(string)
	f.StringVarP(c.AttachmentID, "attachment_id", "", "", "")
	c.Filename = new(string)
	f.StringVarP(c.Filename, "filename", "", "", "")
}

func (c *GetAttachmentCmd) Run(out Out) error {
	params := c.GetAttachmentParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.AttachmentService.GetAttachment(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateCategoryCmd struct {
	*models.OpenpitrixCreateCategoryRequest
	IconPath string
}

func NewCreateCategoryCmd() Cmd {
	cmd := &CreateCategoryCmd{}
	cmd.OpenpitrixCreateCategoryRequest = &models.OpenpitrixCreateCategoryRequest{}
	return cmd
}

func (*CreateCategoryCmd) GetActionName() string {
	return "CreateCategory"
}

func (c *CreateCategoryCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.IconPath, "icon", "", "", "filepath of icon. ")
	f.StringVarP(&c.Locale, "locale", "", "", "the i18n of this category, json format, sample: {&#34;zh_cn&#34;: &#34;数据库&#34;, &#34;en&#34;: &#34;database&#34;}")
	f.StringVarP(&c.Name, "name", "", "", "")
}

func (c *CreateCategoryCmd) Run(out Out) error {
	if c.IconPath != "" {
		content, err := ioutil.ReadFile(c.IconPath)
		if err != nil {
			return err
		}
		c.Icon = strfmt.Base64(content)
	}
	params := category_manager.NewCreateCategoryParams()
	params.WithBody(c.OpenpitrixCreateCategoryRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.CategoryManager.CreateCategory(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteCategoriesCmd struct {
	*models.OpenpitrixDeleteCategoriesRequest
}

func NewDeleteCategoriesCmd() Cmd {
	cmd := &DeleteCategoriesCmd{}
	cmd.OpenpitrixDeleteCategoriesRequest = &models.OpenpitrixDeleteCategoriesRequest{}
	return cmd
}

func (*DeleteCategoriesCmd) GetActionName() string {
	return "DeleteCategories"
}

func (c *DeleteCategoriesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.CategoryID, "category_id", "", []string{}, "")
}

func (c *DeleteCategoriesCmd) Run(out Out) error {
	params := category_manager.NewDeleteCategoriesParams()
	params.WithBody(c.OpenpitrixDeleteCategoriesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.CategoryManager.DeleteCategories(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeCategoriesCmd struct {
	*category_manager.DescribeCategoriesParams
}

func NewDescribeCategoriesCmd() Cmd {
	return &DescribeCategoriesCmd{
		category_manager.NewDescribeCategoriesParams(),
	}
}

func (*DescribeCategoriesCmd) GetActionName() string {
	return "DescribeCategories"
}

func (c *DescribeCategoriesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.CategoryID, "category_id", "", []string{}, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
}

func (c *DescribeCategoriesCmd) Run(out Out) error {
	params := c.DescribeCategoriesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.CategoryManager.DescribeCategories(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyCategoryCmd struct {
	*models.OpenpitrixModifyCategoryRequest
	IconPath string
}

func NewModifyCategoryCmd() Cmd {
	cmd := &ModifyCategoryCmd{}
	cmd.OpenpitrixModifyCategoryRequest = &models.OpenpitrixModifyCategoryRequest{}
	return cmd
}

func (*ModifyCategoryCmd) GetActionName() string {
	return "ModifyCategory"
}

func (c *ModifyCategoryCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.CategoryID, "category_id", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.IconPath, "icon", "", "", "filepath of icon. ")
	f.StringVarP(&c.Locale, "locale", "", "", "the i18n of this category, json format, sample: {&#34;zh_cn&#34;: &#34;数据库&#34;, &#34;en&#34;: &#34;database&#34;}")
	f.StringVarP(&c.Name, "name", "", "", "")
}

func (c *ModifyCategoryCmd) Run(out Out) error {
	if c.IconPath != "" {
		content, err := ioutil.ReadFile(c.IconPath)
		if err != nil {
			return err
		}
		c.Icon = strfmt.Base64(content)
	}
	params := category_manager.NewModifyCategoryParams()
	params.WithBody(c.OpenpitrixModifyCategoryRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.CategoryManager.ModifyCategory(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type AddClusterNodesCmd struct {
	*models.OpenpitrixAddClusterNodesRequest
}

func NewAddClusterNodesCmd() Cmd {
	cmd := &AddClusterNodesCmd{}
	cmd.OpenpitrixAddClusterNodesRequest = &models.OpenpitrixAddClusterNodesRequest{}
	return cmd
}

func (*AddClusterNodesCmd) GetActionName() string {
	return "AddClusterNodes"
}

func (c *AddClusterNodesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
	f.StringVarP(&c.Role, "role", "", "", "")
}

func (c *AddClusterNodesCmd) Run(out Out) error {
	params := cluster_manager.NewAddClusterNodesParams()
	params.WithBody(c.OpenpitrixAddClusterNodesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.AddClusterNodes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type AttachKeyPairsCmd struct {
	*models.OpenpitrixAttachKeyPairsRequest
}

func NewAttachKeyPairsCmd() Cmd {
	cmd := &AttachKeyPairsCmd{}
	cmd.OpenpitrixAttachKeyPairsRequest = &models.OpenpitrixAttachKeyPairsRequest{}
	return cmd
}

func (*AttachKeyPairsCmd) GetActionName() string {
	return "AttachKeyPairs"
}

func (c *AttachKeyPairsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.KeyPairID, "key_pair_id", "", []string{}, "")
	f.StringSliceVarP(&c.NodeID, "node_id", "", []string{}, "")
}

func (c *AttachKeyPairsCmd) Run(out Out) error {
	params := cluster_manager.NewAttachKeyPairsParams()
	params.WithBody(c.OpenpitrixAttachKeyPairsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.AttachKeyPairs(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CeaseClustersCmd struct {
	*models.OpenpitrixCeaseClustersRequest
}

func NewCeaseClustersCmd() Cmd {
	cmd := &CeaseClustersCmd{}
	cmd.OpenpitrixCeaseClustersRequest = &models.OpenpitrixCeaseClustersRequest{}
	return cmd
}

func (*CeaseClustersCmd) GetActionName() string {
	return "CeaseClusters"
}

func (c *CeaseClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
}

func (c *CeaseClustersCmd) Run(out Out) error {
	params := cluster_manager.NewCeaseClustersParams()
	params.WithBody(c.OpenpitrixCeaseClustersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.CeaseClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateClusterCmd struct {
	*models.OpenpitrixCreateClusterRequest
}

func NewCreateClusterCmd() Cmd {
	cmd := &CreateClusterCmd{}
	cmd.OpenpitrixCreateClusterRequest = &models.OpenpitrixCreateClusterRequest{}
	return cmd
}

func (*CreateClusterCmd) GetActionName() string {
	return "CreateCluster"
}

func (c *CreateClusterCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.AppID, "app_id", "", "", "")
	f.StringVarP(&c.Conf, "conf", "", "", "")
	f.StringVarP(&c.RuntimeID, "runtime_id", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *CreateClusterCmd) Run(out Out) error {
	params := cluster_manager.NewCreateClusterParams()
	params.WithBody(c.OpenpitrixCreateClusterRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.CreateCluster(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateDebugClusterCmd struct {
	*models.OpenpitrixCreateClusterRequest
}

func NewCreateDebugClusterCmd() Cmd {
	cmd := &CreateDebugClusterCmd{}
	cmd.OpenpitrixCreateClusterRequest = &models.OpenpitrixCreateClusterRequest{}
	return cmd
}

func (*CreateDebugClusterCmd) GetActionName() string {
	return "CreateDebugCluster"
}

func (c *CreateDebugClusterCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.AppID, "app_id", "", "", "")
	f.StringVarP(&c.Conf, "conf", "", "", "")
	f.StringVarP(&c.RuntimeID, "runtime_id", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *CreateDebugClusterCmd) Run(out Out) error {
	params := cluster_manager.NewCreateDebugClusterParams()
	params.WithBody(c.OpenpitrixCreateClusterRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.CreateDebugCluster(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateKeyPairCmd struct {
	*models.OpenpitrixCreateKeyPairRequest
}

func NewCreateKeyPairCmd() Cmd {
	cmd := &CreateKeyPairCmd{}
	cmd.OpenpitrixCreateKeyPairRequest = &models.OpenpitrixCreateKeyPairRequest{}
	return cmd
}

func (*CreateKeyPairCmd) GetActionName() string {
	return "CreateKeyPair"
}

func (c *CreateKeyPairCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.PubKey, "pub_key", "", "", "")
}

func (c *CreateKeyPairCmd) Run(out Out) error {
	params := cluster_manager.NewCreateKeyPairParams()
	params.WithBody(c.OpenpitrixCreateKeyPairRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.CreateKeyPair(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteClusterNodesCmd struct {
	*models.OpenpitrixDeleteClusterNodesRequest
}

func NewDeleteClusterNodesCmd() Cmd {
	cmd := &DeleteClusterNodesCmd{}
	cmd.OpenpitrixDeleteClusterNodesRequest = &models.OpenpitrixDeleteClusterNodesRequest{}
	return cmd
}

func (*DeleteClusterNodesCmd) GetActionName() string {
	return "DeleteClusterNodes"
}

func (c *DeleteClusterNodesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
	f.StringSliceVarP(&c.NodeID, "node_id", "", []string{}, "")
}

func (c *DeleteClusterNodesCmd) Run(out Out) error {
	params := cluster_manager.NewDeleteClusterNodesParams()
	params.WithBody(c.OpenpitrixDeleteClusterNodesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DeleteClusterNodes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteClustersCmd struct {
	*models.OpenpitrixDeleteClustersRequest
}

func NewDeleteClustersCmd() Cmd {
	cmd := &DeleteClustersCmd{}
	cmd.OpenpitrixDeleteClustersRequest = &models.OpenpitrixDeleteClustersRequest{}
	return cmd
}

func (*DeleteClustersCmd) GetActionName() string {
	return "DeleteClusters"
}

func (c *DeleteClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
}

func (c *DeleteClustersCmd) Run(out Out) error {
	params := cluster_manager.NewDeleteClustersParams()
	params.WithBody(c.OpenpitrixDeleteClustersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DeleteClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteKeyPairsCmd struct {
	*models.OpenpitrixDeleteKeyPairsRequest
}

func NewDeleteKeyPairsCmd() Cmd {
	cmd := &DeleteKeyPairsCmd{}
	cmd.OpenpitrixDeleteKeyPairsRequest = &models.OpenpitrixDeleteKeyPairsRequest{}
	return cmd
}

func (*DeleteKeyPairsCmd) GetActionName() string {
	return "DeleteKeyPairs"
}

func (c *DeleteKeyPairsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.KeyPairID, "key_pair_id", "", []string{}, "")
}

func (c *DeleteKeyPairsCmd) Run(out Out) error {
	params := cluster_manager.NewDeleteKeyPairsParams()
	params.WithBody(c.OpenpitrixDeleteKeyPairsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DeleteKeyPairs(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeAppClustersCmd struct {
	*cluster_manager.DescribeAppClustersParams
}

func NewDescribeAppClustersCmd() Cmd {
	return &DescribeAppClustersCmd{
		cluster_manager.NewDescribeAppClustersParams(),
	}
}

func (*DescribeAppClustersCmd) GetActionName() string {
	return "DescribeAppClusters"
}

func (c *DescribeAppClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	c.CreatedDate = new(int64)
	f.Int64VarP(c.CreatedDate, "created_date", "", 0, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	c.WithDetail = new(bool)
	f.BoolVarP(c.WithDetail, "with_detail", "", false, "")
}

func (c *DescribeAppClustersCmd) Run(out Out) error {
	params := c.DescribeAppClustersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeAppClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeClusterNodesCmd struct {
	*cluster_manager.DescribeClusterNodesParams
}

func NewDescribeClusterNodesCmd() Cmd {
	return &DescribeClusterNodesCmd{
		cluster_manager.NewDescribeClusterNodesParams(),
	}
}

func (*DescribeClusterNodesCmd) GetActionName() string {
	return "DescribeClusterNodes"
}

func (c *DescribeClusterNodesCmd) ParseFlag(f Flag) {
	c.ClusterID = new(string)
	f.StringVarP(c.ClusterID, "cluster_id", "", "", "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.NodeID, "node_id", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeClusterNodesCmd) Run(out Out) error {
	params := c.DescribeClusterNodesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeClusterNodes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeClustersCmd struct {
	*cluster_manager.DescribeClustersParams
}

func NewDescribeClustersCmd() Cmd {
	return &DescribeClustersCmd{
		cluster_manager.NewDescribeClustersParams(),
	}
}

func (*DescribeClustersCmd) GetActionName() string {
	return "DescribeClusters"
}

func (c *DescribeClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
	c.ClusterType = new(string)
	f.StringVarP(c.ClusterType, "cluster_type", "", "", "")
	c.CreatedDate = new(int64)
	f.Int64VarP(c.CreatedDate, "created_date", "", 0, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.ExternalClusterID = new(string)
	f.StringVarP(c.ExternalClusterID, "external_cluster_id", "", "", "")
	f.StringSliceVarP(&c.FrontgateID, "frontgate_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeID, "runtime_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
	c.WithDetail = new(bool)
	f.BoolVarP(c.WithDetail, "with_detail", "", false, "")
}

func (c *DescribeClustersCmd) Run(out Out) error {
	params := c.DescribeClustersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeDebugAppClustersCmd struct {
	*cluster_manager.DescribeDebugAppClustersParams
}

func NewDescribeDebugAppClustersCmd() Cmd {
	return &DescribeDebugAppClustersCmd{
		cluster_manager.NewDescribeDebugAppClustersParams(),
	}
}

func (*DescribeDebugAppClustersCmd) GetActionName() string {
	return "DescribeDebugAppClusters"
}

func (c *DescribeDebugAppClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	c.CreatedDate = new(int64)
	f.Int64VarP(c.CreatedDate, "created_date", "", 0, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	c.WithDetail = new(bool)
	f.BoolVarP(c.WithDetail, "with_detail", "", false, "")
}

func (c *DescribeDebugAppClustersCmd) Run(out Out) error {
	params := c.DescribeDebugAppClustersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeDebugAppClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeDebugClustersCmd struct {
	*cluster_manager.DescribeDebugClustersParams
}

func NewDescribeDebugClustersCmd() Cmd {
	return &DescribeDebugClustersCmd{
		cluster_manager.NewDescribeDebugClustersParams(),
	}
}

func (*DescribeDebugClustersCmd) GetActionName() string {
	return "DescribeDebugClusters"
}

func (c *DescribeDebugClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppID, "app_id", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
	c.ClusterType = new(string)
	f.StringVarP(c.ClusterType, "cluster_type", "", "", "")
	c.CreatedDate = new(int64)
	f.Int64VarP(c.CreatedDate, "created_date", "", 0, "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.ExternalClusterID = new(string)
	f.StringVarP(c.ExternalClusterID, "external_cluster_id", "", "", "")
	f.StringSliceVarP(&c.FrontgateID, "frontgate_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeID, "runtime_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.VersionID, "version_id", "", []string{}, "")
	c.WithDetail = new(bool)
	f.BoolVarP(c.WithDetail, "with_detail", "", false, "")
}

func (c *DescribeDebugClustersCmd) Run(out Out) error {
	params := c.DescribeDebugClustersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeDebugClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeKeyPairsCmd struct {
	*cluster_manager.DescribeKeyPairsParams
}

func NewDescribeKeyPairsCmd() Cmd {
	return &DescribeKeyPairsCmd{
		cluster_manager.NewDescribeKeyPairsParams(),
	}
}

func (*DescribeKeyPairsCmd) GetActionName() string {
	return "DescribeKeyPairs"
}

func (c *DescribeKeyPairsCmd) ParseFlag(f Flag) {
	c.Description = new(string)
	f.StringVarP(c.Description, "description", "", "", "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.KeyPairID = new(string)
	f.StringVarP(c.KeyPairID, "key_pair_id", "", "", "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Name = new(string)
	f.StringVarP(c.Name, "name", "", "", "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.PubKey = new(string)
	f.StringVarP(c.PubKey, "pub_key", "", "", "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
}

func (c *DescribeKeyPairsCmd) Run(out Out) error {
	params := c.DescribeKeyPairsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeKeyPairs(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeSubnetsCmd struct {
	*cluster_manager.DescribeSubnetsParams
}

func NewDescribeSubnetsCmd() Cmd {
	return &DescribeSubnetsCmd{
		cluster_manager.NewDescribeSubnetsParams(),
	}
}

func (*DescribeSubnetsCmd) GetActionName() string {
	return "DescribeSubnets"
}

func (c *DescribeSubnetsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "")
	c.RuntimeID = new(string)
	f.StringVarP(c.RuntimeID, "runtime_id", "", "", "")
	f.StringSliceVarP(&c.SubnetID, "subnet_id", "", []string{}, "")
	c.SubnetType = new(int64)
	f.Int64VarP(c.SubnetType, "subnet_type", "", 0, "")
	f.StringSliceVarP(&c.Zone, "zone", "", []string{}, "")
}

func (c *DescribeSubnetsCmd) Run(out Out) error {
	params := c.DescribeSubnetsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DescribeSubnets(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DetachKeyPairsCmd struct {
	*models.OpenpitrixDetachKeyPairsRequest
}

func NewDetachKeyPairsCmd() Cmd {
	cmd := &DetachKeyPairsCmd{}
	cmd.OpenpitrixDetachKeyPairsRequest = &models.OpenpitrixDetachKeyPairsRequest{}
	return cmd
}

func (*DetachKeyPairsCmd) GetActionName() string {
	return "DetachKeyPairs"
}

func (c *DetachKeyPairsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.KeyPairID, "key_pair_id", "", []string{}, "")
	f.StringSliceVarP(&c.NodeID, "node_id", "", []string{}, "")
}

func (c *DetachKeyPairsCmd) Run(out Out) error {
	params := cluster_manager.NewDetachKeyPairsParams()
	params.WithBody(c.OpenpitrixDetachKeyPairsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.DetachKeyPairs(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetClusterStatisticsCmd struct {
	*cluster_manager.GetClusterStatisticsParams
}

func NewGetClusterStatisticsCmd() Cmd {
	return &GetClusterStatisticsCmd{
		cluster_manager.NewGetClusterStatisticsParams(),
	}
}

func (*GetClusterStatisticsCmd) GetActionName() string {
	return "GetClusterStatistics"
}

func (c *GetClusterStatisticsCmd) ParseFlag(f Flag) {
}

func (c *GetClusterStatisticsCmd) Run(out Out) error {
	params := c.GetClusterStatisticsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.GetClusterStatistics(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyClusterAttributesCmd struct {
	*models.OpenpitrixModifyClusterAttributesRequest
}

func NewModifyClusterAttributesCmd() Cmd {
	cmd := &ModifyClusterAttributesCmd{}
	cmd.OpenpitrixModifyClusterAttributesRequest = &models.OpenpitrixModifyClusterAttributesRequest{}
	return cmd
}

func (*ModifyClusterAttributesCmd) GetActionName() string {
	return "ModifyClusterAttributes"
}

func (c *ModifyClusterAttributesCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
}

func (c *ModifyClusterAttributesCmd) Run(out Out) error {
	params := cluster_manager.NewModifyClusterAttributesParams()
	params.WithBody(c.OpenpitrixModifyClusterAttributesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.ModifyClusterAttributes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyClusterNodeAttributesCmd struct {
	*models.OpenpitrixModifyClusterNodeAttributesRequest
}

func NewModifyClusterNodeAttributesCmd() Cmd {
	cmd := &ModifyClusterNodeAttributesCmd{}
	cmd.OpenpitrixModifyClusterNodeAttributesRequest = &models.OpenpitrixModifyClusterNodeAttributesRequest{}
	return cmd
}

func (*ModifyClusterNodeAttributesCmd) GetActionName() string {
	return "ModifyClusterNodeAttributes"
}

func (c *ModifyClusterNodeAttributesCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.NodeID, "node_id", "", "", "")
}

func (c *ModifyClusterNodeAttributesCmd) Run(out Out) error {
	params := cluster_manager.NewModifyClusterNodeAttributesParams()
	params.WithBody(c.OpenpitrixModifyClusterNodeAttributesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.ModifyClusterNodeAttributes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type RecoverClustersCmd struct {
	*models.OpenpitrixRecoverClustersRequest
}

func NewRecoverClustersCmd() Cmd {
	cmd := &RecoverClustersCmd{}
	cmd.OpenpitrixRecoverClustersRequest = &models.OpenpitrixRecoverClustersRequest{}
	return cmd
}

func (*RecoverClustersCmd) GetActionName() string {
	return "RecoverClusters"
}

func (c *RecoverClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
}

func (c *RecoverClustersCmd) Run(out Out) error {
	params := cluster_manager.NewRecoverClustersParams()
	params.WithBody(c.OpenpitrixRecoverClustersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.RecoverClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ResizeClusterCmd struct {
	*models.OpenpitrixResizeClusterRequest
}

func NewResizeClusterCmd() Cmd {
	cmd := &ResizeClusterCmd{}
	cmd.OpenpitrixResizeClusterRequest = &models.OpenpitrixResizeClusterRequest{}
	return cmd
}

func (*ResizeClusterCmd) GetActionName() string {
	return "ResizeCluster"
}

func (c *ResizeClusterCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
}

func (c *ResizeClusterCmd) Run(out Out) error {
	params := cluster_manager.NewResizeClusterParams()
	params.WithBody(c.OpenpitrixResizeClusterRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.ResizeCluster(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type RollbackClusterCmd struct {
	*models.OpenpitrixRollbackClusterRequest
}

func NewRollbackClusterCmd() Cmd {
	cmd := &RollbackClusterCmd{}
	cmd.OpenpitrixRollbackClusterRequest = &models.OpenpitrixRollbackClusterRequest{}
	return cmd
}

func (*RollbackClusterCmd) GetActionName() string {
	return "RollbackCluster"
}

func (c *RollbackClusterCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
}

func (c *RollbackClusterCmd) Run(out Out) error {
	params := cluster_manager.NewRollbackClusterParams()
	params.WithBody(c.OpenpitrixRollbackClusterRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.RollbackCluster(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type StartClustersCmd struct {
	*models.OpenpitrixStartClustersRequest
}

func NewStartClustersCmd() Cmd {
	cmd := &StartClustersCmd{}
	cmd.OpenpitrixStartClustersRequest = &models.OpenpitrixStartClustersRequest{}
	return cmd
}

func (*StartClustersCmd) GetActionName() string {
	return "StartClusters"
}

func (c *StartClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
}

func (c *StartClustersCmd) Run(out Out) error {
	params := cluster_manager.NewStartClustersParams()
	params.WithBody(c.OpenpitrixStartClustersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.StartClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type StopClustersCmd struct {
	*models.OpenpitrixStopClustersRequest
}

func NewStopClustersCmd() Cmd {
	cmd := &StopClustersCmd{}
	cmd.OpenpitrixStopClustersRequest = &models.OpenpitrixStopClustersRequest{}
	return cmd
}

func (*StopClustersCmd) GetActionName() string {
	return "StopClusters"
}

func (c *StopClustersCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringSliceVarP(&c.ClusterID, "cluster_id", "", []string{}, "")
}

func (c *StopClustersCmd) Run(out Out) error {
	params := cluster_manager.NewStopClustersParams()
	params.WithBody(c.OpenpitrixStopClustersRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.StopClusters(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UpdateClusterEnvCmd struct {
	*models.OpenpitrixUpdateClusterEnvRequest
}

func NewUpdateClusterEnvCmd() Cmd {
	cmd := &UpdateClusterEnvCmd{}
	cmd.OpenpitrixUpdateClusterEnvRequest = &models.OpenpitrixUpdateClusterEnvRequest{}
	return cmd
}

func (*UpdateClusterEnvCmd) GetActionName() string {
	return "UpdateClusterEnv"
}

func (c *UpdateClusterEnvCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
	f.StringVarP(&c.Env, "env", "", "", "")
}

func (c *UpdateClusterEnvCmd) Run(out Out) error {
	params := cluster_manager.NewUpdateClusterEnvParams()
	params.WithBody(c.OpenpitrixUpdateClusterEnvRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.UpdateClusterEnv(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UpgradeClusterCmd struct {
	*models.OpenpitrixUpgradeClusterRequest
}

func NewUpgradeClusterCmd() Cmd {
	cmd := &UpgradeClusterCmd{}
	cmd.OpenpitrixUpgradeClusterRequest = &models.OpenpitrixUpgradeClusterRequest{}
	return cmd
}

func (*UpgradeClusterCmd) GetActionName() string {
	return "UpgradeCluster"
}

func (c *UpgradeClusterCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AdvancedParam, "advanced_param", "", []string{}, "")
	f.StringVarP(&c.ClusterID, "cluster_id", "", "", "")
	f.StringVarP(&c.VersionID, "version_id", "", "", "")
}

func (c *UpgradeClusterCmd) Run(out Out) error {
	params := cluster_manager.NewUpgradeClusterParams()
	params.WithBody(c.OpenpitrixUpgradeClusterRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ClusterManager.UpgradeCluster(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeJobsCmd struct {
	*job_manager.DescribeJobsParams
}

func NewDescribeJobsCmd() Cmd {
	return &DescribeJobsCmd{
		job_manager.NewDescribeJobsParams(),
	}
}

func (*DescribeJobsCmd) GetActionName() string {
	return "DescribeJobs"
}

func (c *DescribeJobsCmd) ParseFlag(f Flag) {
	c.AppID = new(string)
	f.StringVarP(c.AppID, "app_id", "", "", "")
	c.ClusterID = new(string)
	f.StringVarP(c.ClusterID, "cluster_id", "", "", "")
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Executor = new(string)
	f.StringVarP(c.Executor, "executor", "", "", "")
	f.StringSliceVarP(&c.JobID, "job_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Provider = new(string)
	f.StringVarP(c.Provider, "provider", "", "", "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.RuntimeID = new(string)
	f.StringVarP(c.RuntimeID, "runtime_id", "", "", "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	c.VersionID = new(string)
	f.StringVarP(c.VersionID, "version_id", "", "", "")
}

func (c *DescribeJobsCmd) Run(out Out) error {
	params := c.DescribeJobsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.JobManager.DescribeJobs(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateMarketCmd struct {
	*models.OpenpitrixCreateMarketRequest
}

func NewCreateMarketCmd() Cmd {
	cmd := &CreateMarketCmd{}
	cmd.OpenpitrixCreateMarketRequest = &models.OpenpitrixCreateMarketRequest{}
	return cmd
}

func (*CreateMarketCmd) GetActionName() string {
	return "CreateMarket"
}

func (c *CreateMarketCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Visibility, "visibility", "", "", "")
}

func (c *CreateMarketCmd) Run(out Out) error {
	params := market_manager.NewCreateMarketParams()
	params.WithBody(c.OpenpitrixCreateMarketRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.CreateMarket(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteMarketsCmd struct {
	*models.OpenpitrixDeleteMarketsRequest
}

func NewDeleteMarketsCmd() Cmd {
	cmd := &DeleteMarketsCmd{}
	cmd.OpenpitrixDeleteMarketsRequest = &models.OpenpitrixDeleteMarketsRequest{}
	return cmd
}

func (*DeleteMarketsCmd) GetActionName() string {
	return "DeleteMarkets"
}

func (c *DeleteMarketsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.MarketID, "market_id", "", []string{}, "")
}

func (c *DeleteMarketsCmd) Run(out Out) error {
	params := market_manager.NewDeleteMarketsParams()
	params.WithBody(c.OpenpitrixDeleteMarketsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.DeleteMarkets(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeMarketUsersCmd struct {
	*market_manager.DescribeMarketUsersParams
}

func NewDescribeMarketUsersCmd() Cmd {
	return &DescribeMarketUsersCmd{
		market_manager.NewDescribeMarketUsersParams(),
	}
}

func (*DescribeMarketUsersCmd) GetActionName() string {
	return "DescribeMarketUsers"
}

func (c *DescribeMarketUsersCmd) ParseFlag(f Flag) {
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.MarketID, "market_id", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *DescribeMarketUsersCmd) Run(out Out) error {
	params := c.DescribeMarketUsersParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.DescribeMarketUsers(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeMarketsCmd struct {
	*market_manager.DescribeMarketsParams
}

func NewDescribeMarketsCmd() Cmd {
	return &DescribeMarketsCmd{
		market_manager.NewDescribeMarketsParams(),
	}
}

func (*DescribeMarketsCmd) GetActionName() string {
	return "DescribeMarkets"
}

func (c *DescribeMarketsCmd) ParseFlag(f Flag) {
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.MarketID, "market_id", "", []string{}, "")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
	f.StringSliceVarP(&c.Visibility, "visibility", "", []string{}, "")
}

func (c *DescribeMarketsCmd) Run(out Out) error {
	params := c.DescribeMarketsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.DescribeMarkets(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyMarketCmd struct {
	*models.OpenpitrixModifyMarketRequest
}

func NewModifyMarketCmd() Cmd {
	cmd := &ModifyMarketCmd{}
	cmd.OpenpitrixModifyMarketRequest = &models.OpenpitrixModifyMarketRequest{}
	return cmd
}

func (*ModifyMarketCmd) GetActionName() string {
	return "ModifyMarket"
}

func (c *ModifyMarketCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.MarketID, "market_id", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Status, "status", "", "", "")
	f.StringVarP(&c.Visibility, "visibility", "", "", "")
}

func (c *ModifyMarketCmd) Run(out Out) error {
	params := market_manager.NewModifyMarketParams()
	params.WithBody(c.OpenpitrixModifyMarketRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.ModifyMarket(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UserJoinMarketCmd struct {
	*models.OpenpitrixUserJoinMarketRequest
}

func NewUserJoinMarketCmd() Cmd {
	cmd := &UserJoinMarketCmd{}
	cmd.OpenpitrixUserJoinMarketRequest = &models.OpenpitrixUserJoinMarketRequest{}
	return cmd
}

func (*UserJoinMarketCmd) GetActionName() string {
	return "UserJoinMarket"
}

func (c *UserJoinMarketCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.MarketID, "market_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *UserJoinMarketCmd) Run(out Out) error {
	params := market_manager.NewUserJoinMarketParams()
	params.WithBody(c.OpenpitrixUserJoinMarketRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.UserJoinMarket(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type UserLeaveMarketCmd struct {
	*models.OpenpitrixUserLeaveMarketRequest
}

func NewUserLeaveMarketCmd() Cmd {
	cmd := &UserLeaveMarketCmd{}
	cmd.OpenpitrixUserLeaveMarketRequest = &models.OpenpitrixUserLeaveMarketRequest{}
	return cmd
}

func (*UserLeaveMarketCmd) GetActionName() string {
	return "UserLeaveMarket"
}

func (c *UserLeaveMarketCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.MarketID, "market_id", "", []string{}, "")
	f.StringSliceVarP(&c.UserID, "user_id", "", []string{}, "")
}

func (c *UserLeaveMarketCmd) Run(out Out) error {
	params := market_manager.NewUserLeaveMarketParams()
	params.WithBody(c.OpenpitrixUserLeaveMarketRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.MarketManager.UserLeaveMarket(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeRepoEventsCmd struct {
	*repo_indexer.DescribeRepoEventsParams
}

func NewDescribeRepoEventsCmd() Cmd {
	return &DescribeRepoEventsCmd{
		repo_indexer.NewDescribeRepoEventsParams(),
	}
}

func (*DescribeRepoEventsCmd) GetActionName() string {
	return "DescribeRepoEvents"
}

func (c *DescribeRepoEventsCmd) ParseFlag(f Flag) {
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.RepoEventID, "repo_event_id", "", []string{}, "")
	f.StringSliceVarP(&c.RepoID, "repo_id", "", []string{}, "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeRepoEventsCmd) Run(out Out) error {
	params := c.DescribeRepoEventsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoIndexer.DescribeRepoEvents(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type IndexRepoCmd struct {
	*models.OpenpitrixIndexRepoRequest
}

func NewIndexRepoCmd() Cmd {
	cmd := &IndexRepoCmd{}
	cmd.OpenpitrixIndexRepoRequest = &models.OpenpitrixIndexRepoRequest{}
	return cmd
}

func (*IndexRepoCmd) GetActionName() string {
	return "IndexRepo"
}

func (c *IndexRepoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.RepoID, "repo_id", "", "", "")
}

func (c *IndexRepoCmd) Run(out Out) error {
	params := repo_indexer.NewIndexRepoParams()
	params.WithBody(c.OpenpitrixIndexRepoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoIndexer.IndexRepo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateRepoCmd struct {
	*models.OpenpitrixCreateRepoRequest
}

func NewCreateRepoCmd() Cmd {
	cmd := &CreateRepoCmd{}
	cmd.OpenpitrixCreateRepoRequest = &models.OpenpitrixCreateRepoRequest{}
	return cmd
}

func (*CreateRepoCmd) GetActionName() string {
	return "CreateRepo"
}

func (c *CreateRepoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.AppDefaultStatus, "app_default_status", "", "", "")
	f.StringVarP(&c.CategoryID, "category_id", "", "", "")
	f.StringVarP(&c.Credential, "credential", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Labels, "labels", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringSliceVarP(&c.Providers, "providers", "", []string{}, "")
	f.StringVarP(&c.Selectors, "selectors", "", "", "")
	f.StringVarP(&c.Type, "type", "", "", "")
	f.StringVarP(&c.URL, "url", "", "", "")
	f.StringVarP(&c.Visibility, "visibility", "", "", "")
}

func (c *CreateRepoCmd) Run(out Out) error {
	params := repo_manager.NewCreateRepoParams()
	params.WithBody(c.OpenpitrixCreateRepoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoManager.CreateRepo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteReposCmd struct {
	*models.OpenpitrixDeleteReposRequest
}

func NewDeleteReposCmd() Cmd {
	cmd := &DeleteReposCmd{}
	cmd.OpenpitrixDeleteReposRequest = &models.OpenpitrixDeleteReposRequest{}
	return cmd
}

func (*DeleteReposCmd) GetActionName() string {
	return "DeleteRepos"
}

func (c *DeleteReposCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RepoID, "repo_id", "", []string{}, "")
}

func (c *DeleteReposCmd) Run(out Out) error {
	params := repo_manager.NewDeleteReposParams()
	params.WithBody(c.OpenpitrixDeleteReposRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoManager.DeleteRepos(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeReposCmd struct {
	*repo_manager.DescribeReposParams
}

func NewDescribeReposCmd() Cmd {
	return &DescribeReposCmd{
		repo_manager.NewDescribeReposParams(),
	}
}

func (*DescribeReposCmd) GetActionName() string {
	return "DescribeRepos"
}

func (c *DescribeReposCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.AppDefaultStatus, "app_default_status", "", []string{}, "")
	f.StringSliceVarP(&c.CategoryID, "category_id", "", []string{}, "")
	c.Controller = new(int32)
	f.Int32VarP(c.Controller, "controller", "", 0, "0 for self resource; 1 for openpitrix resource.")
	c.Label = new(string)
	f.StringVarP(c.Label, "label", "", "", "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	f.StringSliceVarP(&c.Name, "name", "", []string{}, "")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.Provider, "provider", "", []string{}, "")
	f.StringSliceVarP(&c.RepoID, "repo_id", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.Selector = new(string)
	f.StringVarP(c.Selector, "selector", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	f.StringSliceVarP(&c.Type, "type", "", []string{}, "")
	c.UserID = new(string)
	f.StringVarP(c.UserID, "user_id", "", "", "")
	f.StringSliceVarP(&c.Visibility, "visibility", "", []string{}, "")
}

func (c *DescribeReposCmd) Run(out Out) error {
	params := c.DescribeReposParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoManager.DescribeRepos(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyRepoCmd struct {
	*models.OpenpitrixModifyRepoRequest
}

func NewModifyRepoCmd() Cmd {
	cmd := &ModifyRepoCmd{}
	cmd.OpenpitrixModifyRepoRequest = &models.OpenpitrixModifyRepoRequest{}
	return cmd
}

func (*ModifyRepoCmd) GetActionName() string {
	return "ModifyRepo"
}

func (c *ModifyRepoCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.AppDefaultStatus, "app_default_status", "", "", "")
	f.StringVarP(&c.CategoryID, "category_id", "", "", "")
	f.StringVarP(&c.Credential, "credential", "", "", "")
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Labels, "labels", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringSliceVarP(&c.Providers, "providers", "", []string{}, "")
	f.StringVarP(&c.RepoID, "repo_id", "", "", "")
	f.StringVarP(&c.Selectors, "selectors", "", "", "")
	f.StringVarP(&c.Type, "type", "", "", "")
	f.StringVarP(&c.URL, "url", "", "", "")
	f.StringVarP(&c.Visibility, "visibility", "", "", "")
}

func (c *ModifyRepoCmd) Run(out Out) error {
	params := repo_manager.NewModifyRepoParams()
	params.WithBody(c.OpenpitrixModifyRepoRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoManager.ModifyRepo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ValidateRepoCmd struct {
	*repo_manager.ValidateRepoParams
}

func NewValidateRepoCmd() Cmd {
	return &ValidateRepoCmd{
		repo_manager.NewValidateRepoParams(),
	}
}

func (*ValidateRepoCmd) GetActionName() string {
	return "ValidateRepo"
}

func (c *ValidateRepoCmd) ParseFlag(f Flag) {
	c.Credential = new(string)
	f.StringVarP(c.Credential, "credential", "", "", "")
	c.Type = new(string)
	f.StringVarP(c.Type, "type", "", "", "")
	c.URL = new(string)
	f.StringVarP(c.URL, "url", "", "", "")
}

func (c *ValidateRepoCmd) Run(out Out) error {
	params := c.ValidateRepoParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RepoManager.ValidateRepo(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateDebugRuntimeCmd struct {
	*models.OpenpitrixCreateRuntimeRequest
}

func NewCreateDebugRuntimeCmd() Cmd {
	cmd := &CreateDebugRuntimeCmd{}
	cmd.OpenpitrixCreateRuntimeRequest = &models.OpenpitrixCreateRuntimeRequest{}
	return cmd
}

func (*CreateDebugRuntimeCmd) GetActionName() string {
	return "CreateDebugRuntime"
}

func (c *CreateDebugRuntimeCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Provider, "provider", "", "", "")
	f.StringVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", "", "")
	f.StringVarP(&c.Zone, "zone", "", "", "")
}

func (c *CreateDebugRuntimeCmd) Run(out Out) error {
	params := runtime_manager.NewCreateDebugRuntimeParams()
	params.WithBody(c.OpenpitrixCreateRuntimeRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.CreateDebugRuntime(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateDebugRuntimeCredentialCmd struct {
	*models.OpenpitrixCreateRuntimeCredentialRequest
}

func NewCreateDebugRuntimeCredentialCmd() Cmd {
	cmd := &CreateDebugRuntimeCredentialCmd{}
	cmd.OpenpitrixCreateRuntimeCredentialRequest = &models.OpenpitrixCreateRuntimeCredentialRequest{}
	return cmd
}

func (*CreateDebugRuntimeCredentialCmd) GetActionName() string {
	return "CreateDebugRuntimeCredential"
}

func (c *CreateDebugRuntimeCredentialCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Provider, "provider", "", "", "")
	f.StringVarP(&c.RuntimeCredentialContent, "runtime_credential_content", "", "", "")
	f.StringVarP(&c.RuntimeURL, "runtime_url", "", "", "")
}

func (c *CreateDebugRuntimeCredentialCmd) Run(out Out) error {
	params := runtime_manager.NewCreateDebugRuntimeCredentialParams()
	params.WithBody(c.OpenpitrixCreateRuntimeCredentialRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.CreateDebugRuntimeCredential(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateRuntimeCmd struct {
	*models.OpenpitrixCreateRuntimeRequest
}

func NewCreateRuntimeCmd() Cmd {
	cmd := &CreateRuntimeCmd{}
	cmd.OpenpitrixCreateRuntimeRequest = &models.OpenpitrixCreateRuntimeRequest{}
	return cmd
}

func (*CreateRuntimeCmd) GetActionName() string {
	return "CreateRuntime"
}

func (c *CreateRuntimeCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Provider, "provider", "", "", "")
	f.StringVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", "", "")
	f.StringVarP(&c.Zone, "zone", "", "", "")
}

func (c *CreateRuntimeCmd) Run(out Out) error {
	params := runtime_manager.NewCreateRuntimeParams()
	params.WithBody(c.OpenpitrixCreateRuntimeRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.CreateRuntime(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateRuntimeCredentialCmd struct {
	*models.OpenpitrixCreateRuntimeCredentialRequest
}

func NewCreateRuntimeCredentialCmd() Cmd {
	cmd := &CreateRuntimeCredentialCmd{}
	cmd.OpenpitrixCreateRuntimeCredentialRequest = &models.OpenpitrixCreateRuntimeCredentialRequest{}
	return cmd
}

func (*CreateRuntimeCredentialCmd) GetActionName() string {
	return "CreateRuntimeCredential"
}

func (c *CreateRuntimeCredentialCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.Provider, "provider", "", "", "")
	f.StringVarP(&c.RuntimeCredentialContent, "runtime_credential_content", "", "", "")
	f.StringVarP(&c.RuntimeURL, "runtime_url", "", "", "")
}

func (c *CreateRuntimeCredentialCmd) Run(out Out) error {
	params := runtime_manager.NewCreateRuntimeCredentialParams()
	params.WithBody(c.OpenpitrixCreateRuntimeCredentialRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.CreateRuntimeCredential(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteRuntimeCredentialsCmd struct {
	*models.OpenpitrixDeleteRuntimeCredentialsRequest
}

func NewDeleteRuntimeCredentialsCmd() Cmd {
	cmd := &DeleteRuntimeCredentialsCmd{}
	cmd.OpenpitrixDeleteRuntimeCredentialsRequest = &models.OpenpitrixDeleteRuntimeCredentialsRequest{}
	return cmd
}

func (*DeleteRuntimeCredentialsCmd) GetActionName() string {
	return "DeleteRuntimeCredentials"
}

func (c *DeleteRuntimeCredentialsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", []string{}, "")
}

func (c *DeleteRuntimeCredentialsCmd) Run(out Out) error {
	params := runtime_manager.NewDeleteRuntimeCredentialsParams()
	params.WithBody(c.OpenpitrixDeleteRuntimeCredentialsRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DeleteRuntimeCredentials(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DeleteRuntimesCmd struct {
	*models.OpenpitrixDeleteRuntimesRequest
}

func NewDeleteRuntimesCmd() Cmd {
	cmd := &DeleteRuntimesCmd{}
	cmd.OpenpitrixDeleteRuntimesRequest = &models.OpenpitrixDeleteRuntimesRequest{}
	return cmd
}

func (*DeleteRuntimesCmd) GetActionName() string {
	return "DeleteRuntimes"
}

func (c *DeleteRuntimesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.RuntimeID, "runtime_id", "", []string{}, "")
}

func (c *DeleteRuntimesCmd) Run(out Out) error {
	params := runtime_manager.NewDeleteRuntimesParams()
	params.WithBody(c.OpenpitrixDeleteRuntimesRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DeleteRuntimes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeDebugRuntimeCredentialsCmd struct {
	*runtime_manager.DescribeDebugRuntimeCredentialsParams
}

func NewDescribeDebugRuntimeCredentialsCmd() Cmd {
	return &DescribeDebugRuntimeCredentialsCmd{
		runtime_manager.NewDescribeDebugRuntimeCredentialsParams(),
	}
}

func (*DescribeDebugRuntimeCredentialsCmd) GetActionName() string {
	return "DescribeDebugRuntimeCredentials"
}

func (c *DescribeDebugRuntimeCredentialsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.Provider, "provider", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeDebugRuntimeCredentialsCmd) Run(out Out) error {
	params := c.DescribeDebugRuntimeCredentialsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DescribeDebugRuntimeCredentials(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeDebugRuntimesCmd struct {
	*runtime_manager.DescribeDebugRuntimesParams
}

func NewDescribeDebugRuntimesCmd() Cmd {
	return &DescribeDebugRuntimesCmd{
		runtime_manager.NewDescribeDebugRuntimesParams(),
	}
}

func (*DescribeDebugRuntimesCmd) GetActionName() string {
	return "DescribeDebugRuntimes"
}

func (c *DescribeDebugRuntimesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.Provider, "provider", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeID, "runtime_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeDebugRuntimesCmd) Run(out Out) error {
	params := c.DescribeDebugRuntimesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DescribeDebugRuntimes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeRuntimeCredentialsCmd struct {
	*runtime_manager.DescribeRuntimeCredentialsParams
}

func NewDescribeRuntimeCredentialsCmd() Cmd {
	return &DescribeRuntimeCredentialsCmd{
		runtime_manager.NewDescribeRuntimeCredentialsParams(),
	}
}

func (*DescribeRuntimeCredentialsCmd) GetActionName() string {
	return "DescribeRuntimeCredentials"
}

func (c *DescribeRuntimeCredentialsCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.Provider, "provider", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeRuntimeCredentialsCmd) Run(out Out) error {
	params := c.DescribeRuntimeCredentialsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DescribeRuntimeCredentials(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeRuntimeProviderZonesCmd struct {
	*runtime_manager.DescribeRuntimeProviderZonesParams
}

func NewDescribeRuntimeProviderZonesCmd() Cmd {
	return &DescribeRuntimeProviderZonesCmd{
		runtime_manager.NewDescribeRuntimeProviderZonesParams(),
	}
}

func (*DescribeRuntimeProviderZonesCmd) GetActionName() string {
	return "DescribeRuntimeProviderZones"
}

func (c *DescribeRuntimeProviderZonesCmd) ParseFlag(f Flag) {
	c.RuntimeCredentialID = new(string)
	f.StringVarP(c.RuntimeCredentialID, "runtime_credential_id", "", "", "")
}

func (c *DescribeRuntimeProviderZonesCmd) Run(out Out) error {
	params := c.DescribeRuntimeProviderZonesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DescribeRuntimeProviderZones(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeRuntimesCmd struct {
	*runtime_manager.DescribeRuntimesParams
}

func NewDescribeRuntimesCmd() Cmd {
	return &DescribeRuntimesCmd{
		runtime_manager.NewDescribeRuntimesParams(),
	}
}

func (*DescribeRuntimesCmd) GetActionName() string {
	return "DescribeRuntimes"
}

func (c *DescribeRuntimesCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	f.StringSliceVarP(&c.Provider, "provider", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	f.StringSliceVarP(&c.RuntimeID, "runtime_id", "", []string{}, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
}

func (c *DescribeRuntimesCmd) Run(out Out) error {
	params := c.DescribeRuntimesParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.DescribeRuntimes(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetRuntimeStatisticsCmd struct {
	*runtime_manager.GetRuntimeStatisticsParams
}

func NewGetRuntimeStatisticsCmd() Cmd {
	return &GetRuntimeStatisticsCmd{
		runtime_manager.NewGetRuntimeStatisticsParams(),
	}
}

func (*GetRuntimeStatisticsCmd) GetActionName() string {
	return "GetRuntimeStatistics"
}

func (c *GetRuntimeStatisticsCmd) ParseFlag(f Flag) {
}

func (c *GetRuntimeStatisticsCmd) Run(out Out) error {
	params := c.GetRuntimeStatisticsParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.GetRuntimeStatistics(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyRuntimeCmd struct {
	*models.OpenpitrixModifyRuntimeRequest
}

func NewModifyRuntimeCmd() Cmd {
	cmd := &ModifyRuntimeCmd{}
	cmd.OpenpitrixModifyRuntimeRequest = &models.OpenpitrixModifyRuntimeRequest{}
	return cmd
}

func (*ModifyRuntimeCmd) GetActionName() string {
	return "ModifyRuntime"
}

func (c *ModifyRuntimeCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", "", "")
	f.StringVarP(&c.RuntimeID, "runtime_id", "", "", "")
}

func (c *ModifyRuntimeCmd) Run(out Out) error {
	params := runtime_manager.NewModifyRuntimeParams()
	params.WithBody(c.OpenpitrixModifyRuntimeRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.ModifyRuntime(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ModifyRuntimeCredentialCmd struct {
	*models.OpenpitrixModifyRuntimeCredentialRequest
}

func NewModifyRuntimeCredentialCmd() Cmd {
	cmd := &ModifyRuntimeCredentialCmd{}
	cmd.OpenpitrixModifyRuntimeCredentialRequest = &models.OpenpitrixModifyRuntimeCredentialRequest{}
	return cmd
}

func (*ModifyRuntimeCredentialCmd) GetActionName() string {
	return "ModifyRuntimeCredential"
}

func (c *ModifyRuntimeCredentialCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Description, "description", "", "", "")
	f.StringVarP(&c.Name, "name", "", "", "")
	f.StringVarP(&c.RuntimeCredentialContent, "runtime_credential_content", "", "", "")
	f.StringVarP(&c.RuntimeCredentialID, "runtime_credential_id", "", "", "")
}

func (c *ModifyRuntimeCredentialCmd) Run(out Out) error {
	params := runtime_manager.NewModifyRuntimeCredentialParams()
	params.WithBody(c.OpenpitrixModifyRuntimeCredentialRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.ModifyRuntimeCredential(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ValidateRuntimeCredentialCmd struct {
	*models.OpenpitrixValidateRuntimeCredentialRequest
}

func NewValidateRuntimeCredentialCmd() Cmd {
	cmd := &ValidateRuntimeCredentialCmd{}
	cmd.OpenpitrixValidateRuntimeCredentialRequest = &models.OpenpitrixValidateRuntimeCredentialRequest{}
	return cmd
}

func (*ValidateRuntimeCredentialCmd) GetActionName() string {
	return "ValidateRuntimeCredential"
}

func (c *ValidateRuntimeCredentialCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.Provider, "provider", "", "", "")
	f.StringVarP(&c.RuntimeCredentialContent, "runtime_credential_content", "", "", "")
	f.StringVarP(&c.RuntimeURL, "runtime_url", "", "", "")
}

func (c *ValidateRuntimeCredentialCmd) Run(out Out) error {
	params := runtime_manager.NewValidateRuntimeCredentialParams()
	params.WithBody(c.OpenpitrixValidateRuntimeCredentialRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.RuntimeManager.ValidateRuntimeCredential(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type GetServiceConfigCmd struct {
	*models.OpenpitrixGetServiceConfigRequest
}

func NewGetServiceConfigCmd() Cmd {
	cmd := &GetServiceConfigCmd{}
	cmd.OpenpitrixGetServiceConfigRequest = &models.OpenpitrixGetServiceConfigRequest{}
	return cmd
}

func (*GetServiceConfigCmd) GetActionName() string {
	return "GetServiceConfig"
}

func (c *GetServiceConfigCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.ServiceType, "service_type", "", []string{}, "")
}

func (c *GetServiceConfigCmd) Run(out Out) error {
	params := service_config.NewGetServiceConfigParams()
	params.WithBody(c.OpenpitrixGetServiceConfigRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ServiceConfig.GetServiceConfig(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type SetServiceConfigCmd struct {
	*models.OpenpitrixSetServiceConfigRequest
}

func NewSetServiceConfigCmd() Cmd {
	cmd := &SetServiceConfigCmd{}
	cmd.OpenpitrixSetServiceConfigRequest = &models.OpenpitrixSetServiceConfigRequest{}
	return cmd
}

func (*SetServiceConfigCmd) GetActionName() string {
	return "SetServiceConfig"
}

func (c *SetServiceConfigCmd) ParseFlag(f Flag) {
}

func (c *SetServiceConfigCmd) Run(out Out) error {
	params := service_config.NewSetServiceConfigParams()
	params.WithBody(c.OpenpitrixSetServiceConfigRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ServiceConfig.SetServiceConfig(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type ValidateEmailServiceCmd struct {
	*models.OpenpitrixValidateEmailServiceRequest
}

func NewValidateEmailServiceCmd() Cmd {
	cmd := &ValidateEmailServiceCmd{}
	cmd.OpenpitrixValidateEmailServiceRequest = &models.OpenpitrixValidateEmailServiceRequest{}
	return cmd
}

func (*ValidateEmailServiceCmd) GetActionName() string {
	return "ValidateEmailService"
}

func (c *ValidateEmailServiceCmd) ParseFlag(f Flag) {
}

func (c *ValidateEmailServiceCmd) Run(out Out) error {
	params := service_config.NewValidateEmailServiceParams()
	params.WithBody(c.OpenpitrixValidateEmailServiceRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.ServiceConfig.ValidateEmailService(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type DescribeTasksCmd struct {
	*task_manager.DescribeTasksParams
}

func NewDescribeTasksCmd() Cmd {
	return &DescribeTasksCmd{
		task_manager.NewDescribeTasksParams(),
	}
}

func (*DescribeTasksCmd) GetActionName() string {
	return "DescribeTasks"
}

func (c *DescribeTasksCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.DisplayColumns, "display_columns", "", []string{}, "")
	c.Executor = new(string)
	f.StringVarP(c.Executor, "executor", "", "", "")
	f.StringSliceVarP(&c.JobID, "job_id", "", []string{}, "")
	c.Limit = new(int64)
	f.Int64VarP(c.Limit, "limit", "", 20, "default is 20, max value is 200.")
	c.Offset = new(int64)
	f.Int64VarP(c.Offset, "offset", "", 0, "default is 0.")
	f.StringSliceVarP(&c.Owner, "owner", "", []string{}, "")
	c.Reverse = new(bool)
	f.BoolVarP(c.Reverse, "reverse", "", false, "")
	c.SearchWord = new(string)
	f.StringVarP(c.SearchWord, "search_word", "", "", "")
	c.SortKey = new(string)
	f.StringVarP(c.SortKey, "sort_key", "", "", "")
	f.StringSliceVarP(&c.Status, "status", "", []string{}, "")
	c.Target = new(string)
	f.StringVarP(c.Target, "target", "", "", "")
	f.StringSliceVarP(&c.TaskID, "task_id", "", []string{}, "")
}

func (c *DescribeTasksCmd) Run(out Out) error {
	params := c.DescribeTasksParams

	out.WriteRequest(params)

	client := getClient()
	res, err := client.TaskManager.DescribeTasks(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type RetryTasksCmd struct {
	*models.OpenpitrixRetryTasksRequest
}

func NewRetryTasksCmd() Cmd {
	cmd := &RetryTasksCmd{}
	cmd.OpenpitrixRetryTasksRequest = &models.OpenpitrixRetryTasksRequest{}
	return cmd
}

func (*RetryTasksCmd) GetActionName() string {
	return "RetryTasks"
}

func (c *RetryTasksCmd) ParseFlag(f Flag) {
	f.StringSliceVarP(&c.TaskID, "task_id", "", []string{}, "")
}

func (c *RetryTasksCmd) Run(out Out) error {
	params := task_manager.NewRetryTasksParams()
	params.WithBody(c.OpenpitrixRetryTasksRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.TaskManager.RetryTasks(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type CreateClientCmd struct {
	*models.OpenpitrixCreateClientRequest
}

func NewCreateClientCmd() Cmd {
	cmd := &CreateClientCmd{}
	cmd.OpenpitrixCreateClientRequest = &models.OpenpitrixCreateClientRequest{}
	return cmd
}

func (*CreateClientCmd) GetActionName() string {
	return "CreateClient"
}

func (c *CreateClientCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.UserID, "user_id", "", "", "")
}

func (c *CreateClientCmd) Run(out Out) error {
	params := token_manager.NewCreateClientParams()
	params.WithBody(c.OpenpitrixCreateClientRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.TokenManager.CreateClient(params, nil)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}

type TokenCmd struct {
	*models.OpenpitrixTokenRequest
}

func NewTokenCmd() Cmd {
	cmd := &TokenCmd{}
	cmd.OpenpitrixTokenRequest = &models.OpenpitrixTokenRequest{}
	return cmd
}

func (*TokenCmd) GetActionName() string {
	return "Token"
}

func (c *TokenCmd) ParseFlag(f Flag) {
	f.StringVarP(&c.ClientID, "client_id", "", "", "")
	f.StringVarP(&c.ClientSecret, "client_secret", "", "", "")
	f.StringVarP(&c.GrantType, "grant_type", "", "", "")
	f.StringVarP(&c.Password, "password", "", "", "")
	f.StringVarP(&c.RefreshToken, "refresh_token", "", "", "")
	f.StringVarP(&c.Scope, "scope", "", "", "")
	f.StringVarP(&c.Username, "username", "", "", "")
}

func (c *TokenCmd) Run(out Out) error {
	params := token_manager.NewTokenParams()
	params.WithBody(c.OpenpitrixTokenRequest)

	out.WriteRequest(params)

	client := getClient()
	res, err := client.TokenManager.Token(params)
	if err != nil {
		return err
	}

	out.WriteResponse(res.Payload)

	return nil
}
