// Code generated by go-swagger; DO NOT EDIT.

package account_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPasswordResetParams creates a new GetPasswordResetParams object
// with the default values initialized.
func NewGetPasswordResetParams() *GetPasswordResetParams {
	var ()
	return &GetPasswordResetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPasswordResetParamsWithTimeout creates a new GetPasswordResetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPasswordResetParamsWithTimeout(timeout time.Duration) *GetPasswordResetParams {
	var ()
	return &GetPasswordResetParams{

		timeout: timeout,
	}
}

// NewGetPasswordResetParamsWithContext creates a new GetPasswordResetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPasswordResetParamsWithContext(ctx context.Context) *GetPasswordResetParams {
	var ()
	return &GetPasswordResetParams{

		Context: ctx,
	}
}

// NewGetPasswordResetParamsWithHTTPClient creates a new GetPasswordResetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPasswordResetParamsWithHTTPClient(client *http.Client) *GetPasswordResetParams {
	var ()
	return &GetPasswordResetParams{
		HTTPClient: client,
	}
}

/*GetPasswordResetParams contains all the parameters to send to the API endpoint
for the get password reset operation typically these are written to a http.Request
*/
type GetPasswordResetParams struct {

	/*ResetID
	  required, reset id.

	*/
	ResetID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get password reset params
func (o *GetPasswordResetParams) WithTimeout(timeout time.Duration) *GetPasswordResetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get password reset params
func (o *GetPasswordResetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get password reset params
func (o *GetPasswordResetParams) WithContext(ctx context.Context) *GetPasswordResetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get password reset params
func (o *GetPasswordResetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get password reset params
func (o *GetPasswordResetParams) WithHTTPClient(client *http.Client) *GetPasswordResetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get password reset params
func (o *GetPasswordResetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResetID adds the resetID to the get password reset params
func (o *GetPasswordResetParams) WithResetID(resetID *string) *GetPasswordResetParams {
	o.SetResetID(resetID)
	return o
}

// SetResetID adds the resetId to the get password reset params
func (o *GetPasswordResetParams) SetResetID(resetID *string) {
	o.ResetID = resetID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPasswordResetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ResetID != nil {

		// query param reset_id
		var qrResetID string
		if o.ResetID != nil {
			qrResetID = *o.ResetID
		}
		qResetID := qrResetID
		if qResetID != "" {
			if err := r.SetQueryParam("reset_id", qResetID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
