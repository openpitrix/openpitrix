// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attachment.proto

package pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AttachmentType int32

const (
	// directory
	AttachmentType_archive AttachmentType = 0
	// raw
	AttachmentType_raw AttachmentType = 1
	// image type
	AttachmentType_jpg AttachmentType = 10
	AttachmentType_png AttachmentType = 11
)

var AttachmentType_name = map[int32]string{
	0:  "archive",
	1:  "raw",
	10: "jpg",
	11: "png",
}

var AttachmentType_value = map[string]int32{
	"archive": 0,
	"raw":     1,
	"jpg":     10,
	"png":     11,
}

func (x AttachmentType) String() string {
	return proto.EnumName(AttachmentType_name, int32(x))
}

func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{0}
}

type GetAttachmentsRequest struct {
	AttachmentId         []string `protobuf:"bytes,1,rep,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Filename             []string `protobuf:"bytes,2,rep,name=filename,proto3" json:"filename,omitempty"`
	IgnoreContent        bool     `protobuf:"varint,3,opt,name=ignore_content,json=ignoreContent,proto3" json:"ignore_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttachmentsRequest) Reset()         { *m = GetAttachmentsRequest{} }
func (m *GetAttachmentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAttachmentsRequest) ProtoMessage()    {}
func (*GetAttachmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{0}
}

func (m *GetAttachmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAttachmentsRequest.Unmarshal(m, b)
}
func (m *GetAttachmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAttachmentsRequest.Marshal(b, m, deterministic)
}
func (m *GetAttachmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttachmentsRequest.Merge(m, src)
}
func (m *GetAttachmentsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAttachmentsRequest.Size(m)
}
func (m *GetAttachmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttachmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttachmentsRequest proto.InternalMessageInfo

func (m *GetAttachmentsRequest) GetAttachmentId() []string {
	if m != nil {
		return m.AttachmentId
	}
	return nil
}

func (m *GetAttachmentsRequest) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *GetAttachmentsRequest) GetIgnoreContent() bool {
	if m != nil {
		return m.IgnoreContent
	}
	return false
}

type GetAttachmentsResponse struct {
	Attachments          map[string]*Attachment `protobuf:"bytes,1,rep,name=attachments,proto3" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetAttachmentsResponse) Reset()         { *m = GetAttachmentsResponse{} }
func (m *GetAttachmentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAttachmentsResponse) ProtoMessage()    {}
func (*GetAttachmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{1}
}

func (m *GetAttachmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAttachmentsResponse.Unmarshal(m, b)
}
func (m *GetAttachmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAttachmentsResponse.Marshal(b, m, deterministic)
}
func (m *GetAttachmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttachmentsResponse.Merge(m, src)
}
func (m *GetAttachmentsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAttachmentsResponse.Size(m)
}
func (m *GetAttachmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttachmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttachmentsResponse proto.InternalMessageInfo

func (m *GetAttachmentsResponse) GetAttachments() map[string]*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type Attachment struct {
	AttachmentId         string               `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentType       AttachmentType       `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	AttachmentContent    map[string][]byte    `protobuf:"bytes,3,rep,name=attachment_content,json=attachmentContent,proto3" json:"attachment_content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Attachment) Reset()         { *m = Attachment{} }
func (m *Attachment) String() string { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()    {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{2}
}

func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attachment.Unmarshal(m, b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return xxx_messageInfo_Attachment.Size(m)
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *Attachment) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *Attachment) GetAttachmentContent() map[string][]byte {
	if m != nil {
		return m.AttachmentContent
	}
	return nil
}

func (m *Attachment) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type CreateAttachmentRequest struct {
	// 	string attachment_id = 1;
	AttachmentType       AttachmentType    `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	AttachmentContent    map[string][]byte `protobuf:"bytes,3,rep,name=attachment_content,json=attachmentContent,proto3" json:"attachment_content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateAttachmentRequest) Reset()         { *m = CreateAttachmentRequest{} }
func (m *CreateAttachmentRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAttachmentRequest) ProtoMessage()    {}
func (*CreateAttachmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{3}
}

func (m *CreateAttachmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAttachmentRequest.Unmarshal(m, b)
}
func (m *CreateAttachmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAttachmentRequest.Marshal(b, m, deterministic)
}
func (m *CreateAttachmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAttachmentRequest.Merge(m, src)
}
func (m *CreateAttachmentRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAttachmentRequest.Size(m)
}
func (m *CreateAttachmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAttachmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAttachmentRequest proto.InternalMessageInfo

func (m *CreateAttachmentRequest) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *CreateAttachmentRequest) GetAttachmentContent() map[string][]byte {
	if m != nil {
		return m.AttachmentContent
	}
	return nil
}

type CreateAttachmentResponse struct {
	AttachmentId         string         `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentType       AttachmentType `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	Filename             []string       `protobuf:"bytes,3,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateAttachmentResponse) Reset()         { *m = CreateAttachmentResponse{} }
func (m *CreateAttachmentResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAttachmentResponse) ProtoMessage()    {}
func (*CreateAttachmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{4}
}

func (m *CreateAttachmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAttachmentResponse.Unmarshal(m, b)
}
func (m *CreateAttachmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAttachmentResponse.Marshal(b, m, deterministic)
}
func (m *CreateAttachmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAttachmentResponse.Merge(m, src)
}
func (m *CreateAttachmentResponse) XXX_Size() int {
	return xxx_messageInfo_CreateAttachmentResponse.Size(m)
}
func (m *CreateAttachmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAttachmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAttachmentResponse proto.InternalMessageInfo

func (m *CreateAttachmentResponse) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *CreateAttachmentResponse) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *CreateAttachmentResponse) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

type AppendAttachmentRequest struct {
	AttachmentId string `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	// 	AttachmentType attachment_type = 2;
	AttachmentContent    map[string][]byte `protobuf:"bytes,3,rep,name=attachment_content,json=attachmentContent,proto3" json:"attachment_content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AppendAttachmentRequest) Reset()         { *m = AppendAttachmentRequest{} }
func (m *AppendAttachmentRequest) String() string { return proto.CompactTextString(m) }
func (*AppendAttachmentRequest) ProtoMessage()    {}
func (*AppendAttachmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{5}
}

func (m *AppendAttachmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendAttachmentRequest.Unmarshal(m, b)
}
func (m *AppendAttachmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendAttachmentRequest.Marshal(b, m, deterministic)
}
func (m *AppendAttachmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendAttachmentRequest.Merge(m, src)
}
func (m *AppendAttachmentRequest) XXX_Size() int {
	return xxx_messageInfo_AppendAttachmentRequest.Size(m)
}
func (m *AppendAttachmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendAttachmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendAttachmentRequest proto.InternalMessageInfo

func (m *AppendAttachmentRequest) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *AppendAttachmentRequest) GetAttachmentContent() map[string][]byte {
	if m != nil {
		return m.AttachmentContent
	}
	return nil
}

type AppendAttachmentResponse struct {
	AttachmentId         string         `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentType       AttachmentType `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	Filename             []string       `protobuf:"bytes,3,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AppendAttachmentResponse) Reset()         { *m = AppendAttachmentResponse{} }
func (m *AppendAttachmentResponse) String() string { return proto.CompactTextString(m) }
func (*AppendAttachmentResponse) ProtoMessage()    {}
func (*AppendAttachmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{6}
}

func (m *AppendAttachmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendAttachmentResponse.Unmarshal(m, b)
}
func (m *AppendAttachmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendAttachmentResponse.Marshal(b, m, deterministic)
}
func (m *AppendAttachmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendAttachmentResponse.Merge(m, src)
}
func (m *AppendAttachmentResponse) XXX_Size() int {
	return xxx_messageInfo_AppendAttachmentResponse.Size(m)
}
func (m *AppendAttachmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendAttachmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendAttachmentResponse proto.InternalMessageInfo

func (m *AppendAttachmentResponse) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *AppendAttachmentResponse) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *AppendAttachmentResponse) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

type ReplaceAttachmentRequest struct {
	AttachmentId         string            `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentType       AttachmentType    `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	AttachmentContent    map[string][]byte `protobuf:"bytes,3,rep,name=attachment_content,json=attachmentContent,proto3" json:"attachment_content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReplaceAttachmentRequest) Reset()         { *m = ReplaceAttachmentRequest{} }
func (m *ReplaceAttachmentRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceAttachmentRequest) ProtoMessage()    {}
func (*ReplaceAttachmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{7}
}

func (m *ReplaceAttachmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceAttachmentRequest.Unmarshal(m, b)
}
func (m *ReplaceAttachmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceAttachmentRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceAttachmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceAttachmentRequest.Merge(m, src)
}
func (m *ReplaceAttachmentRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceAttachmentRequest.Size(m)
}
func (m *ReplaceAttachmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceAttachmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceAttachmentRequest proto.InternalMessageInfo

func (m *ReplaceAttachmentRequest) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *ReplaceAttachmentRequest) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *ReplaceAttachmentRequest) GetAttachmentContent() map[string][]byte {
	if m != nil {
		return m.AttachmentContent
	}
	return nil
}

type ReplaceAttachmentResponse struct {
	AttachmentId         string         `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentType       AttachmentType `protobuf:"varint,2,opt,name=attachment_type,json=attachmentType,proto3,enum=openpitrix.AttachmentType" json:"attachment_type,omitempty"`
	Filename             []string       `protobuf:"bytes,3,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReplaceAttachmentResponse) Reset()         { *m = ReplaceAttachmentResponse{} }
func (m *ReplaceAttachmentResponse) String() string { return proto.CompactTextString(m) }
func (*ReplaceAttachmentResponse) ProtoMessage()    {}
func (*ReplaceAttachmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{8}
}

func (m *ReplaceAttachmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceAttachmentResponse.Unmarshal(m, b)
}
func (m *ReplaceAttachmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceAttachmentResponse.Marshal(b, m, deterministic)
}
func (m *ReplaceAttachmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceAttachmentResponse.Merge(m, src)
}
func (m *ReplaceAttachmentResponse) XXX_Size() int {
	return xxx_messageInfo_ReplaceAttachmentResponse.Size(m)
}
func (m *ReplaceAttachmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceAttachmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceAttachmentResponse proto.InternalMessageInfo

func (m *ReplaceAttachmentResponse) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *ReplaceAttachmentResponse) GetAttachmentType() AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return AttachmentType_archive
}

func (m *ReplaceAttachmentResponse) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

type DeleteAttachmentsRequest struct {
	AttachmentId         []string `protobuf:"bytes,1,rep,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Filename             []string `protobuf:"bytes,2,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAttachmentsRequest) Reset()         { *m = DeleteAttachmentsRequest{} }
func (m *DeleteAttachmentsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAttachmentsRequest) ProtoMessage()    {}
func (*DeleteAttachmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{9}
}

func (m *DeleteAttachmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAttachmentsRequest.Unmarshal(m, b)
}
func (m *DeleteAttachmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAttachmentsRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAttachmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttachmentsRequest.Merge(m, src)
}
func (m *DeleteAttachmentsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAttachmentsRequest.Size(m)
}
func (m *DeleteAttachmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttachmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttachmentsRequest proto.InternalMessageInfo

func (m *DeleteAttachmentsRequest) GetAttachmentId() []string {
	if m != nil {
		return m.AttachmentId
	}
	return nil
}

func (m *DeleteAttachmentsRequest) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

type DeleteAttachmentsResponse struct {
	AttachmentId         []string `protobuf:"bytes,1,rep,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Filename             []string `protobuf:"bytes,2,rep,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAttachmentsResponse) Reset()         { *m = DeleteAttachmentsResponse{} }
func (m *DeleteAttachmentsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAttachmentsResponse) ProtoMessage()    {}
func (*DeleteAttachmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{10}
}

func (m *DeleteAttachmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAttachmentsResponse.Unmarshal(m, b)
}
func (m *DeleteAttachmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAttachmentsResponse.Marshal(b, m, deterministic)
}
func (m *DeleteAttachmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttachmentsResponse.Merge(m, src)
}
func (m *DeleteAttachmentsResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteAttachmentsResponse.Size(m)
}
func (m *DeleteAttachmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttachmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttachmentsResponse proto.InternalMessageInfo

func (m *DeleteAttachmentsResponse) GetAttachmentId() []string {
	if m != nil {
		return m.AttachmentId
	}
	return nil
}

func (m *DeleteAttachmentsResponse) GetFilename() []string {
	if m != nil {
		return m.Filename
	}
	return nil
}

func init() {
	proto.RegisterEnum("openpitrix.AttachmentType", AttachmentType_name, AttachmentType_value)
	proto.RegisterType((*GetAttachmentsRequest)(nil), "openpitrix.GetAttachmentsRequest")
	proto.RegisterType((*GetAttachmentsResponse)(nil), "openpitrix.GetAttachmentsResponse")
	proto.RegisterMapType((map[string]*Attachment)(nil), "openpitrix.GetAttachmentsResponse.AttachmentsEntry")
	proto.RegisterType((*Attachment)(nil), "openpitrix.Attachment")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.Attachment.AttachmentContentEntry")
	proto.RegisterType((*CreateAttachmentRequest)(nil), "openpitrix.CreateAttachmentRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.CreateAttachmentRequest.AttachmentContentEntry")
	proto.RegisterType((*CreateAttachmentResponse)(nil), "openpitrix.CreateAttachmentResponse")
	proto.RegisterType((*AppendAttachmentRequest)(nil), "openpitrix.AppendAttachmentRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.AppendAttachmentRequest.AttachmentContentEntry")
	proto.RegisterType((*AppendAttachmentResponse)(nil), "openpitrix.AppendAttachmentResponse")
	proto.RegisterType((*ReplaceAttachmentRequest)(nil), "openpitrix.ReplaceAttachmentRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.ReplaceAttachmentRequest.AttachmentContentEntry")
	proto.RegisterType((*ReplaceAttachmentResponse)(nil), "openpitrix.ReplaceAttachmentResponse")
	proto.RegisterType((*DeleteAttachmentsRequest)(nil), "openpitrix.DeleteAttachmentsRequest")
	proto.RegisterType((*DeleteAttachmentsResponse)(nil), "openpitrix.DeleteAttachmentsResponse")
}

func init() { proto.RegisterFile("attachment.proto", fileDescriptor_50ce80bdd3ef17d6) }

var fileDescriptor_50ce80bdd3ef17d6 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x76, 0x5a, 0x14, 0x38, 0x0b, 0x75, 0x99, 0x28, 0x2c, 0x1b, 0xa3, 0x58, 0x20, 0x69, 0x0c,
	0x6c, 0x93, 0x72, 0x43, 0xe0, 0x0a, 0xc1, 0x18, 0x2f, 0xbc, 0xd9, 0xa0, 0x26, 0x0a, 0xc1, 0xa1,
	0x1c, 0x96, 0xc5, 0x76, 0x76, 0xdc, 0x1d, 0xc0, 0x5e, 0xf9, 0x08, 0xbe, 0x82, 0xbe, 0x84, 0xaf,
	0xe0, 0x23, 0xf8, 0x16, 0xfa, 0x0a, 0x66, 0x7f, 0xca, 0xce, 0xb6, 0xbb, 0xa5, 0x9a, 0x06, 0xb9,
	0xea, 0xec, 0x99, 0x6f, 0xbe, 0xf3, 0xcd, 0x77, 0xce, 0x4c, 0x07, 0x74, 0x26, 0x25, 0x6b, 0x9e,
	0xb4, 0x91, 0x4b, 0x4b, 0xf8, 0x9e, 0xf4, 0x28, 0x78, 0x02, 0xb9, 0x70, 0xa5, 0xef, 0x7e, 0x32,
	0x1f, 0x3a, 0x9e, 0xe7, 0xb4, 0xb0, 0x1e, 0xcd, 0x1c, 0x9e, 0x1d, 0xd7, 0x2f, 0x7c, 0x26, 0x04,
	0xfa, 0x41, 0x8c, 0x35, 0x1f, 0xf5, 0xce, 0x4b, 0xb7, 0x8d, 0x81, 0x64, 0x6d, 0x91, 0x00, 0x1e,
	0x24, 0x00, 0x26, 0xdc, 0x3a, 0xe3, 0xdc, 0x93, 0x4c, 0xba, 0x1e, 0xef, 0x2e, 0x5f, 0x89, 0x7e,
	0x9a, 0xab, 0x0e, 0xf2, 0xd5, 0xe0, 0x82, 0x39, 0x0e, 0xfa, 0x75, 0x4f, 0x44, 0x88, 0x1c, 0xb4,
	0x26, 0x3b, 0x02, 0x93, 0x8f, 0xea, 0x67, 0xb8, 0xff, 0x1c, 0xe5, 0xd6, 0xa5, 0xf8, 0xc0, 0xc6,
	0x8f, 0x67, 0x18, 0x48, 0xba, 0x08, 0xd3, 0xe9, 0x96, 0x0e, 0xdc, 0x23, 0x83, 0x2c, 0x94, 0x6b,
	0x93, 0xf6, 0x54, 0x1a, 0x7c, 0x71, 0x44, 0x4d, 0x98, 0x38, 0x76, 0x5b, 0xc8, 0x59, 0x1b, 0x8d,
	0x52, 0x34, 0x7f, 0xf9, 0x4d, 0x97, 0xa1, 0xe2, 0x3a, 0xdc, 0xf3, 0xf1, 0xa0, 0xe9, 0x71, 0x89,
	0x5c, 0x1a, 0xe5, 0x05, 0x52, 0x9b, 0xb0, 0xa7, 0xe3, 0xe8, 0x76, 0x1c, 0xac, 0xfe, 0x20, 0x30,
	0xdb, 0xab, 0x20, 0x10, 0x1e, 0x0f, 0x90, 0xbe, 0x02, 0x2d, 0xcd, 0x16, 0x44, 0x02, 0xb4, 0xc6,
	0x9a, 0x95, 0xfa, 0x6a, 0xe5, 0x2f, 0xb4, 0x94, 0xd8, 0x33, 0x2e, 0xfd, 0x8e, 0xad, 0xf2, 0x98,
	0xaf, 0x41, 0xef, 0x05, 0x50, 0x1d, 0xca, 0x1f, 0xb0, 0x63, 0x90, 0x05, 0x52, 0x9b, 0xb4, 0xc3,
	0x21, 0x5d, 0x81, 0xdb, 0xe7, 0xac, 0x75, 0x16, 0xee, 0x8b, 0xd4, 0xb4, 0xc6, 0xac, 0x9a, 0x36,
	0x5d, 0x6e, 0xc7, 0xa0, 0x8d, 0xd2, 0x3a, 0xa9, 0xfe, 0x2c, 0x01, 0xa4, 0x33, 0x79, 0x06, 0x92,
	0x3e, 0x03, 0xb7, 0xe1, 0xae, 0x02, 0x0a, 0x0b, 0x13, 0xe5, 0xab, 0x34, 0xcc, 0xfc, 0x7c, 0xbb,
	0x1d, 0x81, 0x76, 0x85, 0x65, 0xbe, 0xe9, 0x1e, 0x50, 0x85, 0x24, 0x75, 0x3b, 0xb4, 0x6b, 0x35,
	0x9f, 0x47, 0x19, 0x26, 0x85, 0x88, 0x8d, 0x9a, 0x61, 0xbd, 0x71, 0xba, 0x09, 0x5a, 0xd3, 0x47,
	0x26, 0xf1, 0x20, 0x6c, 0x4a, 0x63, 0x2c, 0xb2, 0xc3, 0xb4, 0xe2, 0x86, 0xb4, 0xba, 0x1d, 0x6b,
	0xed, 0x76, 0x3b, 0xd6, 0x86, 0x18, 0x1e, 0x06, 0xcc, 0x1d, 0x98, 0xcd, 0xcf, 0x94, 0xe3, 0xf8,
	0x3d, 0xd5, 0xf1, 0x29, 0xd5, 0xd9, 0x2f, 0x25, 0x98, 0xdb, 0x8e, 0x48, 0x15, 0xe7, 0x93, 0x3e,
	0x1d, 0x89, 0x83, 0xee, 0x00, 0x07, 0x37, 0x54, 0x9e, 0x02, 0x15, 0xc3, 0xdb, 0x39, 0x22, 0x47,
	0xbe, 0x12, 0x30, 0xfa, 0xb5, 0x24, 0xe7, 0xe6, 0xfa, 0x3a, 0x4f, 0x3d, 0xff, 0xe5, 0xec, 0xf9,
	0xaf, 0xfe, 0x26, 0x30, 0xb7, 0x25, 0x04, 0xf2, 0xa3, 0xfe, 0xa2, 0x0d, 0xa5, 0x70, 0xe8, 0xa2,
	0x14, 0x64, 0xf9, 0x2f, 0x45, 0xe9, 0xd7, 0x72, 0xa3, 0x8a, 0xf2, 0xbd, 0x04, 0x86, 0x8d, 0xa2,
	0xc5, 0x9a, 0xf8, 0x8f, 0x55, 0x19, 0x89, 0xc4, 0xd3, 0x01, 0xa5, 0xdd, 0x54, 0x79, 0x8a, 0xb4,
	0x5e, 0x7b, 0x6d, 0xbf, 0x11, 0x98, 0xcf, 0x11, 0x73, 0xa3, 0x8a, 0xfb, 0x0e, 0x8c, 0x1d, 0x6c,
	0xa1, 0x7a, 0x27, 0x8c, 0xec, 0xef, 0xbc, 0xba, 0x07, 0xf3, 0x39, 0xe4, 0xc5, 0xfb, 0xff, 0x2b,
	0xf6, 0x27, 0xeb, 0x50, 0xc9, 0x6e, 0x9c, 0x6a, 0x30, 0xce, 0xfc, 0xe6, 0x89, 0x7b, 0x8e, 0xfa,
	0x2d, 0x3a, 0x0e, 0x65, 0x9f, 0x5d, 0xe8, 0x24, 0x1c, 0x9c, 0x0a, 0x47, 0x87, 0x70, 0x20, 0xb8,
	0xa3, 0x6b, 0x8d, 0x5f, 0x65, 0x98, 0x49, 0x97, 0xbe, 0x64, 0x9c, 0x39, 0xe8, 0xd3, 0x7d, 0xd0,
	0x7b, 0xaf, 0x47, 0xba, 0x38, 0xc4, 0x45, 0x6e, 0x2e, 0x0d, 0x06, 0x25, 0xfb, 0xdd, 0x07, 0xbd,
	0xf7, 0xa0, 0x67, 0xe9, 0x0b, 0xae, 0xa4, 0x2c, 0x7d, 0xe1, 0x5d, 0xf1, 0x1e, 0x66, 0xfa, 0x7a,
	0x8d, 0x2e, 0x0d, 0x73, 0x2e, 0xcc, 0xe5, 0x2b, 0x50, 0x49, 0x86, 0x37, 0x50, 0xc9, 0xbe, 0x9d,
	0xe8, 0xe3, 0x41, 0xef, 0xaa, 0x98, 0xbb, 0x7a, 0xf5, 0xd3, 0x2b, 0x94, 0xde, 0xd7, 0x26, 0x59,
	0xe9, 0x45, 0x2d, 0x9a, 0x95, 0x5e, 0xd8, 0x6b, 0x4f, 0xc7, 0xde, 0x96, 0xc4, 0xe1, 0xe1, 0x9d,
	0xe8, 0xe1, 0xb1, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x25, 0xf4, 0x59, 0x39, 0x78, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttachmentManagerClient is the client API for AttachmentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttachmentManagerClient interface {
	CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*CreateAttachmentResponse, error)
	AppendAttachment(ctx context.Context, in *AppendAttachmentRequest, opts ...grpc.CallOption) (*AppendAttachmentResponse, error)
	ReplaceAttachment(ctx context.Context, in *ReplaceAttachmentRequest, opts ...grpc.CallOption) (*ReplaceAttachmentResponse, error)
	GetAttachments(ctx context.Context, in *GetAttachmentsRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error)
	DeleteAttachments(ctx context.Context, in *DeleteAttachmentsRequest, opts ...grpc.CallOption) (*DeleteAttachmentsResponse, error)
}

type attachmentManagerClient struct {
	cc *grpc.ClientConn
}

func NewAttachmentManagerClient(cc *grpc.ClientConn) AttachmentManagerClient {
	return &attachmentManagerClient{cc}
}

func (c *attachmentManagerClient) CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*CreateAttachmentResponse, error) {
	out := new(CreateAttachmentResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AttachmentManager/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentManagerClient) AppendAttachment(ctx context.Context, in *AppendAttachmentRequest, opts ...grpc.CallOption) (*AppendAttachmentResponse, error) {
	out := new(AppendAttachmentResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AttachmentManager/AppendAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentManagerClient) ReplaceAttachment(ctx context.Context, in *ReplaceAttachmentRequest, opts ...grpc.CallOption) (*ReplaceAttachmentResponse, error) {
	out := new(ReplaceAttachmentResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AttachmentManager/ReplaceAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentManagerClient) GetAttachments(ctx context.Context, in *GetAttachmentsRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error) {
	out := new(GetAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AttachmentManager/GetAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentManagerClient) DeleteAttachments(ctx context.Context, in *DeleteAttachmentsRequest, opts ...grpc.CallOption) (*DeleteAttachmentsResponse, error) {
	out := new(DeleteAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AttachmentManager/DeleteAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentManagerServer is the server API for AttachmentManager service.
type AttachmentManagerServer interface {
	CreateAttachment(context.Context, *CreateAttachmentRequest) (*CreateAttachmentResponse, error)
	AppendAttachment(context.Context, *AppendAttachmentRequest) (*AppendAttachmentResponse, error)
	ReplaceAttachment(context.Context, *ReplaceAttachmentRequest) (*ReplaceAttachmentResponse, error)
	GetAttachments(context.Context, *GetAttachmentsRequest) (*GetAttachmentsResponse, error)
	DeleteAttachments(context.Context, *DeleteAttachmentsRequest) (*DeleteAttachmentsResponse, error)
}

func RegisterAttachmentManagerServer(s *grpc.Server, srv AttachmentManagerServer) {
	s.RegisterService(&_AttachmentManager_serviceDesc, srv)
}

func _AttachmentManager_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentManagerServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AttachmentManager/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentManagerServer).CreateAttachment(ctx, req.(*CreateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentManager_AppendAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentManagerServer).AppendAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AttachmentManager/AppendAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentManagerServer).AppendAttachment(ctx, req.(*AppendAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentManager_ReplaceAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentManagerServer).ReplaceAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AttachmentManager/ReplaceAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentManagerServer).ReplaceAttachment(ctx, req.(*ReplaceAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentManager_GetAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentManagerServer).GetAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AttachmentManager/GetAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentManagerServer).GetAttachments(ctx, req.(*GetAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentManager_DeleteAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentManagerServer).DeleteAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AttachmentManager/DeleteAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentManagerServer).DeleteAttachments(ctx, req.(*DeleteAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttachmentManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.AttachmentManager",
	HandlerType: (*AttachmentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttachment",
			Handler:    _AttachmentManager_CreateAttachment_Handler,
		},
		{
			MethodName: "AppendAttachment",
			Handler:    _AttachmentManager_AppendAttachment_Handler,
		},
		{
			MethodName: "ReplaceAttachment",
			Handler:    _AttachmentManager_ReplaceAttachment_Handler,
		},
		{
			MethodName: "GetAttachments",
			Handler:    _AttachmentManager_GetAttachments_Handler,
		},
		{
			MethodName: "DeleteAttachments",
			Handler:    _AttachmentManager_DeleteAttachments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachment.proto",
}
