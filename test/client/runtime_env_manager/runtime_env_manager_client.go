// Code generated by go-swagger; DO NOT EDIT.

package runtime_env_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new runtime env manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime env manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachCredentialToRuntimeEnv creates runtime env
*/
func (a *Client) AttachCredentialToRuntimeEnv(params *AttachCredentialToRuntimeEnvParams) (*AttachCredentialToRuntimeEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachCredentialToRuntimeEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AttachCredentialToRuntimeEnv",
		Method:             "POST",
		PathPattern:        "/v1/credential_runtime_env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachCredentialToRuntimeEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachCredentialToRuntimeEnvOK), nil

}

/*
CreateRuntimeEnv creates runtime env
*/
func (a *Client) CreateRuntimeEnv(params *CreateRuntimeEnvParams) (*CreateRuntimeEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRuntimeEnv",
		Method:             "POST",
		PathPattern:        "/v1/runtime_envs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeEnvOK), nil

}

/*
CreateRuntimeEnvCredential creates runtime env credential
*/
func (a *Client) CreateRuntimeEnvCredential(params *CreateRuntimeEnvCredentialParams) (*CreateRuntimeEnvCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeEnvCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRuntimeEnvCredential",
		Method:             "POST",
		PathPattern:        "/v1/runtime_env_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeEnvCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeEnvCredentialOK), nil

}

/*
DeleteRuntimeEnv creates runtime env
*/
func (a *Client) DeleteRuntimeEnv(params *DeleteRuntimeEnvParams) (*DeleteRuntimeEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimeEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRuntimeEnv",
		Method:             "DELETE",
		PathPattern:        "/v1/runtime_envs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimeEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimeEnvOK), nil

}

/*
DeleteRuntimeEnvCredential modifies runtime env credential
*/
func (a *Client) DeleteRuntimeEnvCredential(params *DeleteRuntimeEnvCredentialParams) (*DeleteRuntimeEnvCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimeEnvCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRuntimeEnvCredential",
		Method:             "DELETE",
		PathPattern:        "/v1/runtime_env_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimeEnvCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimeEnvCredentialOK), nil

}

/*
DescribeRuntimeEnvCredentials describes runtime env crendentials
*/
func (a *Client) DescribeRuntimeEnvCredentials(params *DescribeRuntimeEnvCredentialsParams) (*DescribeRuntimeEnvCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimeEnvCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimeEnvCredentials",
		Method:             "GET",
		PathPattern:        "/v1/runtime_env_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimeEnvCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimeEnvCredentialsOK), nil

}

/*
DescribeRuntimeEnvs describes runtime envs
*/
func (a *Client) DescribeRuntimeEnvs(params *DescribeRuntimeEnvsParams) (*DescribeRuntimeEnvsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimeEnvsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimeEnvs",
		Method:             "GET",
		PathPattern:        "/v1/runtime_envs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimeEnvsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimeEnvsOK), nil

}

/*
DetachCredentialFromRuntimeEnv detaches runtime env
*/
func (a *Client) DetachCredentialFromRuntimeEnv(params *DetachCredentialFromRuntimeEnvParams) (*DetachCredentialFromRuntimeEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachCredentialFromRuntimeEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DetachCredentialFromRuntimeEnv",
		Method:             "DELETE",
		PathPattern:        "/v1/credential_runtime_env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachCredentialFromRuntimeEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachCredentialFromRuntimeEnvOK), nil

}

/*
ModifyRuntimeEnv modifies runtime env
*/
func (a *Client) ModifyRuntimeEnv(params *ModifyRuntimeEnvParams) (*ModifyRuntimeEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRuntimeEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRuntimeEnv",
		Method:             "PATCH",
		PathPattern:        "/v1/runtime_envs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRuntimeEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRuntimeEnvOK), nil

}

/*
ModifyRuntimeEnvCredential modifies runtime env credential
*/
func (a *Client) ModifyRuntimeEnvCredential(params *ModifyRuntimeEnvCredentialParams) (*ModifyRuntimeEnvCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRuntimeEnvCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRuntimeEnvCredential",
		Method:             "PATCH",
		PathPattern:        "/v1/runtime_env_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRuntimeEnvCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRuntimeEnvCredentialOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
