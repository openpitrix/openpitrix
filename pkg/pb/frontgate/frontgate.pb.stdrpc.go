// Code generated by protoc-gen-stdrpc. DO NOT EDIT.
//
// plugin: https://github.com/chai2010/protorpc/tree/master/protoc-gen-plugin
// plugin: https://github.com/chai2010/protorpc/tree/master/protoc-gen-stdrpc
//
// source: frontgate.proto

package openpitrix_frontgate

import (
	"fmt"
	"io"
	"log"
	"net"
	"net/rpc"
	"time"

	"github.com/golang/protobuf/proto"
)

var (
	_ = fmt.Sprint
	_ = io.Reader(nil)
	_ = log.Print
	_ = net.Addr(nil)
	_ = rpc.Call{}
	_ = time.Second

	_ = proto.String
)

type FrontgateServiceForPilot interface {
	GetInfo(in *Empty, out *Info) error
	CloseChannel(in *Empty, out *Empty) error
	GetConfdInfo(in *Empty, out *ConfdInfo) error
	StartConfd(in *StartConfdRequest, out *Empty) error
	StopConfd(in *StopConfdRequest, out *Empty) error
	RegisterMetadata(in *RegisterMetadataRequest, out *Empty) error
	DeregisterMetadata(in *DeRegisterMetadataRequest, out *Empty) error
	RegisterCmd(in *RegisterCmdRequest, out *Empty) error
	DeregisterCmd(in *DeRegisterCmdRequest, out *Empty) error
}

// AcceptFrontgateServiceForPilotClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptFrontgateServiceForPilotClient(lis net.Listener, x FrontgateServiceForPilot) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForPilot", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// RegisterFrontgateServiceForPilot publish the given FrontgateServiceForPilot implementation on the server.
func RegisterFrontgateServiceForPilot(srv *rpc.Server, x FrontgateServiceForPilot) error {
	if err := srv.RegisterName("FrontgateServiceForPilot", x); err != nil {
		return err
	}
	return nil
}

// NewFrontgateServiceForPilotServer returns a new FrontgateServiceForPilot Server.
func NewFrontgateServiceForPilotServer(x FrontgateServiceForPilot) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForPilot", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeFrontgateServiceForPilot listen announces on the local network address laddr
// and serves the given FrontgateServiceForPilot implementation.
func ListenAndServeFrontgateServiceForPilot(network, addr string, x FrontgateServiceForPilot) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForPilot", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// ServeFrontgateServiceForPilot serves the given FrontgateServiceForPilot implementation.
func ServeFrontgateServiceForPilot(conn io.ReadWriteCloser, x FrontgateServiceForPilot) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForPilot", x); err != nil {
		log.Fatal(err)
	}
	srv.ServeConn(conn)
}

type FrontgateServiceForPilotClient struct {
	*rpc.Client
}

// NewFrontgateServiceForPilotClient returns a FrontgateServiceForPilot stub to handle
// requests to the set of FrontgateServiceForPilot at the other end of the connection.
func NewFrontgateServiceForPilotClient(conn io.ReadWriteCloser) *FrontgateServiceForPilotClient {
	c := rpc.NewClient(conn)
	return &FrontgateServiceForPilotClient{c}
}

func (c *FrontgateServiceForPilotClient) GetInfo(in *Empty) (out *Info, err error) {
	if in == nil {
		in = new(Empty)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Info)
	if err = c.Call("FrontgateServiceForPilot.GetInfo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncGetInfo(in *Empty, out *Info, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(Empty)
	}
	return c.Go(
		"FrontgateServiceForPilot.GetInfo",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) CloseChannel(in *Empty) (out *Empty, err error) {
	if in == nil {
		in = new(Empty)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.CloseChannel", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncCloseChannel(in *Empty, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(Empty)
	}
	return c.Go(
		"FrontgateServiceForPilot.CloseChannel",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) GetConfdInfo(in *Empty) (out *ConfdInfo, err error) {
	if in == nil {
		in = new(Empty)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(ConfdInfo)
	if err = c.Call("FrontgateServiceForPilot.GetConfdInfo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncGetConfdInfo(in *Empty, out *ConfdInfo, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(Empty)
	}
	return c.Go(
		"FrontgateServiceForPilot.GetConfdInfo",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) StartConfd(in *StartConfdRequest) (out *Empty, err error) {
	if in == nil {
		in = new(StartConfdRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.StartConfd", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncStartConfd(in *StartConfdRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(StartConfdRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.StartConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) StopConfd(in *StopConfdRequest) (out *Empty, err error) {
	if in == nil {
		in = new(StopConfdRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.StopConfd", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncStopConfd(in *StopConfdRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(StopConfdRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.StopConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) RegisterMetadata(in *RegisterMetadataRequest) (out *Empty, err error) {
	if in == nil {
		in = new(RegisterMetadataRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.RegisterMetadata", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncRegisterMetadata(in *RegisterMetadataRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(RegisterMetadataRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.RegisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) DeregisterMetadata(in *DeRegisterMetadataRequest) (out *Empty, err error) {
	if in == nil {
		in = new(DeRegisterMetadataRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.DeregisterMetadata", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncDeregisterMetadata(in *DeRegisterMetadataRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(DeRegisterMetadataRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.DeregisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) RegisterCmd(in *RegisterCmdRequest) (out *Empty, err error) {
	if in == nil {
		in = new(RegisterCmdRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.RegisterCmd", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncRegisterCmd(in *RegisterCmdRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(RegisterCmdRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.RegisterCmd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForPilotClient) DeregisterCmd(in *DeRegisterCmdRequest) (out *Empty, err error) {
	if in == nil {
		in = new(DeRegisterCmdRequest)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForPilot.DeregisterCmd", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForPilotClient) AsyncDeregisterCmd(in *DeRegisterCmdRequest, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(DeRegisterCmdRequest)
	}
	return c.Go(
		"FrontgateServiceForPilot.DeregisterCmd",
		in, out,
		done,
	)
}

// DialFrontgateServiceForPilot connects to an FrontgateServiceForPilot at the specified network address.
func DialFrontgateServiceForPilot(network, addr string) (*FrontgateServiceForPilotClient, error) {
	c, err := rpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceForPilotClient{c}, nil
}

// DialFrontgateServiceForPilotTimeout connects to an FrontgateServiceForPilot at the specified network address.
func DialFrontgateServiceForPilotTimeout(network, addr string, timeout time.Duration) (*FrontgateServiceForPilotClient, error) {
	conn, err := net.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceForPilotClient{rpc.NewClient(conn)}, nil
}

type FrontgateServiceForDrone interface {
	GetInfo(in *Empty, out *Info) error
	PublicCmdResult(in *CommandResult, out *Empty) error
}

// AcceptFrontgateServiceForDroneClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptFrontgateServiceForDroneClient(lis net.Listener, x FrontgateServiceForDrone) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForDrone", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// RegisterFrontgateServiceForDrone publish the given FrontgateServiceForDrone implementation on the server.
func RegisterFrontgateServiceForDrone(srv *rpc.Server, x FrontgateServiceForDrone) error {
	if err := srv.RegisterName("FrontgateServiceForDrone", x); err != nil {
		return err
	}
	return nil
}

// NewFrontgateServiceForDroneServer returns a new FrontgateServiceForDrone Server.
func NewFrontgateServiceForDroneServer(x FrontgateServiceForDrone) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForDrone", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeFrontgateServiceForDrone listen announces on the local network address laddr
// and serves the given FrontgateServiceForDrone implementation.
func ListenAndServeFrontgateServiceForDrone(network, addr string, x FrontgateServiceForDrone) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForDrone", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// ServeFrontgateServiceForDrone serves the given FrontgateServiceForDrone implementation.
func ServeFrontgateServiceForDrone(conn io.ReadWriteCloser, x FrontgateServiceForDrone) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("FrontgateServiceForDrone", x); err != nil {
		log.Fatal(err)
	}
	srv.ServeConn(conn)
}

type FrontgateServiceForDroneClient struct {
	*rpc.Client
}

// NewFrontgateServiceForDroneClient returns a FrontgateServiceForDrone stub to handle
// requests to the set of FrontgateServiceForDrone at the other end of the connection.
func NewFrontgateServiceForDroneClient(conn io.ReadWriteCloser) *FrontgateServiceForDroneClient {
	c := rpc.NewClient(conn)
	return &FrontgateServiceForDroneClient{c}
}

func (c *FrontgateServiceForDroneClient) GetInfo(in *Empty) (out *Info, err error) {
	if in == nil {
		in = new(Empty)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Info)
	if err = c.Call("FrontgateServiceForDrone.GetInfo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForDroneClient) AsyncGetInfo(in *Empty, out *Info, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(Empty)
	}
	return c.Go(
		"FrontgateServiceForDrone.GetInfo",
		in, out,
		done,
	)
}

func (c *FrontgateServiceForDroneClient) PublicCmdResult(in *CommandResult) (out *Empty, err error) {
	if in == nil {
		in = new(CommandResult)
	}

	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	out = new(Empty)
	if err = c.Call("FrontgateServiceForDrone.PublicCmdResult", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}

	return out, nil
}

func (c *FrontgateServiceForDroneClient) AsyncPublicCmdResult(in *CommandResult, out *Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(CommandResult)
	}
	return c.Go(
		"FrontgateServiceForDrone.PublicCmdResult",
		in, out,
		done,
	)
}

// DialFrontgateServiceForDrone connects to an FrontgateServiceForDrone at the specified network address.
func DialFrontgateServiceForDrone(network, addr string) (*FrontgateServiceForDroneClient, error) {
	c, err := rpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceForDroneClient{c}, nil
}

// DialFrontgateServiceForDroneTimeout connects to an FrontgateServiceForDrone at the specified network address.
func DialFrontgateServiceForDroneTimeout(network, addr string, timeout time.Duration) (*FrontgateServiceForDroneClient, error) {
	conn, err := net.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceForDroneClient{rpc.NewClient(conn)}, nil
}
