// Code generated by go-swagger; DO NOT EDIT.

package attachment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAttachmentParams creates a new GetAttachmentParams object
// with the default values initialized.
func NewGetAttachmentParams() *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAttachmentParamsWithTimeout creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAttachmentParamsWithTimeout(timeout time.Duration) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		timeout: timeout,
	}
}

// NewGetAttachmentParamsWithContext creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAttachmentParamsWithContext(ctx context.Context) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		Context: ctx,
	}
}

// NewGetAttachmentParamsWithHTTPClient creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAttachmentParamsWithHTTPClient(client *http.Client) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{
		HTTPClient: client,
	}
}

/*GetAttachmentParams contains all the parameters to send to the API endpoint
for the get attachment operation typically these are written to a http.Request
*/
type GetAttachmentParams struct {

	/*AttachmentID
	  required, use attachment id to get attachment.

	*/
	AttachmentID *string
	/*Filename
	  filename, attachment contain one more file.

	*/
	Filename *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get attachment params
func (o *GetAttachmentParams) WithTimeout(timeout time.Duration) *GetAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get attachment params
func (o *GetAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get attachment params
func (o *GetAttachmentParams) WithContext(ctx context.Context) *GetAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get attachment params
func (o *GetAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get attachment params
func (o *GetAttachmentParams) WithHTTPClient(client *http.Client) *GetAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get attachment params
func (o *GetAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttachmentID adds the attachmentID to the get attachment params
func (o *GetAttachmentParams) WithAttachmentID(attachmentID *string) *GetAttachmentParams {
	o.SetAttachmentID(attachmentID)
	return o
}

// SetAttachmentID adds the attachmentId to the get attachment params
func (o *GetAttachmentParams) SetAttachmentID(attachmentID *string) {
	o.AttachmentID = attachmentID
}

// WithFilename adds the filename to the get attachment params
func (o *GetAttachmentParams) WithFilename(filename *string) *GetAttachmentParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the get attachment params
func (o *GetAttachmentParams) SetFilename(filename *string) {
	o.Filename = filename
}

// WriteToRequest writes these params to a swagger request
func (o *GetAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttachmentID != nil {

		// query param attachment_id
		var qrAttachmentID string
		if o.AttachmentID != nil {
			qrAttachmentID = *o.AttachmentID
		}
		qAttachmentID := qrAttachmentID
		if qAttachmentID != "" {
			if err := r.SetQueryParam("attachment_id", qAttachmentID); err != nil {
				return err
			}
		}

	}

	if o.Filename != nil {

		// query param filename
		var qrFilename string
		if o.Filename != nil {
			qrFilename = *o.Filename
		}
		qFilename := qrFilename
		if qFilename != "" {
			if err := r.SetQueryParam("filename", qFilename); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
