// Code generated by go-swagger; DO NOT EDIT.

package app_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new app manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AdminPassAppVersion operators of admin pass version of the app
*/
func (a *Client) AdminPassAppVersion(params *AdminPassAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AdminPassAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPassAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminPassAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/pass/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminPassAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminPassAppVersionOK), nil

}

/*
AdminRejectAppVersion operators of admin reject version of the app
*/
func (a *Client) AdminRejectAppVersion(params *AdminRejectAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AdminRejectAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminRejectAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminRejectAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/reject/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminRejectAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminRejectAppVersionOK), nil

}

/*
BusinessPassAppVersion operators of business pass version of the app
*/
func (a *Client) BusinessPassAppVersion(params *BusinessPassAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*BusinessPassAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessPassAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BusinessPassAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/pass/business",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BusinessPassAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BusinessPassAppVersionOK), nil

}

/*
BusinessRejectAppVersion operators of business reject version of the app
*/
func (a *Client) BusinessRejectAppVersion(params *BusinessRejectAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*BusinessRejectAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessRejectAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BusinessRejectAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/reject/business",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BusinessRejectAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BusinessRejectAppVersionOK), nil

}

/*
BusinessReviewAppVersion operators of business review version of the app
*/
func (a *Client) BusinessReviewAppVersion(params *BusinessReviewAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*BusinessReviewAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusinessReviewAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BusinessReviewAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/review/business",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BusinessReviewAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BusinessReviewAppVersionOK), nil

}

/*
CancelAppVersion cancels version of the app
*/
func (a *Client) CancelAppVersion(params *CancelAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CancelAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CancelAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelAppVersionOK), nil

}

/*
CreateApp creates app user of isv can create app on the platform
*/
func (a *Client) CreateApp(params *CreateAppParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateApp",
		Method:             "POST",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAppOK), nil

}

/*
CreateAppVersion creates app of specific version
*/
func (a *Client) CreateAppVersion(params *CreateAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAppVersionOK), nil

}

/*
DeleteAppVersion deletes version of the app
*/
func (a *Client) DeleteAppVersion(params *DeleteAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppVersionOK), nil

}

/*
DeleteApps batches delete apps
*/
func (a *Client) DeleteApps(params *DeleteAppsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteApps",
		Method:             "DELETE",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppsOK), nil

}

/*
DescribeActiveAppVersions gets active versions of app can filter with these fields version id app id name owner description package name status type default return all active app versions
*/
func (a *Client) DescribeActiveAppVersions(params *DescribeActiveAppVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeActiveAppVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeActiveAppVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeActiveAppVersions",
		Method:             "GET",
		PathPattern:        "/v1/active_app_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeActiveAppVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeActiveAppVersionsOK), nil

}

/*
DescribeActiveApps gets active apps can filter with these fields app id name repo id description status home icon screenshots maintainers sources readme owner chart name default return all apps
*/
func (a *Client) DescribeActiveApps(params *DescribeActiveAppsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeActiveAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeActiveAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeActiveApps",
		Method:             "GET",
		PathPattern:        "/v1/active_apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeActiveAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeActiveAppsOK), nil

}

/*
DescribeAppVersionAudits gets audits information of version specific app can filter with these fields version id app id status operator role default return all app version audits
*/
func (a *Client) DescribeAppVersionAudits(params *DescribeAppVersionAuditsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAppVersionAuditsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAppVersionAuditsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAppVersionAudits",
		Method:             "GET",
		PathPattern:        "/v1/app_version_audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAppVersionAuditsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAppVersionAuditsOK), nil

}

/*
DescribeAppVersionReviews gets reviews of version specific app can filter with these fields review id version id app id status reviewer
*/
func (a *Client) DescribeAppVersionReviews(params *DescribeAppVersionReviewsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAppVersionReviewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAppVersionReviewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAppVersionReviews",
		Method:             "GET",
		PathPattern:        "/v1/app_version_reviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAppVersionReviewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAppVersionReviewsOK), nil

}

/*
DescribeAppVersions gets versions of app can filter with these fields version id app id name owner description package name status type default return all app versions
*/
func (a *Client) DescribeAppVersions(params *DescribeAppVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAppVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAppVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeAppVersions",
		Method:             "GET",
		PathPattern:        "/v1/app_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAppVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAppVersionsOK), nil

}

/*
DescribeApps gets apps can filter with these fields app id name repo id description status home icon screenshots maintainers sources readme owner chart name default return all apps
*/
func (a *Client) DescribeApps(params *DescribeAppsParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeApps",
		Method:             "GET",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAppsOK), nil

}

/*
GetAppStatistics gets statistics info of apps
*/
func (a *Client) GetAppStatistics(params *GetAppStatisticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppStatisticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppStatistics",
		Method:             "GET",
		PathPattern:        "/v1/apps/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppStatisticsOK), nil

}

/*
GetAppVersionPackage gets packages of version specific app
*/
func (a *Client) GetAppVersionPackage(params *GetAppVersionPackageParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppVersionPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppVersionPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppVersionPackage",
		Method:             "GET",
		PathPattern:        "/v1/app_version/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppVersionPackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppVersionPackageOK), nil

}

/*
GetAppVersionPackageFiles gets app package files
*/
func (a *Client) GetAppVersionPackageFiles(params *GetAppVersionPackageFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppVersionPackageFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppVersionPackageFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppVersionPackageFiles",
		Method:             "GET",
		PathPattern:        "/v1/app_version/package/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppVersionPackageFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppVersionPackageFilesOK), nil

}

/*
IsvPassAppVersion operators of isv pass version of the app
*/
func (a *Client) IsvPassAppVersion(params *IsvPassAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*IsvPassAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsvPassAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsvPassAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/pass/isv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IsvPassAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsvPassAppVersionOK), nil

}

/*
IsvRejectAppVersion operators of isv reject version of the app
*/
func (a *Client) IsvRejectAppVersion(params *IsvRejectAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*IsvRejectAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsvRejectAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsvRejectAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/reject/isv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IsvRejectAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsvRejectAppVersionOK), nil

}

/*
IsvReviewAppVersion operators of isv review version of the app
*/
func (a *Client) IsvReviewAppVersion(params *IsvReviewAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*IsvReviewAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsvReviewAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsvReviewAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/review/isv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IsvReviewAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsvReviewAppVersionOK), nil

}

/*
ModifyApp modifies app info
*/
func (a *Client) ModifyApp(params *ModifyAppParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyApp",
		Method:             "PATCH",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAppOK), nil

}

/*
ModifyAppVersion modifies version info of the app
*/
func (a *Client) ModifyAppVersion(params *ModifyAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyAppVersion",
		Method:             "PATCH",
		PathPattern:        "/v1/app_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAppVersionOK), nil

}

/*
RecoverAppVersion recovers version of app
*/
func (a *Client) RecoverAppVersion(params *RecoverAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*RecoverAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RecoverAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/recover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecoverAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RecoverAppVersionOK), nil

}

/*
ReleaseAppVersion releases version of the app
*/
func (a *Client) ReleaseAppVersion(params *ReleaseAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReleaseAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReleaseAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReleaseAppVersionOK), nil

}

/*
SubmitAppVersion submits version of the app
*/
func (a *Client) SubmitAppVersion(params *SubmitAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubmitAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitAppVersionOK), nil

}

/*
SuspendAppVersion suspends app version
*/
func (a *Client) SuspendAppVersion(params *SuspendAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SuspendAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SuspendAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/suspend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SuspendAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SuspendAppVersionOK), nil

}

/*
TechnicalPassAppVersion operators of technical pass version of the app
*/
func (a *Client) TechnicalPassAppVersion(params *TechnicalPassAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TechnicalPassAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTechnicalPassAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TechnicalPassAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/pass/technical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TechnicalPassAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TechnicalPassAppVersionOK), nil

}

/*
TechnicalRejectAppVersion operators of technical reject version of the app
*/
func (a *Client) TechnicalRejectAppVersion(params *TechnicalRejectAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TechnicalRejectAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTechnicalRejectAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TechnicalRejectAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/reject/technical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TechnicalRejectAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TechnicalRejectAppVersionOK), nil

}

/*
TechnicalReviewAppVersion operators of technical review version of the app
*/
func (a *Client) TechnicalReviewAppVersion(params *TechnicalReviewAppVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TechnicalReviewAppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTechnicalReviewAppVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TechnicalReviewAppVersion",
		Method:             "POST",
		PathPattern:        "/v1/app_version/action/review/technical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TechnicalReviewAppVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TechnicalReviewAppVersionOK), nil

}

/*
UploadAppAttachment uploads app attachment
*/
func (a *Client) UploadAppAttachment(params *UploadAppAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*UploadAppAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadAppAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UploadAppAttachment",
		Method:             "PATCH",
		PathPattern:        "/v1/app/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadAppAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadAppAttachmentOK), nil

}

/*
ValidatePackage validates format of package pack by op tool
*/
func (a *Client) ValidatePackage(params *ValidatePackageParams, authInfo runtime.ClientAuthInfoWriter) (*ValidatePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ValidatePackage",
		Method:             "POST",
		PathPattern:        "/v1/apps/validate_package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ValidatePackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ValidatePackageOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
