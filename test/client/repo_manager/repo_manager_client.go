// Code generated by go-swagger; DO NOT EDIT.

package repo_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new repo manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repo manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRepo creates repo
*/
func (a *Client) CreateRepo(params *CreateRepoParams) (*CreateRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRepo",
		Method:             "POST",
		PathPattern:        "/v1/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRepoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRepoOK), nil

}

/*
CreateRepoLabel creates repo label
*/
func (a *Client) CreateRepoLabel(params *CreateRepoLabelParams) (*CreateRepoLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepoLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRepoLabel",
		Method:             "POST",
		PathPattern:        "/v1/repo_labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRepoLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRepoLabelOK), nil

}

/*
CreateRepoSelector creates repo selector
*/
func (a *Client) CreateRepoSelector(params *CreateRepoSelectorParams) (*CreateRepoSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepoSelectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRepoSelector",
		Method:             "POST",
		PathPattern:        "/v1/repo_selectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRepoSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRepoSelectorOK), nil

}

/*
DeleteRepo deletes repo
*/
func (a *Client) DeleteRepo(params *DeleteRepoParams) (*DeleteRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepo",
		Method:             "DELETE",
		PathPattern:        "/v1/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRepoOK), nil

}

/*
DeleteRepoLabel deletes repo label
*/
func (a *Client) DeleteRepoLabel(params *DeleteRepoLabelParams) (*DeleteRepoLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepoLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepoLabel",
		Method:             "DELETE",
		PathPattern:        "/v1/repo_labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepoLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRepoLabelOK), nil

}

/*
DeleteRepoSelector deletes repo selector
*/
func (a *Client) DeleteRepoSelector(params *DeleteRepoSelectorParams) (*DeleteRepoSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepoSelectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepoSelector",
		Method:             "DELETE",
		PathPattern:        "/v1/repo_selectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepoSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRepoSelectorOK), nil

}

/*
DescribeRepos describes repos with filter
*/
func (a *Client) DescribeRepos(params *DescribeReposParams) (*DescribeReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeReposParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRepos",
		Method:             "GET",
		PathPattern:        "/v1/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeReposOK), nil

}

/*
ModifyRepo modifies repo
*/
func (a *Client) ModifyRepo(params *ModifyRepoParams) (*ModifyRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRepo",
		Method:             "PATCH",
		PathPattern:        "/v1/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRepoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRepoOK), nil

}

/*
ModifyRepoLabel modifies repo label
*/
func (a *Client) ModifyRepoLabel(params *ModifyRepoLabelParams) (*ModifyRepoLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRepoLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRepoLabel",
		Method:             "PATCH",
		PathPattern:        "/v1/repo_labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRepoLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRepoLabelOK), nil

}

/*
ModifyRepoSelector modifies repo selector
*/
func (a *Client) ModifyRepoSelector(params *ModifyRepoSelectorParams) (*ModifyRepoSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRepoSelectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRepoSelector",
		Method:             "PATCH",
		PathPattern:        "/v1/repo_selectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRepoSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRepoSelectorOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
