// Code generated by go-swagger; DO NOT EDIT.

package account_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeGroupsParams creates a new DescribeGroupsParams object
// with the default values initialized.
func NewDescribeGroupsParams() *DescribeGroupsParams {
	var ()
	return &DescribeGroupsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeGroupsParamsWithTimeout creates a new DescribeGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeGroupsParamsWithTimeout(timeout time.Duration) *DescribeGroupsParams {
	var ()
	return &DescribeGroupsParams{

		timeout: timeout,
	}
}

// NewDescribeGroupsParamsWithContext creates a new DescribeGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeGroupsParamsWithContext(ctx context.Context) *DescribeGroupsParams {
	var ()
	return &DescribeGroupsParams{

		Context: ctx,
	}
}

// NewDescribeGroupsParamsWithHTTPClient creates a new DescribeGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeGroupsParamsWithHTTPClient(client *http.Client) *DescribeGroupsParams {
	var ()
	return &DescribeGroupsParams{
		HTTPClient: client,
	}
}

/*DescribeGroupsParams contains all the parameters to send to the API endpoint
for the describe groups operation typically these are written to a http.Request
*/
type DescribeGroupsParams struct {

	/*GroupID
	  group ids.

	*/
	GroupID []string
	/*GroupName
	  group name.

	*/
	GroupName []string
	/*GroupPath
	  group path, a concat string gid-xxx.gid-xxx.gid...

	*/
	GroupPath []string
	/*Limit
	  data limit per page, default value 20, max value 200.

	*/
	Limit *int64
	/*Offset
	  data offset, default 0.

	*/
	Offset *int64
	/*ParentGroupID
	  parent group ids.

	*/
	ParentGroupID []string
	/*Reverse
	  value = 0 sort ASC, value = 1 sort DESC.

	*/
	Reverse *bool
	/*RootGroupID
	  use root group ids to get all groups.

	*/
	RootGroupID []string
	/*SearchWord
	  query key, support these fields(group_id, parent_group_id, group_path, status).

	*/
	SearchWord *string
	/*SortKey
	  sort key, order by sort_key, default create_time.

	*/
	SortKey *string
	/*Status
	  status eg.[active|deleted].

	*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe groups params
func (o *DescribeGroupsParams) WithTimeout(timeout time.Duration) *DescribeGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe groups params
func (o *DescribeGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe groups params
func (o *DescribeGroupsParams) WithContext(ctx context.Context) *DescribeGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe groups params
func (o *DescribeGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe groups params
func (o *DescribeGroupsParams) WithHTTPClient(client *http.Client) *DescribeGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe groups params
func (o *DescribeGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the describe groups params
func (o *DescribeGroupsParams) WithGroupID(groupID []string) *DescribeGroupsParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the describe groups params
func (o *DescribeGroupsParams) SetGroupID(groupID []string) {
	o.GroupID = groupID
}

// WithGroupName adds the groupName to the describe groups params
func (o *DescribeGroupsParams) WithGroupName(groupName []string) *DescribeGroupsParams {
	o.SetGroupName(groupName)
	return o
}

// SetGroupName adds the groupName to the describe groups params
func (o *DescribeGroupsParams) SetGroupName(groupName []string) {
	o.GroupName = groupName
}

// WithGroupPath adds the groupPath to the describe groups params
func (o *DescribeGroupsParams) WithGroupPath(groupPath []string) *DescribeGroupsParams {
	o.SetGroupPath(groupPath)
	return o
}

// SetGroupPath adds the groupPath to the describe groups params
func (o *DescribeGroupsParams) SetGroupPath(groupPath []string) {
	o.GroupPath = groupPath
}

// WithLimit adds the limit to the describe groups params
func (o *DescribeGroupsParams) WithLimit(limit *int64) *DescribeGroupsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the describe groups params
func (o *DescribeGroupsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the describe groups params
func (o *DescribeGroupsParams) WithOffset(offset *int64) *DescribeGroupsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the describe groups params
func (o *DescribeGroupsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithParentGroupID adds the parentGroupID to the describe groups params
func (o *DescribeGroupsParams) WithParentGroupID(parentGroupID []string) *DescribeGroupsParams {
	o.SetParentGroupID(parentGroupID)
	return o
}

// SetParentGroupID adds the parentGroupId to the describe groups params
func (o *DescribeGroupsParams) SetParentGroupID(parentGroupID []string) {
	o.ParentGroupID = parentGroupID
}

// WithReverse adds the reverse to the describe groups params
func (o *DescribeGroupsParams) WithReverse(reverse *bool) *DescribeGroupsParams {
	o.SetReverse(reverse)
	return o
}

// SetReverse adds the reverse to the describe groups params
func (o *DescribeGroupsParams) SetReverse(reverse *bool) {
	o.Reverse = reverse
}

// WithRootGroupID adds the rootGroupID to the describe groups params
func (o *DescribeGroupsParams) WithRootGroupID(rootGroupID []string) *DescribeGroupsParams {
	o.SetRootGroupID(rootGroupID)
	return o
}

// SetRootGroupID adds the rootGroupId to the describe groups params
func (o *DescribeGroupsParams) SetRootGroupID(rootGroupID []string) {
	o.RootGroupID = rootGroupID
}

// WithSearchWord adds the searchWord to the describe groups params
func (o *DescribeGroupsParams) WithSearchWord(searchWord *string) *DescribeGroupsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe groups params
func (o *DescribeGroupsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithSortKey adds the sortKey to the describe groups params
func (o *DescribeGroupsParams) WithSortKey(sortKey *string) *DescribeGroupsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the describe groups params
func (o *DescribeGroupsParams) SetSortKey(sortKey *string) {
	o.SortKey = sortKey
}

// WithStatus adds the status to the describe groups params
func (o *DescribeGroupsParams) WithStatus(status []string) *DescribeGroupsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the describe groups params
func (o *DescribeGroupsParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesGroupID := o.GroupID

	joinedGroupID := swag.JoinByFormat(valuesGroupID, "multi")
	// query array param group_id
	if err := r.SetQueryParam("group_id", joinedGroupID...); err != nil {
		return err
	}

	valuesGroupName := o.GroupName

	joinedGroupName := swag.JoinByFormat(valuesGroupName, "multi")
	// query array param group_name
	if err := r.SetQueryParam("group_name", joinedGroupName...); err != nil {
		return err
	}

	valuesGroupPath := o.GroupPath

	joinedGroupPath := swag.JoinByFormat(valuesGroupPath, "multi")
	// query array param group_path
	if err := r.SetQueryParam("group_path", joinedGroupPath...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesParentGroupID := o.ParentGroupID

	joinedParentGroupID := swag.JoinByFormat(valuesParentGroupID, "multi")
	// query array param parent_group_id
	if err := r.SetQueryParam("parent_group_id", joinedParentGroupID...); err != nil {
		return err
	}

	if o.Reverse != nil {

		// query param reverse
		var qrReverse bool
		if o.Reverse != nil {
			qrReverse = *o.Reverse
		}
		qReverse := swag.FormatBool(qrReverse)
		if qReverse != "" {
			if err := r.SetQueryParam("reverse", qReverse); err != nil {
				return err
			}
		}

	}

	valuesRootGroupID := o.RootGroupID

	joinedRootGroupID := swag.JoinByFormat(valuesRootGroupID, "multi")
	// query array param root_group_id
	if err := r.SetQueryParam("root_group_id", joinedRootGroupID...); err != nil {
		return err
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	if o.SortKey != nil {

		// query param sort_key
		var qrSortKey string
		if o.SortKey != nil {
			qrSortKey = *o.SortKey
		}
		qSortKey := qrSortKey
		if qSortKey != "" {
			if err := r.SetQueryParam("sort_key", qSortKey); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
