// Code generated by go-swagger; DO NOT EDIT.

package app_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppVersionPackageParams creates a new GetAppVersionPackageParams object
// with the default values initialized.
func NewGetAppVersionPackageParams() *GetAppVersionPackageParams {
	var ()
	return &GetAppVersionPackageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppVersionPackageParamsWithTimeout creates a new GetAppVersionPackageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppVersionPackageParamsWithTimeout(timeout time.Duration) *GetAppVersionPackageParams {
	var ()
	return &GetAppVersionPackageParams{

		timeout: timeout,
	}
}

// NewGetAppVersionPackageParamsWithContext creates a new GetAppVersionPackageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppVersionPackageParamsWithContext(ctx context.Context) *GetAppVersionPackageParams {
	var ()
	return &GetAppVersionPackageParams{

		Context: ctx,
	}
}

// NewGetAppVersionPackageParamsWithHTTPClient creates a new GetAppVersionPackageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppVersionPackageParamsWithHTTPClient(client *http.Client) *GetAppVersionPackageParams {
	var ()
	return &GetAppVersionPackageParams{
		HTTPClient: client,
	}
}

/*GetAppVersionPackageParams contains all the parameters to send to the API endpoint
for the get app version package operation typically these are written to a http.Request
*/
type GetAppVersionPackageParams struct {

	/*VersionID
	  required, use version id to get package.

	*/
	VersionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get app version package params
func (o *GetAppVersionPackageParams) WithTimeout(timeout time.Duration) *GetAppVersionPackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get app version package params
func (o *GetAppVersionPackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get app version package params
func (o *GetAppVersionPackageParams) WithContext(ctx context.Context) *GetAppVersionPackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get app version package params
func (o *GetAppVersionPackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get app version package params
func (o *GetAppVersionPackageParams) WithHTTPClient(client *http.Client) *GetAppVersionPackageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get app version package params
func (o *GetAppVersionPackageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVersionID adds the versionID to the get app version package params
func (o *GetAppVersionPackageParams) WithVersionID(versionID *string) *GetAppVersionPackageParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the get app version package params
func (o *GetAppVersionPackageParams) SetVersionID(versionID *string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppVersionPackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.VersionID != nil {

		// query param version_id
		var qrVersionID string
		if o.VersionID != nil {
			qrVersionID = *o.VersionID
		}
		qVersionID := qrVersionID
		if qVersionID != "" {
			if err := r.SetQueryParam("version_id", qVersionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
