// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadata/pilot/pilot.proto

package pbpilot // import "openpitrix.io/metadata/pkg/pb/pilot"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "openpitrix.io/metadata/pkg/pb/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PilotServiceClient is the client API for PilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PilotServiceClient interface {
	GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error)
	GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error)
	GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error)
	GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error)
	GetPilotClientTLSConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotClientTLSConfig, error)
	GetFrontgateList(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateIdList, error)
	GetFrontgateConfig(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.FrontgateConfig, error)
	SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error)
	GetDroneConfig(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.DroneConfig, error)
	SetDroneConfig(ctx context.Context, in *types.SetDroneConfigRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetConfdConfig(ctx context.Context, in *types.ConfdEndpoint, opts ...grpc.CallOption) (*types.ConfdConfig, error)
	IsConfdRunning(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Bool, error)
	StartConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	StopConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterMetadata(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	DeregisterMetadata(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error)
	RegisterCmd(ctx context.Context, in *types.SubTask_RegisterCmd, opts ...grpc.CallOption) (*types.Empty, error)
	DeregisterCmd(ctx context.Context, in *types.SubTask_DeregisterCmd, opts ...grpc.CallOption) (*types.Empty, error)
	GetSubtaskStatus(ctx context.Context, in *types.SubTaskId, opts ...grpc.CallOption) (*types.SubTaskStatus, error)
	HandleSubtask(ctx context.Context, in *types.SubTaskMessage, opts ...grpc.CallOption) (*types.Empty, error)
	PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	PingFrontgate(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error)
	PingFrontgateNode(ctx context.Context, in *types.FrontgateNodeId, opts ...grpc.CallOption) (*types.Empty, error)
	PingDrone(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error)
	PingMetadataBackend(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error)
	RunCommandOnFrontgateNode(ctx context.Context, in *types.RunCommandOnFrontgateRequest, opts ...grpc.CallOption) (*types.String, error)
	RunCommandOnDrone(ctx context.Context, in *types.RunCommandOnDroneRequest, opts ...grpc.CallOption) (*types.String, error)
}

type pilotServiceClient struct {
	cc *grpc.ClientConn
}

func NewPilotServiceClient(cc *grpc.ClientConn) PilotServiceClient {
	return &pilotServiceClient{cc}
}

func (c *pilotServiceClient) GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetDroneVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error) {
	out := new(types.PilotConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetPilotClientTLSConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotClientTLSConfig, error) {
	out := new(types.PilotClientTLSConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetPilotClientTLSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateList(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.FrontgateIdList, error) {
	out := new(types.FrontgateIdList)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetFrontgateConfig(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.FrontgateConfig, error) {
	out := new(types.FrontgateConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetFrontgateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) SetFrontgateConfig(ctx context.Context, in *types.FrontgateConfig, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/SetFrontgateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetDroneConfig(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.DroneConfig, error) {
	out := new(types.DroneConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) SetDroneConfig(ctx context.Context, in *types.SetDroneConfigRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/SetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetConfdConfig(ctx context.Context, in *types.ConfdEndpoint, opts ...grpc.CallOption) (*types.ConfdConfig, error) {
	out := new(types.ConfdConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetConfdConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) IsConfdRunning(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/IsConfdRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) StartConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/StartConfd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) StopConfd(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/StopConfd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RegisterMetadata(ctx context.Context, in *types.SubTask_RegisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RegisterMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) DeregisterMetadata(ctx context.Context, in *types.SubTask_DeregisterMetadata, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/DeregisterMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RegisterCmd(ctx context.Context, in *types.SubTask_RegisterCmd, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RegisterCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) DeregisterCmd(ctx context.Context, in *types.SubTask_DeregisterCmd, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/DeregisterCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetSubtaskStatus(ctx context.Context, in *types.SubTaskId, opts ...grpc.CallOption) (*types.SubTaskStatus, error) {
	out := new(types.SubTaskStatus)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/GetSubtaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) HandleSubtask(ctx context.Context, in *types.SubTaskMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/HandleSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingPilot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingFrontgate(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingFrontgate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingFrontgateNode(ctx context.Context, in *types.FrontgateNodeId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingFrontgateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingDrone(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) PingMetadataBackend(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/PingMetadataBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RunCommandOnFrontgateNode(ctx context.Context, in *types.RunCommandOnFrontgateRequest, opts ...grpc.CallOption) (*types.String, error) {
	out := new(types.String)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RunCommandOnFrontgateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RunCommandOnDrone(ctx context.Context, in *types.RunCommandOnDroneRequest, opts ...grpc.CallOption) (*types.String, error) {
	out := new(types.String)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotService/RunCommandOnDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PilotServiceServer is the server API for PilotService service.
type PilotServiceServer interface {
	GetPilotVersion(context.Context, *types.Empty) (*types.Version, error)
	GetFrontgateVersion(context.Context, *types.FrontgateId) (*types.Version, error)
	GetDroneVersion(context.Context, *types.DroneEndpoint) (*types.Version, error)
	GetPilotConfig(context.Context, *types.Empty) (*types.PilotConfig, error)
	GetPilotClientTLSConfig(context.Context, *types.Empty) (*types.PilotClientTLSConfig, error)
	GetFrontgateList(context.Context, *types.Empty) (*types.FrontgateIdList, error)
	GetFrontgateConfig(context.Context, *types.FrontgateId) (*types.FrontgateConfig, error)
	SetFrontgateConfig(context.Context, *types.FrontgateConfig) (*types.Empty, error)
	GetDroneConfig(context.Context, *types.DroneEndpoint) (*types.DroneConfig, error)
	SetDroneConfig(context.Context, *types.SetDroneConfigRequest) (*types.Empty, error)
	GetConfdConfig(context.Context, *types.ConfdEndpoint) (*types.ConfdConfig, error)
	IsConfdRunning(context.Context, *types.DroneEndpoint) (*types.Bool, error)
	StartConfd(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	StopConfd(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	RegisterMetadata(context.Context, *types.SubTask_RegisterMetadata) (*types.Empty, error)
	DeregisterMetadata(context.Context, *types.SubTask_DeregisterMetadata) (*types.Empty, error)
	RegisterCmd(context.Context, *types.SubTask_RegisterCmd) (*types.Empty, error)
	DeregisterCmd(context.Context, *types.SubTask_DeregisterCmd) (*types.Empty, error)
	GetSubtaskStatus(context.Context, *types.SubTaskId) (*types.SubTaskStatus, error)
	HandleSubtask(context.Context, *types.SubTaskMessage) (*types.Empty, error)
	PingPilot(context.Context, *types.Empty) (*types.Empty, error)
	PingFrontgate(context.Context, *types.FrontgateId) (*types.Empty, error)
	PingFrontgateNode(context.Context, *types.FrontgateNodeId) (*types.Empty, error)
	PingDrone(context.Context, *types.DroneEndpoint) (*types.Empty, error)
	PingMetadataBackend(context.Context, *types.FrontgateId) (*types.Empty, error)
	RunCommandOnFrontgateNode(context.Context, *types.RunCommandOnFrontgateRequest) (*types.String, error)
	RunCommandOnDrone(context.Context, *types.RunCommandOnDroneRequest) (*types.String, error)
}

func RegisterPilotServiceServer(s *grpc.Server, srv PilotServiceServer) {
	s.RegisterService(&_PilotService_serviceDesc, srv)
}

func _PilotService_GetPilotVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotVersion(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateVersion(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetDroneVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetDroneVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetDroneVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetDroneVersion(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetPilotConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetPilotClientTLSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetPilotClientTLSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetPilotClientTLSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetPilotClientTLSConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateList(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetFrontgateConfig(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_SetFrontgateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).SetFrontgateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/SetFrontgateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).SetFrontgateConfig(ctx, req.(*types.FrontgateConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetDroneConfig(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_SetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SetDroneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).SetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/SetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).SetDroneConfig(ctx, req.(*types.SetDroneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetConfdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ConfdEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetConfdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetConfdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetConfdConfig(ctx, req.(*types.ConfdEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_IsConfdRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).IsConfdRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/IsConfdRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).IsConfdRunning(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_StartConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).StartConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/StartConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).StartConfd(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_StopConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).StopConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/StopConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).StopConfd(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RegisterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_RegisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RegisterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RegisterMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RegisterMetadata(ctx, req.(*types.SubTask_RegisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_DeregisterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_DeregisterMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).DeregisterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/DeregisterMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).DeregisterMetadata(ctx, req.(*types.SubTask_DeregisterMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RegisterCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_RegisterCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RegisterCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RegisterCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RegisterCmd(ctx, req.(*types.SubTask_RegisterCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_DeregisterCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTask_DeregisterCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).DeregisterCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/DeregisterCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).DeregisterCmd(ctx, req.(*types.SubTask_DeregisterCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetSubtaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetSubtaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/GetSubtaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetSubtaskStatus(ctx, req.(*types.SubTaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_HandleSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).HandleSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/HandleSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).HandleSubtask(ctx, req.(*types.SubTaskMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingPilot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingPilot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingPilot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingPilot(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingFrontgate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingFrontgate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingFrontgate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingFrontgate(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingFrontgateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateNodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingFrontgateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingFrontgateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingFrontgateNode(ctx, req.(*types.FrontgateNodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingDrone(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_PingMetadataBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).PingMetadataBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/PingMetadataBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).PingMetadataBackend(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RunCommandOnFrontgateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RunCommandOnFrontgateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RunCommandOnFrontgateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RunCommandOnFrontgateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RunCommandOnFrontgateNode(ctx, req.(*types.RunCommandOnFrontgateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RunCommandOnDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RunCommandOnDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RunCommandOnDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotService/RunCommandOnDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RunCommandOnDrone(ctx, req.(*types.RunCommandOnDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PilotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pilot.PilotService",
	HandlerType: (*PilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPilotVersion",
			Handler:    _PilotService_GetPilotVersion_Handler,
		},
		{
			MethodName: "GetFrontgateVersion",
			Handler:    _PilotService_GetFrontgateVersion_Handler,
		},
		{
			MethodName: "GetDroneVersion",
			Handler:    _PilotService_GetDroneVersion_Handler,
		},
		{
			MethodName: "GetPilotConfig",
			Handler:    _PilotService_GetPilotConfig_Handler,
		},
		{
			MethodName: "GetPilotClientTLSConfig",
			Handler:    _PilotService_GetPilotClientTLSConfig_Handler,
		},
		{
			MethodName: "GetFrontgateList",
			Handler:    _PilotService_GetFrontgateList_Handler,
		},
		{
			MethodName: "GetFrontgateConfig",
			Handler:    _PilotService_GetFrontgateConfig_Handler,
		},
		{
			MethodName: "SetFrontgateConfig",
			Handler:    _PilotService_SetFrontgateConfig_Handler,
		},
		{
			MethodName: "GetDroneConfig",
			Handler:    _PilotService_GetDroneConfig_Handler,
		},
		{
			MethodName: "SetDroneConfig",
			Handler:    _PilotService_SetDroneConfig_Handler,
		},
		{
			MethodName: "GetConfdConfig",
			Handler:    _PilotService_GetConfdConfig_Handler,
		},
		{
			MethodName: "IsConfdRunning",
			Handler:    _PilotService_IsConfdRunning_Handler,
		},
		{
			MethodName: "StartConfd",
			Handler:    _PilotService_StartConfd_Handler,
		},
		{
			MethodName: "StopConfd",
			Handler:    _PilotService_StopConfd_Handler,
		},
		{
			MethodName: "RegisterMetadata",
			Handler:    _PilotService_RegisterMetadata_Handler,
		},
		{
			MethodName: "DeregisterMetadata",
			Handler:    _PilotService_DeregisterMetadata_Handler,
		},
		{
			MethodName: "RegisterCmd",
			Handler:    _PilotService_RegisterCmd_Handler,
		},
		{
			MethodName: "DeregisterCmd",
			Handler:    _PilotService_DeregisterCmd_Handler,
		},
		{
			MethodName: "GetSubtaskStatus",
			Handler:    _PilotService_GetSubtaskStatus_Handler,
		},
		{
			MethodName: "HandleSubtask",
			Handler:    _PilotService_HandleSubtask_Handler,
		},
		{
			MethodName: "PingPilot",
			Handler:    _PilotService_PingPilot_Handler,
		},
		{
			MethodName: "PingFrontgate",
			Handler:    _PilotService_PingFrontgate_Handler,
		},
		{
			MethodName: "PingFrontgateNode",
			Handler:    _PilotService_PingFrontgateNode_Handler,
		},
		{
			MethodName: "PingDrone",
			Handler:    _PilotService_PingDrone_Handler,
		},
		{
			MethodName: "PingMetadataBackend",
			Handler:    _PilotService_PingMetadataBackend_Handler,
		},
		{
			MethodName: "RunCommandOnFrontgateNode",
			Handler:    _PilotService_RunCommandOnFrontgateNode_Handler,
		},
		{
			MethodName: "RunCommandOnDrone",
			Handler:    _PilotService_RunCommandOnDrone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata/pilot/pilot.proto",
}

// PilotServiceForFrontgateClient is the client API for PilotServiceForFrontgate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PilotServiceForFrontgateClient interface {
	GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error)
	GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error)
	GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error)
	PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error)
	ReportSubTaskStatus(ctx context.Context, in *types.SubTaskStatus, opts ...grpc.CallOption) (*types.Empty, error)
	FrontgateChannel(ctx context.Context, opts ...grpc.CallOption) (PilotServiceForFrontgate_FrontgateChannelClient, error)
}

type pilotServiceForFrontgateClient struct {
	cc *grpc.ClientConn
}

func NewPilotServiceForFrontgateClient(cc *grpc.ClientConn) PilotServiceForFrontgateClient {
	return &pilotServiceForFrontgateClient{cc}
}

func (c *pilotServiceForFrontgateClient) GetPilotVersion(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetPilotVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetFrontgateVersion(ctx context.Context, in *types.FrontgateId, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetFrontgateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetDroneVersion(ctx context.Context, in *types.DroneEndpoint, opts ...grpc.CallOption) (*types.Version, error) {
	out := new(types.Version)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetDroneVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) PingPilot(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/PingPilot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) GetPilotConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.PilotConfig, error) {
	out := new(types.PilotConfig)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/GetPilotConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) ReportSubTaskStatus(ctx context.Context, in *types.SubTaskStatus, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/metadata.pilot.PilotServiceForFrontgate/ReportSubTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceForFrontgateClient) FrontgateChannel(ctx context.Context, opts ...grpc.CallOption) (PilotServiceForFrontgate_FrontgateChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PilotServiceForFrontgate_serviceDesc.Streams[0], "/metadata.pilot.PilotServiceForFrontgate/FrontgateChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &pilotServiceForFrontgateFrontgateChannelClient{stream}
	return x, nil
}

type PilotServiceForFrontgate_FrontgateChannelClient interface {
	Send(*types.Bytes) error
	Recv() (*types.Bytes, error)
	grpc.ClientStream
}

type pilotServiceForFrontgateFrontgateChannelClient struct {
	grpc.ClientStream
}

func (x *pilotServiceForFrontgateFrontgateChannelClient) Send(m *types.Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pilotServiceForFrontgateFrontgateChannelClient) Recv() (*types.Bytes, error) {
	m := new(types.Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PilotServiceForFrontgateServer is the server API for PilotServiceForFrontgate service.
type PilotServiceForFrontgateServer interface {
	GetPilotVersion(context.Context, *types.Empty) (*types.Version, error)
	GetFrontgateVersion(context.Context, *types.FrontgateId) (*types.Version, error)
	GetDroneVersion(context.Context, *types.DroneEndpoint) (*types.Version, error)
	PingPilot(context.Context, *types.Empty) (*types.Empty, error)
	GetPilotConfig(context.Context, *types.Empty) (*types.PilotConfig, error)
	ReportSubTaskStatus(context.Context, *types.SubTaskStatus) (*types.Empty, error)
	FrontgateChannel(PilotServiceForFrontgate_FrontgateChannelServer) error
}

func RegisterPilotServiceForFrontgateServer(s *grpc.Server, srv PilotServiceForFrontgateServer) {
	s.RegisterService(&_PilotServiceForFrontgate_serviceDesc, srv)
}

func _PilotServiceForFrontgate_GetPilotVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetPilotVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetPilotVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetPilotVersion(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetFrontgateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FrontgateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetFrontgateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetFrontgateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetFrontgateVersion(ctx, req.(*types.FrontgateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetDroneVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DroneEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetDroneVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetDroneVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetDroneVersion(ctx, req.(*types.DroneEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_PingPilot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).PingPilot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/PingPilot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).PingPilot(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_GetPilotConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).GetPilotConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/GetPilotConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).GetPilotConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_ReportSubTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubTaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceForFrontgateServer).ReportSubTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pilot.PilotServiceForFrontgate/ReportSubTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceForFrontgateServer).ReportSubTaskStatus(ctx, req.(*types.SubTaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotServiceForFrontgate_FrontgateChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PilotServiceForFrontgateServer).FrontgateChannel(&pilotServiceForFrontgateFrontgateChannelServer{stream})
}

type PilotServiceForFrontgate_FrontgateChannelServer interface {
	Send(*types.Bytes) error
	Recv() (*types.Bytes, error)
	grpc.ServerStream
}

type pilotServiceForFrontgateFrontgateChannelServer struct {
	grpc.ServerStream
}

func (x *pilotServiceForFrontgateFrontgateChannelServer) Send(m *types.Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pilotServiceForFrontgateFrontgateChannelServer) Recv() (*types.Bytes, error) {
	m := new(types.Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PilotServiceForFrontgate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pilot.PilotServiceForFrontgate",
	HandlerType: (*PilotServiceForFrontgateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPilotVersion",
			Handler:    _PilotServiceForFrontgate_GetPilotVersion_Handler,
		},
		{
			MethodName: "GetFrontgateVersion",
			Handler:    _PilotServiceForFrontgate_GetFrontgateVersion_Handler,
		},
		{
			MethodName: "GetDroneVersion",
			Handler:    _PilotServiceForFrontgate_GetDroneVersion_Handler,
		},
		{
			MethodName: "PingPilot",
			Handler:    _PilotServiceForFrontgate_PingPilot_Handler,
		},
		{
			MethodName: "GetPilotConfig",
			Handler:    _PilotServiceForFrontgate_GetPilotConfig_Handler,
		},
		{
			MethodName: "ReportSubTaskStatus",
			Handler:    _PilotServiceForFrontgate_ReportSubTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrontgateChannel",
			Handler:       _PilotServiceForFrontgate_FrontgateChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metadata/pilot/pilot.proto",
}

func init() { proto.RegisterFile("metadata/pilot/pilot.proto", fileDescriptor_pilot_e668c38dcf8f9c50) }

var fileDescriptor_pilot_e668c38dcf8f9c50 = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xdf, 0x4e, 0xd4, 0x40,
	0x14, 0xc6, 0x43, 0x62, 0x4c, 0x38, 0xca, 0xba, 0x0c, 0x2a, 0xb2, 0x04, 0xbc, 0x50, 0x12, 0xe2,
	0x9f, 0xc5, 0xe0, 0x95, 0xf1, 0x8a, 0x5d, 0xfe, 0x58, 0x59, 0x90, 0xb4, 0x88, 0x89, 0x37, 0x66,
	0x96, 0x39, 0xd4, 0xc9, 0x6e, 0x67, 0xea, 0x74, 0x6a, 0xe4, 0x11, 0x7c, 0x0d, 0x9f, 0xd4, 0x74,
	0xda, 0xee, 0x76, 0xdb, 0x9d, 0x36, 0x01, 0xaf, 0xbc, 0x59, 0x92, 0xf9, 0xbe, 0xf3, 0xeb, 0x77,
	0x66, 0xda, 0xc3, 0x40, 0x27, 0x40, 0x4d, 0x19, 0xd5, 0x74, 0x27, 0xe4, 0x63, 0xa9, 0xd3, 0xdf,
	0x6e, 0xa8, 0xa4, 0x96, 0xa4, 0x95, 0x6b, 0x5d, 0xb3, 0xda, 0x99, 0x7a, 0xf5, 0x75, 0x88, 0x51,
	0xfa, 0x9b, 0x7a, 0x2b, 0xda, 0xa5, 0x14, 0x57, 0xcc, 0xa2, 0x31, 0x25, 0x05, 0x66, 0xda, 0x66,
	0x49, 0xbb, 0x52, 0x52, 0x68, 0x9f, 0x6a, 0xb4, 0xd4, 0x16, 0xf2, 0x75, 0xd6, 0xca, 0x79, 0x68,
	0x34, 0x4a, 0xa5, 0xdd, 0x3f, 0x6d, 0xb8, 0x7f, 0x96, 0x58, 0x3d, 0x54, 0x3f, 0xf9, 0x25, 0x92,
	0x3d, 0x78, 0x70, 0x84, 0xda, 0x2c, 0x5d, 0xa0, 0x8a, 0xb8, 0x14, 0xe4, 0x51, 0x77, 0xd2, 0x5f,
	0xda, 0xc9, 0x41, 0x10, 0xea, 0xeb, 0xce, 0x6a, 0x79, 0x39, 0xf7, 0x1f, 0xc3, 0xca, 0x11, 0xea,
	0xc3, 0x3c, 0x60, 0xbe, 0xbc, 0x5e, 0xf6, 0x4f, 0x1c, 0x0e, 0xb3, 0xc3, 0x1c, 0x93, 0x67, 0x3f,
	0xd9, 0x89, 0x7c, 0x69, 0xa3, 0xec, 0x35, 0xea, 0x81, 0x60, 0xa1, 0xe4, 0x42, 0xdb, 0x51, 0xfb,
	0xd0, 0xca, 0x5b, 0xeb, 0x4b, 0x71, 0xc5, 0x7d, 0x5b, 0x67, 0x95, 0xa4, 0xc5, 0x9a, 0x0b, 0x58,
	0x9d, 0x50, 0xc6, 0x1c, 0x85, 0x3e, 0x1f, 0x78, 0xf5, 0xb8, 0xe7, 0xf3, 0x71, 0xa5, 0xe2, 0x8f,
	0xd0, 0x2e, 0xee, 0xda, 0x80, 0x47, 0xda, 0x06, 0x7c, 0x5a, 0xb3, 0x93, 0xa6, 0xce, 0x05, 0x52,
	0x64, 0x65, 0x4f, 0xa8, 0x3d, 0x00, 0x3b, 0x33, 0xab, 0x1e, 0x00, 0xf1, 0xaa, 0xcc, 0xa6, 0xb2,
	0xce, 0xfc, 0x16, 0xc8, 0xc0, 0x9c, 0x85, 0x39, 0xb8, 0x8c, 0xd4, 0x70, 0xaa, 0xeb, 0x73, 0xe5,
	0xac, 0xf6, 0x14, 0x5a, 0xde, 0x2c, 0x6d, 0xab, 0x6c, 0x9f, 0xd5, 0x5d, 0xfc, 0x11, 0x63, 0xa4,
	0xeb, 0xd3, 0x25, 0x56, 0x66, 0x4b, 0x67, 0x44, 0x7b, 0xba, 0x62, 0xed, 0x01, 0xb4, 0x9c, 0xc8,
	0x2c, 0xb8, 0xb1, 0x10, 0x5c, 0x34, 0xf6, 0xfa, 0xb0, 0x2c, 0xf7, 0xa4, 0x1c, 0x93, 0x1e, 0x80,
	0xa7, 0xa9, 0x4a, 0x63, 0x35, 0x21, 0x2c, 0x8d, 0xed, 0xc1, 0xa2, 0xa7, 0x65, 0x78, 0x1b, 0x84,
	0x07, 0x6d, 0x17, 0x7d, 0x1e, 0x69, 0x54, 0x27, 0x99, 0x4e, 0xb6, 0x2b, 0xbb, 0x1d, 0x0f, 0xcf,
	0x69, 0x34, 0xfa, 0x56, 0x76, 0xda, 0xa0, 0x5f, 0x80, 0xec, 0xa3, 0x2a, 0x63, 0x5f, 0xd8, 0xb0,
	0x55, 0xaf, 0x0d, 0xec, 0xc0, 0xbd, 0x3c, 0x43, 0x3f, 0x60, 0xe4, 0x59, 0x53, 0xd0, 0x7e, 0xc0,
	0x6c, 0xa8, 0x13, 0x58, 0x9a, 0x3e, 0x37, 0x81, 0x6d, 0x35, 0xc7, 0xab, 0xc1, 0x0d, 0xcc, 0xf7,
	0xee, 0xc5, 0xc3, 0x64, 0x1a, 0x7b, 0x9a, 0xea, 0x38, 0x22, 0x6b, 0x16, 0xa2, 0xc3, 0x3a, 0x1b,
	0x16, 0x29, 0xab, 0x3c, 0x84, 0xa5, 0x0f, 0x54, 0xb0, 0x31, 0x66, 0x40, 0xb2, 0x69, 0xf1, 0x9f,
	0x60, 0x14, 0x51, 0x1f, 0x6d, 0xa9, 0xde, 0xc1, 0xe2, 0x19, 0x17, 0xbe, 0x99, 0x50, 0xb6, 0xf1,
	0x63, 0x29, 0xed, 0xc3, 0x52, 0x52, 0x3a, 0x19, 0x00, 0xf5, 0xf3, 0xc6, 0x02, 0x39, 0x86, 0xe5,
	0x19, 0xc8, 0xa9, 0x64, 0x58, 0x33, 0x64, 0x12, 0xd9, 0x0e, 0xdb, 0x4b, 0x9b, 0x31, 0xaf, 0xf5,
	0x0d, 0xdf, 0x76, 0x07, 0x56, 0x12, 0x44, 0xfe, 0x9a, 0xf5, 0xe8, 0xe5, 0x08, 0x05, 0xbb, 0x51,
	0x6b, 0x14, 0xd6, 0xdc, 0x58, 0xf4, 0x65, 0x10, 0x50, 0xc1, 0x3e, 0x89, 0xd9, 0x16, 0x5f, 0x95,
	0x6b, 0xe6, 0x5a, 0xf3, 0xb1, 0xf5, 0xb8, 0x72, 0xb8, 0x5a, 0x25, 0x73, 0xe5, 0x33, 0x2c, 0x17,
	0xeb, 0xd2, 0xc6, 0xb7, 0xeb, 0xd0, 0xc6, 0xd2, 0x80, 0xdd, 0xfd, 0x7d, 0x07, 0x9e, 0x14, 0x2f,
	0x09, 0x87, 0x52, 0x4d, 0x4f, 0xf9, 0x3f, 0xbe, 0x30, 0xdc, 0xe2, 0x63, 0xf8, 0x37, 0x77, 0x8d,
	0x63, 0x58, 0x71, 0x31, 0x94, 0x4a, 0xcf, 0x7e, 0xec, 0xf5, 0xb3, 0xc0, 0x1e, 0xa9, 0x3d, 0xfd,
	0xe7, 0xfc, 0x9d, 0x0a, 0x81, 0xe3, 0x6a, 0xa8, 0xde, 0xb5, 0xc6, 0x39, 0x04, 0xb3, 0xbc, 0xbd,
	0xf0, 0x66, 0xa1, 0xf7, 0xfa, 0xeb, 0x4b, 0x19, 0xa2, 0x08, 0xb9, 0x56, 0xfc, 0x57, 0x97, 0xcb,
	0x9d, 0xe9, 0xbd, 0x78, 0xe4, 0xef, 0x84, 0xc3, 0xf4, 0xe2, 0xf9, 0x3e, 0x1c, 0x9a, 0xbf, 0xc3,
	0xbb, 0xe6, 0x9a, 0xf9, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x1a, 0xc2, 0x32, 0x3f,
	0x0b, 0x00, 0x00,
}
