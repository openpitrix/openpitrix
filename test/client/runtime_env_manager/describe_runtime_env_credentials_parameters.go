// Code generated by go-swagger; DO NOT EDIT.

package runtime_env_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDescribeRuntimeEnvCredentialsParams creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized.
func NewDescribeRuntimeEnvCredentialsParams() *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithTimeout creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeRuntimeEnvCredentialsParamsWithTimeout(timeout time.Duration) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		timeout: timeout,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithContext creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeRuntimeEnvCredentialsParamsWithContext(ctx context.Context) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{

		Context: ctx,
	}
}

// NewDescribeRuntimeEnvCredentialsParamsWithHTTPClient creates a new DescribeRuntimeEnvCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeRuntimeEnvCredentialsParamsWithHTTPClient(client *http.Client) *DescribeRuntimeEnvCredentialsParams {
	var ()
	return &DescribeRuntimeEnvCredentialsParams{
		HTTPClient: client,
	}
}

/*DescribeRuntimeEnvCredentialsParams contains all the parameters to send to the API endpoint
for the describe runtime env credentials operation typically these are written to a http.Request
*/
type DescribeRuntimeEnvCredentialsParams struct {

	/*LimitValue
	  The uint32 value.

	*/
	LimitValue *int64
	/*OffsetValue
	  The uint32 value.

	*/
	OffsetValue *int64
	/*Owners*/
	Owners []string
	/*RuntimeEnvCredentialIds*/
	RuntimeEnvCredentialIds []string
	/*SearchWord*/
	SearchWord *string
	/*Statuses*/
	Statuses []string
	/*VerboseValue
	  The uint32 value.

	*/
	VerboseValue *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithTimeout(timeout time.Duration) *DescribeRuntimeEnvCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithContext(ctx context.Context) *DescribeRuntimeEnvCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithHTTPClient(client *http.Client) *DescribeRuntimeEnvCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimitValue adds the limitValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithLimitValue(limitValue *int64) *DescribeRuntimeEnvCredentialsParams {
	o.SetLimitValue(limitValue)
	return o
}

// SetLimitValue adds the limitValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetLimitValue(limitValue *int64) {
	o.LimitValue = limitValue
}

// WithOffsetValue adds the offsetValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithOffsetValue(offsetValue *int64) *DescribeRuntimeEnvCredentialsParams {
	o.SetOffsetValue(offsetValue)
	return o
}

// SetOffsetValue adds the offsetValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetOffsetValue(offsetValue *int64) {
	o.OffsetValue = offsetValue
}

// WithOwners adds the owners to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithOwners(owners []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetOwners(owners)
	return o
}

// SetOwners adds the owners to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetOwners(owners []string) {
	o.Owners = owners
}

// WithRuntimeEnvCredentialIds adds the runtimeEnvCredentialIds to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithRuntimeEnvCredentialIds(runtimeEnvCredentialIds []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetRuntimeEnvCredentialIds(runtimeEnvCredentialIds)
	return o
}

// SetRuntimeEnvCredentialIds adds the runtimeEnvCredentialIds to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetRuntimeEnvCredentialIds(runtimeEnvCredentialIds []string) {
	o.RuntimeEnvCredentialIds = runtimeEnvCredentialIds
}

// WithSearchWord adds the searchWord to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithSearchWord(searchWord *string) *DescribeRuntimeEnvCredentialsParams {
	o.SetSearchWord(searchWord)
	return o
}

// SetSearchWord adds the searchWord to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetSearchWord(searchWord *string) {
	o.SearchWord = searchWord
}

// WithStatuses adds the statuses to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithStatuses(statuses []string) *DescribeRuntimeEnvCredentialsParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WithVerboseValue adds the verboseValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) WithVerboseValue(verboseValue *int64) *DescribeRuntimeEnvCredentialsParams {
	o.SetVerboseValue(verboseValue)
	return o
}

// SetVerboseValue adds the verboseValue to the describe runtime env credentials params
func (o *DescribeRuntimeEnvCredentialsParams) SetVerboseValue(verboseValue *int64) {
	o.VerboseValue = verboseValue
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeRuntimeEnvCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LimitValue != nil {

		// query param limit.value
		var qrLimitValue int64
		if o.LimitValue != nil {
			qrLimitValue = *o.LimitValue
		}
		qLimitValue := swag.FormatInt64(qrLimitValue)
		if qLimitValue != "" {
			if err := r.SetQueryParam("limit.value", qLimitValue); err != nil {
				return err
			}
		}

	}

	if o.OffsetValue != nil {

		// query param offset.value
		var qrOffsetValue int64
		if o.OffsetValue != nil {
			qrOffsetValue = *o.OffsetValue
		}
		qOffsetValue := swag.FormatInt64(qrOffsetValue)
		if qOffsetValue != "" {
			if err := r.SetQueryParam("offset.value", qOffsetValue); err != nil {
				return err
			}
		}

	}

	valuesOwners := o.Owners

	joinedOwners := swag.JoinByFormat(valuesOwners, "")
	// query array param owners
	if err := r.SetQueryParam("owners", joinedOwners...); err != nil {
		return err
	}

	valuesRuntimeEnvCredentialIds := o.RuntimeEnvCredentialIds

	joinedRuntimeEnvCredentialIds := swag.JoinByFormat(valuesRuntimeEnvCredentialIds, "")
	// query array param runtime_env_credential_ids
	if err := r.SetQueryParam("runtime_env_credential_ids", joinedRuntimeEnvCredentialIds...); err != nil {
		return err
	}

	if o.SearchWord != nil {

		// query param search_word
		var qrSearchWord string
		if o.SearchWord != nil {
			qrSearchWord = *o.SearchWord
		}
		qSearchWord := qrSearchWord
		if qSearchWord != "" {
			if err := r.SetQueryParam("search_word", qSearchWord); err != nil {
				return err
			}
		}

	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if o.VerboseValue != nil {

		// query param verbose.value
		var qrVerboseValue int64
		if o.VerboseValue != nil {
			qrVerboseValue = *o.VerboseValue
		}
		qVerboseValue := swag.FormatInt64(qrVerboseValue)
		if qVerboseValue != "" {
			if err := r.SetQueryParam("verbose.value", qVerboseValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
