// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drone.proto

/*
Package openpitrix_drone is a generated protocol buffer package.

It is generated from these files:
	drone.proto

It has these top-level messages:
	Info
	ConfdConfig
	ConfdBackendConfig
	StartConfdRequest
	ConfdStatus
	SubscribeCmdStatusRequest
	SubscribeCmdStatusResponse
	GetRegisterCmdStatusRequest
	GetRegisterCmdStatusResponse
	GetTemplateFilesRequest
	GetTemplateFilesResponse
	GetValuesRequest
	GetValuesResponse
	Empty
*/
package openpitrix_drone

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Info struct {
	DroneIp            string              `protobuf:"bytes,1,opt,name=drone_ip,json=droneIp" json:"drone_ip,omitempty"`
	ConfdConfig        *ConfdConfig        `protobuf:"bytes,2,opt,name=confd_config,json=confdConfig" json:"confd_config,omitempty"`
	ConfdBackendConfig *ConfdBackendConfig `protobuf:"bytes,3,opt,name=confd_backend_config,json=confdBackendConfig" json:"confd_backend_config,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Info) GetDroneIp() string {
	if m != nil {
		return m.DroneIp
	}
	return ""
}

func (m *Info) GetConfdConfig() *ConfdConfig {
	if m != nil {
		return m.ConfdConfig
	}
	return nil
}

func (m *Info) GetConfdBackendConfig() *ConfdBackendConfig {
	if m != nil {
		return m.ConfdBackendConfig
	}
	return nil
}

// See https://godoc.org/openpitrix.io/libconfd#Config
type ConfdConfig struct {
	ConfDir  string `protobuf:"bytes,1,opt,name=conf_dir,json=confDir" json:"conf_dir,omitempty"`
	Interval int32  `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	Noop     bool   `protobuf:"varint,3,opt,name=noop" json:"noop,omitempty"`
	Prefix   string `protobuf:"bytes,4,opt,name=prefix" json:"prefix,omitempty"`
	SyncOnly bool   `protobuf:"varint,5,opt,name=sync_only,json=syncOnly" json:"sync_only,omitempty"`
	LogLevel string `protobuf:"bytes,6,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
}

func (m *ConfdConfig) Reset()                    { *m = ConfdConfig{} }
func (m *ConfdConfig) String() string            { return proto.CompactTextString(m) }
func (*ConfdConfig) ProtoMessage()               {}
func (*ConfdConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfdConfig) GetConfDir() string {
	if m != nil {
		return m.ConfDir
	}
	return ""
}

func (m *ConfdConfig) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ConfdConfig) GetNoop() bool {
	if m != nil {
		return m.Noop
	}
	return false
}

func (m *ConfdConfig) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ConfdConfig) GetSyncOnly() bool {
	if m != nil {
		return m.SyncOnly
	}
	return false
}

func (m *ConfdConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

// See https://godoc.org/openpitrix.io/libconfd#BackendConfig
type ConfdBackendConfig struct {
	Type         string   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Host         []string `protobuf:"bytes,2,rep,name=host" json:"host,omitempty"`
	Username     string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Password     string   `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	ClientCaKeys string   `protobuf:"bytes,5,opt,name=client_ca_keys,json=clientCaKeys" json:"client_ca_keys,omitempty"`
	ClientCert   string   `protobuf:"bytes,6,opt,name=client_cert,json=clientCert" json:"client_cert,omitempty"`
	ClientKey    string   `protobuf:"bytes,7,opt,name=client_key,json=clientKey" json:"client_key,omitempty"`
}

func (m *ConfdBackendConfig) Reset()                    { *m = ConfdBackendConfig{} }
func (m *ConfdBackendConfig) String() string            { return proto.CompactTextString(m) }
func (*ConfdBackendConfig) ProtoMessage()               {}
func (*ConfdBackendConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfdBackendConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ConfdBackendConfig) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *ConfdBackendConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ConfdBackendConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ConfdBackendConfig) GetClientCaKeys() string {
	if m != nil {
		return m.ClientCaKeys
	}
	return ""
}

func (m *ConfdBackendConfig) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *ConfdBackendConfig) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

type StartConfdRequest struct {
	ConfdConfig        *ConfdConfig        `protobuf:"bytes,1,opt,name=confd_config,json=confdConfig" json:"confd_config,omitempty"`
	ConfdBackendConfig *ConfdBackendConfig `protobuf:"bytes,2,opt,name=confd_backend_config,json=confdBackendConfig" json:"confd_backend_config,omitempty"`
}

func (m *StartConfdRequest) Reset()                    { *m = StartConfdRequest{} }
func (m *StartConfdRequest) String() string            { return proto.CompactTextString(m) }
func (*StartConfdRequest) ProtoMessage()               {}
func (*StartConfdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartConfdRequest) GetConfdConfig() *ConfdConfig {
	if m != nil {
		return m.ConfdConfig
	}
	return nil
}

func (m *StartConfdRequest) GetConfdBackendConfig() *ConfdBackendConfig {
	if m != nil {
		return m.ConfdBackendConfig
	}
	return nil
}

type ConfdStatus struct {
	ProcessId int32                      `protobuf:"varint,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Status    string                     `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	UpTime    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=up_time,json=upTime" json:"up_time,omitempty"`
}

func (m *ConfdStatus) Reset()                    { *m = ConfdStatus{} }
func (m *ConfdStatus) String() string            { return proto.CompactTextString(m) }
func (*ConfdStatus) ProtoMessage()               {}
func (*ConfdStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfdStatus) GetProcessId() int32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *ConfdStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ConfdStatus) GetUpTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpTime
	}
	return nil
}

type SubscribeCmdStatusRequest struct {
	SubtaskId string `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
}

func (m *SubscribeCmdStatusRequest) Reset()                    { *m = SubscribeCmdStatusRequest{} }
func (m *SubscribeCmdStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeCmdStatusRequest) ProtoMessage()               {}
func (*SubscribeCmdStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SubscribeCmdStatusRequest) GetSubtaskId() string {
	if m != nil {
		return m.SubtaskId
	}
	return ""
}

type SubscribeCmdStatusResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *SubscribeCmdStatusResponse) Reset()                    { *m = SubscribeCmdStatusResponse{} }
func (m *SubscribeCmdStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeCmdStatusResponse) ProtoMessage()               {}
func (*SubscribeCmdStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SubscribeCmdStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetRegisterCmdStatusRequest struct {
	SubtaskId string `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId" json:"subtask_id,omitempty"`
}

func (m *GetRegisterCmdStatusRequest) Reset()                    { *m = GetRegisterCmdStatusRequest{} }
func (m *GetRegisterCmdStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRegisterCmdStatusRequest) ProtoMessage()               {}
func (*GetRegisterCmdStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetRegisterCmdStatusRequest) GetSubtaskId() string {
	if m != nil {
		return m.SubtaskId
	}
	return ""
}

type GetRegisterCmdStatusResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *GetRegisterCmdStatusResponse) Reset()                    { *m = GetRegisterCmdStatusResponse{} }
func (m *GetRegisterCmdStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRegisterCmdStatusResponse) ProtoMessage()               {}
func (*GetRegisterCmdStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetRegisterCmdStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetTemplateFilesRequest struct {
	Regexp string `protobuf:"bytes,1,opt,name=regexp" json:"regexp,omitempty"`
}

func (m *GetTemplateFilesRequest) Reset()                    { *m = GetTemplateFilesRequest{} }
func (m *GetTemplateFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTemplateFilesRequest) ProtoMessage()               {}
func (*GetTemplateFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTemplateFilesRequest) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

type GetTemplateFilesResponse struct {
	Files []string `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *GetTemplateFilesResponse) Reset()                    { *m = GetTemplateFilesResponse{} }
func (m *GetTemplateFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTemplateFilesResponse) ProtoMessage()               {}
func (*GetTemplateFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetTemplateFilesResponse) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type GetValuesRequest struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *GetValuesRequest) Reset()                    { *m = GetValuesRequest{} }
func (m *GetValuesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetValuesRequest) ProtoMessage()               {}
func (*GetValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetValuesRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetValuesResponse struct {
	Values map[string]string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetValuesResponse) Reset()                    { *m = GetValuesResponse{} }
func (m *GetValuesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetValuesResponse) ProtoMessage()               {}
func (*GetValuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetValuesResponse) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Info)(nil), "openpitrix.drone.Info")
	proto.RegisterType((*ConfdConfig)(nil), "openpitrix.drone.ConfdConfig")
	proto.RegisterType((*ConfdBackendConfig)(nil), "openpitrix.drone.ConfdBackendConfig")
	proto.RegisterType((*StartConfdRequest)(nil), "openpitrix.drone.StartConfdRequest")
	proto.RegisterType((*ConfdStatus)(nil), "openpitrix.drone.ConfdStatus")
	proto.RegisterType((*SubscribeCmdStatusRequest)(nil), "openpitrix.drone.SubscribeCmdStatusRequest")
	proto.RegisterType((*SubscribeCmdStatusResponse)(nil), "openpitrix.drone.SubscribeCmdStatusResponse")
	proto.RegisterType((*GetRegisterCmdStatusRequest)(nil), "openpitrix.drone.GetRegisterCmdStatusRequest")
	proto.RegisterType((*GetRegisterCmdStatusResponse)(nil), "openpitrix.drone.GetRegisterCmdStatusResponse")
	proto.RegisterType((*GetTemplateFilesRequest)(nil), "openpitrix.drone.GetTemplateFilesRequest")
	proto.RegisterType((*GetTemplateFilesResponse)(nil), "openpitrix.drone.GetTemplateFilesResponse")
	proto.RegisterType((*GetValuesRequest)(nil), "openpitrix.drone.GetValuesRequest")
	proto.RegisterType((*GetValuesResponse)(nil), "openpitrix.drone.GetValuesResponse")
	proto.RegisterType((*Empty)(nil), "openpitrix.drone.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DroneService service

type DroneServiceClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error)
	GetConfdConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdConfig, error)
	GetBackendConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdBackendConfig, error)
	StartConfd(ctx context.Context, in *StartConfdRequest, opts ...grpc.CallOption) (*Empty, error)
	StopConfd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetConfdStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdStatus, error)
	GetTemplateFiles(ctx context.Context, in *GetTemplateFilesRequest, opts ...grpc.CallOption) (*GetTemplateFilesResponse, error)
	GetValues(ctx context.Context, in *GetValuesRequest, opts ...grpc.CallOption) (*GetValuesResponse, error)
}

type droneServiceClient struct {
	cc *grpc.ClientConn
}

func NewDroneServiceClient(cc *grpc.ClientConn) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetConfdConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdConfig, error) {
	out := new(ConfdConfig)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetConfdConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetBackendConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdBackendConfig, error) {
	out := new(ConfdBackendConfig)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetBackendConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) StartConfd(ctx context.Context, in *StartConfdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/StartConfd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) StopConfd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/StopConfd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetConfdStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfdStatus, error) {
	out := new(ConfdStatus)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetConfdStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetTemplateFiles(ctx context.Context, in *GetTemplateFilesRequest, opts ...grpc.CallOption) (*GetTemplateFilesResponse, error) {
	out := new(GetTemplateFilesResponse)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetTemplateFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneServiceClient) GetValues(ctx context.Context, in *GetValuesRequest, opts ...grpc.CallOption) (*GetValuesResponse, error) {
	out := new(GetValuesResponse)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneService/GetValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DroneService service

type DroneServiceServer interface {
	GetInfo(context.Context, *Empty) (*Info, error)
	GetConfdConfig(context.Context, *Empty) (*ConfdConfig, error)
	GetBackendConfig(context.Context, *Empty) (*ConfdBackendConfig, error)
	StartConfd(context.Context, *StartConfdRequest) (*Empty, error)
	StopConfd(context.Context, *Empty) (*Empty, error)
	GetConfdStatus(context.Context, *Empty) (*ConfdStatus, error)
	GetTemplateFiles(context.Context, *GetTemplateFilesRequest) (*GetTemplateFilesResponse, error)
	GetValues(context.Context, *GetValuesRequest) (*GetValuesResponse, error)
}

func RegisterDroneServiceServer(s *grpc.Server, srv DroneServiceServer) {
	s.RegisterService(&_DroneService_serviceDesc, srv)
}

func _DroneService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetConfdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetConfdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetConfdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetConfdConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetBackendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetBackendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetBackendConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetBackendConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_StartConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConfdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StartConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/StartConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StartConfd(ctx, req.(*StartConfdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_StopConfd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).StopConfd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/StopConfd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).StopConfd(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetConfdStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetConfdStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetConfdStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetConfdStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetTemplateFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetTemplateFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetTemplateFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetTemplateFiles(ctx, req.(*GetTemplateFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DroneService_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneService/GetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).GetValues(ctx, req.(*GetValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DroneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.drone.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _DroneService_GetInfo_Handler,
		},
		{
			MethodName: "GetConfdConfig",
			Handler:    _DroneService_GetConfdConfig_Handler,
		},
		{
			MethodName: "GetBackendConfig",
			Handler:    _DroneService_GetBackendConfig_Handler,
		},
		{
			MethodName: "StartConfd",
			Handler:    _DroneService_StartConfd_Handler,
		},
		{
			MethodName: "StopConfd",
			Handler:    _DroneService_StopConfd_Handler,
		},
		{
			MethodName: "GetConfdStatus",
			Handler:    _DroneService_GetConfdStatus_Handler,
		},
		{
			MethodName: "GetTemplateFiles",
			Handler:    _DroneService_GetTemplateFiles_Handler,
		},
		{
			MethodName: "GetValues",
			Handler:    _DroneService_GetValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drone.proto",
}

// Client API for DroneServiceForFrontgate service

type DroneServiceForFrontgateClient interface {
	SubscribeCmdStatus(ctx context.Context, in *SubscribeCmdStatusRequest, opts ...grpc.CallOption) (DroneServiceForFrontgate_SubscribeCmdStatusClient, error)
	GetRegisterCmdStatus(ctx context.Context, in *GetRegisterCmdStatusRequest, opts ...grpc.CallOption) (*GetRegisterCmdStatusResponse, error)
}

type droneServiceForFrontgateClient struct {
	cc *grpc.ClientConn
}

func NewDroneServiceForFrontgateClient(cc *grpc.ClientConn) DroneServiceForFrontgateClient {
	return &droneServiceForFrontgateClient{cc}
}

func (c *droneServiceForFrontgateClient) SubscribeCmdStatus(ctx context.Context, in *SubscribeCmdStatusRequest, opts ...grpc.CallOption) (DroneServiceForFrontgate_SubscribeCmdStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DroneServiceForFrontgate_serviceDesc.Streams[0], c.cc, "/openpitrix.drone.DroneServiceForFrontgate/SubscribeCmdStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &droneServiceForFrontgateSubscribeCmdStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DroneServiceForFrontgate_SubscribeCmdStatusClient interface {
	Recv() (*SubscribeCmdStatusResponse, error)
	grpc.ClientStream
}

type droneServiceForFrontgateSubscribeCmdStatusClient struct {
	grpc.ClientStream
}

func (x *droneServiceForFrontgateSubscribeCmdStatusClient) Recv() (*SubscribeCmdStatusResponse, error) {
	m := new(SubscribeCmdStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *droneServiceForFrontgateClient) GetRegisterCmdStatus(ctx context.Context, in *GetRegisterCmdStatusRequest, opts ...grpc.CallOption) (*GetRegisterCmdStatusResponse, error) {
	out := new(GetRegisterCmdStatusResponse)
	err := grpc.Invoke(ctx, "/openpitrix.drone.DroneServiceForFrontgate/GetRegisterCmdStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DroneServiceForFrontgate service

type DroneServiceForFrontgateServer interface {
	SubscribeCmdStatus(*SubscribeCmdStatusRequest, DroneServiceForFrontgate_SubscribeCmdStatusServer) error
	GetRegisterCmdStatus(context.Context, *GetRegisterCmdStatusRequest) (*GetRegisterCmdStatusResponse, error)
}

func RegisterDroneServiceForFrontgateServer(s *grpc.Server, srv DroneServiceForFrontgateServer) {
	s.RegisterService(&_DroneServiceForFrontgate_serviceDesc, srv)
}

func _DroneServiceForFrontgate_SubscribeCmdStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCmdStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DroneServiceForFrontgateServer).SubscribeCmdStatus(m, &droneServiceForFrontgateSubscribeCmdStatusServer{stream})
}

type DroneServiceForFrontgate_SubscribeCmdStatusServer interface {
	Send(*SubscribeCmdStatusResponse) error
	grpc.ServerStream
}

type droneServiceForFrontgateSubscribeCmdStatusServer struct {
	grpc.ServerStream
}

func (x *droneServiceForFrontgateSubscribeCmdStatusServer) Send(m *SubscribeCmdStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DroneServiceForFrontgate_GetRegisterCmdStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisterCmdStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceForFrontgateServer).GetRegisterCmdStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.drone.DroneServiceForFrontgate/GetRegisterCmdStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceForFrontgateServer).GetRegisterCmdStatus(ctx, req.(*GetRegisterCmdStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DroneServiceForFrontgate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.drone.DroneServiceForFrontgate",
	HandlerType: (*DroneServiceForFrontgateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegisterCmdStatus",
			Handler:    _DroneServiceForFrontgate_GetRegisterCmdStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCmdStatus",
			Handler:       _DroneServiceForFrontgate_SubscribeCmdStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drone.proto",
}

func init() { proto.RegisterFile("drone.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 886 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x96, 0x37, 0xfb, 0xe7, 0xb3, 0x51, 0x95, 0x8e, 0xa2, 0xd4, 0x75, 0x89, 0x1a, 0xb9, 0x15,
	0x2a, 0x7f, 0xde, 0x92, 0xa2, 0xaa, 0x04, 0x90, 0x50, 0xd3, 0x66, 0x09, 0x45, 0x42, 0x78, 0xa3,
	0x5e, 0x70, 0x63, 0x79, 0xbd, 0x67, 0x8d, 0x15, 0xaf, 0x67, 0x3a, 0x33, 0x0e, 0xf1, 0x3d, 0xef,
	0xc0, 0x3b, 0x20, 0xf1, 0x04, 0xbc, 0x09, 0xef, 0x82, 0x84, 0x66, 0x3c, 0xbb, 0xeb, 0xe2, 0xdd,
	0xb2, 0x11, 0xdc, 0x58, 0xf3, 0x9d, 0x39, 0x3f, 0xdf, 0x19, 0x7f, 0xe7, 0xc0, 0x60, 0xca, 0x69,
	0x8e, 0x3e, 0xe3, 0x54, 0x52, 0xb2, 0x47, 0x19, 0xe6, 0x2c, 0x95, 0x3c, 0xbd, 0xf6, 0xb5, 0xdd,
	0xbd, 0x9f, 0x50, 0x9a, 0x64, 0x38, 0xd4, 0xf7, 0x93, 0x62, 0x36, 0x94, 0xe9, 0x1c, 0x85, 0x8c,
	0xe6, 0xac, 0x0a, 0xf1, 0xfe, 0xb0, 0xa0, 0x7d, 0x9e, 0xcf, 0x28, 0xb9, 0x0b, 0x7d, 0x1d, 0x12,
	0xa6, 0xcc, 0xb1, 0x8e, 0xac, 0x47, 0x76, 0xd0, 0xd3, 0xf8, 0x9c, 0x91, 0xaf, 0x61, 0x37, 0xa6,
	0xf9, 0x6c, 0x1a, 0xaa, 0x6f, 0x9a, 0x38, 0xad, 0x23, 0xeb, 0xd1, 0xe0, 0xf8, 0xd0, 0xff, 0x67,
	0x35, 0xff, 0x54, 0x79, 0x9d, 0x6a, 0xa7, 0x60, 0x10, 0xaf, 0x00, 0x79, 0x0d, 0xfb, 0x55, 0x86,
	0x49, 0x14, 0x5f, 0x62, 0xbe, 0xcc, 0xb4, 0xa3, 0x33, 0x3d, 0xdc, 0x90, 0xe9, 0x79, 0xe5, 0x6c,
	0x12, 0x92, 0xb8, 0x61, 0xf3, 0x7e, 0xb3, 0x60, 0x50, 0x2b, 0xaa, 0x9a, 0x50, 0x5e, 0xe1, 0x34,
	0xe5, 0x8b, 0x26, 0x14, 0x7e, 0x91, 0x72, 0xe2, 0x42, 0x3f, 0xcd, 0x25, 0xf2, 0xab, 0x28, 0xd3,
	0x0d, 0x74, 0x82, 0x25, 0x26, 0x04, 0xda, 0x39, 0xa5, 0x4c, 0xd3, 0xe9, 0x07, 0xfa, 0x4c, 0x0e,
	0xa0, 0xcb, 0x38, 0xce, 0xd2, 0x6b, 0xa7, 0xad, 0x13, 0x19, 0x44, 0xee, 0x81, 0x2d, 0xca, 0x3c,
	0x0e, 0x69, 0x9e, 0x95, 0x4e, 0x47, 0x07, 0xf4, 0x95, 0xe1, 0xfb, 0x3c, 0x2b, 0xd5, 0x65, 0x46,
	0x93, 0x30, 0xc3, 0x2b, 0xcc, 0x9c, 0xae, 0x8e, 0xeb, 0x67, 0x34, 0xf9, 0x4e, 0x61, 0xef, 0x4f,
	0x0b, 0x48, 0xb3, 0x2f, 0x55, 0x5c, 0x96, 0x0c, 0x0d, 0x5f, 0x7d, 0x56, 0xb6, 0x9f, 0xa8, 0x90,
	0x4e, 0xeb, 0x68, 0x47, 0xd9, 0xd4, 0x59, 0x35, 0x50, 0x08, 0xe4, 0x79, 0x34, 0x47, 0x4d, 0xd4,
	0x0e, 0x96, 0x58, 0xdd, 0xb1, 0x48, 0x88, 0x9f, 0x29, 0x9f, 0x1a, 0xba, 0x4b, 0x4c, 0x1e, 0xc2,
	0xad, 0x38, 0x4b, 0x31, 0x97, 0x61, 0x1c, 0x85, 0x97, 0x58, 0x0a, 0xcd, 0xda, 0x0e, 0x76, 0x2b,
	0xeb, 0x69, 0xf4, 0x0a, 0x4b, 0x41, 0xee, 0xc3, 0x60, 0xe1, 0x85, 0x5c, 0x1a, 0xee, 0x60, 0x5c,
	0x90, 0x4b, 0x72, 0x08, 0x06, 0xa9, 0x1c, 0x4e, 0x4f, 0xdf, 0xdb, 0x95, 0xe5, 0x15, 0x96, 0xde,
	0xef, 0x16, 0xdc, 0x1e, 0xcb, 0x88, 0x4b, 0xdd, 0x61, 0x80, 0x6f, 0x0a, 0x14, 0xb2, 0xa1, 0x1c,
	0xeb, 0x7f, 0x53, 0x4e, 0xeb, 0x3f, 0x2a, 0xa7, 0x34, 0xc2, 0x19, 0xcb, 0x48, 0x16, 0x42, 0x75,
	0xc7, 0x38, 0x8d, 0x51, 0x88, 0x30, 0x9d, 0x6a, 0x9a, 0x9d, 0xc0, 0x36, 0x96, 0xf3, 0xa9, 0x12,
	0x83, 0xd0, 0x8e, 0xba, 0xae, 0x1d, 0x18, 0x44, 0x9e, 0x40, 0xaf, 0x60, 0xa1, 0x9a, 0x29, 0x23,
	0x65, 0xd7, 0xaf, 0x06, 0xce, 0x5f, 0x0c, 0x9c, 0x7f, 0xb1, 0x18, 0xb8, 0xa0, 0x5b, 0x30, 0x05,
	0xbc, 0x13, 0xb8, 0x3b, 0x2e, 0x26, 0x22, 0xe6, 0xe9, 0x04, 0x4f, 0xe7, 0x86, 0xc1, 0xe2, 0xc5,
	0x0e, 0x01, 0x44, 0x31, 0x91, 0x91, 0xb8, 0x5c, 0x10, 0xb1, 0x03, 0xdb, 0x58, 0xce, 0xa7, 0xde,
	0x67, 0xe0, 0xae, 0x8b, 0x15, 0x8c, 0xe6, 0x02, 0x6b, 0x34, 0xad, 0x3a, 0x4d, 0xef, 0x4b, 0xb8,
	0x37, 0x42, 0x19, 0x60, 0x92, 0x0a, 0x89, 0xfc, 0xa6, 0x35, 0x9f, 0xc2, 0x7b, 0xeb, 0xa3, 0xff,
	0xa5, 0xea, 0xa7, 0x70, 0x67, 0x84, 0xf2, 0x02, 0xe7, 0x2c, 0x8b, 0x24, 0x9e, 0xa5, 0x19, 0x2e,
	0x2b, 0x1e, 0x40, 0x97, 0x63, 0x82, 0xd7, 0x8b, 0x55, 0x63, 0x90, 0xf7, 0x18, 0x9c, 0x66, 0x88,
	0x29, 0xb3, 0x0f, 0x9d, 0x99, 0x32, 0x38, 0x96, 0x1e, 0x8a, 0x0a, 0x78, 0xef, 0xc3, 0xde, 0x08,
	0xe5, 0xeb, 0x28, 0x2b, 0x56, 0xd9, 0x09, 0xb4, 0xb5, 0xce, 0x2b, 0x47, 0x7d, 0xf6, 0x7e, 0xb5,
	0xe0, 0x76, 0xcd, 0xd1, 0xe4, 0x1c, 0x41, 0xf7, 0x4a, 0x5b, 0xb4, 0xef, 0xe0, 0x78, 0xd8, 0xd4,
	0x53, 0x23, 0xc8, 0xaf, 0xe0, 0xcb, 0x5c, 0xf2, 0x32, 0x30, 0xe1, 0xee, 0xe7, 0x30, 0xa8, 0x99,
	0xc9, 0x1e, 0xec, 0xa8, 0x29, 0xa9, 0x9a, 0x53, 0x47, 0xc5, 0x5e, 0xbb, 0x1a, 0x01, 0x55, 0xe0,
	0xa4, 0xf5, 0xcc, 0xf2, 0x7a, 0xd0, 0x79, 0x39, 0x67, 0xb2, 0x3c, 0xfe, 0xab, 0x0d, 0xbb, 0x2f,
	0x54, 0xcd, 0x31, 0xf2, 0xab, 0x34, 0x46, 0x72, 0x02, 0xbd, 0x11, 0x4a, 0xbd, 0x9d, 0xef, 0x34,
	0x89, 0xe9, 0x20, 0xf7, 0xa0, 0x79, 0xa1, 0x03, 0xbe, 0x81, 0x5b, 0x23, 0x94, 0xf5, 0xdd, 0xb8,
	0x31, 0xc5, 0xbb, 0xc7, 0x91, 0xfc, 0xa0, 0x5f, 0xf8, 0xed, 0x9d, 0xb5, 0x31, 0xd7, 0x56, 0x03,
	0x49, 0xbe, 0x05, 0x58, 0xed, 0x0a, 0xf2, 0xa0, 0x19, 0xd3, 0xd8, 0x24, 0xee, 0xa6, 0x8a, 0xe4,
	0x2b, 0xb0, 0xc7, 0x92, 0xb2, 0x2a, 0xd5, 0x46, 0x5e, 0x1b, 0xc3, 0x6b, 0xef, 0x64, 0x56, 0xc1,
	0x8d, 0xdf, 0xc9, 0xc4, 0xa5, 0xfa, 0x9d, 0xde, 0xd2, 0x2e, 0xf9, 0x60, 0xad, 0x9e, 0xd6, 0x8d,
	0x84, 0xfb, 0xe1, 0x36, 0xae, 0x46, 0xb6, 0x17, 0x60, 0x2f, 0x65, 0x49, 0xbc, 0x77, 0x6a, 0xb6,
	0x4a, 0xfe, 0x60, 0x0b, 0x5d, 0x1f, 0xff, 0xd2, 0x02, 0xa7, 0xae, 0xbf, 0x33, 0xca, 0xcf, 0x38,
	0xcd, 0x65, 0x12, 0x49, 0x24, 0x6f, 0x80, 0x34, 0x17, 0x0f, 0xf9, 0x68, 0xcd, 0xaf, 0xdb, 0xb4,
	0xda, 0xdc, 0x8f, 0xb7, 0x73, 0xae, 0xd8, 0x3c, 0xb6, 0x48, 0x01, 0xfb, 0xeb, 0xf6, 0x0e, 0xf9,
	0x64, 0x6d, 0x33, 0x9b, 0xb6, 0x9b, 0xeb, 0x6f, 0xeb, 0x5e, 0x15, 0x7e, 0xfe, 0xec, 0xc7, 0xa7,
	0xb5, 0x80, 0x94, 0x0e, 0x57, 0x68, 0xc8, 0x2e, 0x93, 0x21, 0x9b, 0x0c, 0x75, 0x96, 0x2f, 0x56,
	0xf6, 0x50, 0x1b, 0x26, 0x5d, 0xbd, 0xf4, 0x9f, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x22, 0x79,
	0x9f, 0x57, 0x94, 0x09, 0x00, 0x00,
}
