// Code generated by go-swagger; DO NOT EDIT.

package release_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListReleasesParams creates a new ListReleasesParams object
// with the default values initialized.
func NewListReleasesParams() *ListReleasesParams {
	var ()
	return &ListReleasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListReleasesParamsWithTimeout creates a new ListReleasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListReleasesParamsWithTimeout(timeout time.Duration) *ListReleasesParams {
	var ()
	return &ListReleasesParams{

		timeout: timeout,
	}
}

// NewListReleasesParamsWithContext creates a new ListReleasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListReleasesParamsWithContext(ctx context.Context) *ListReleasesParams {
	var ()
	return &ListReleasesParams{

		Context: ctx,
	}
}

// NewListReleasesParamsWithHTTPClient creates a new ListReleasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListReleasesParamsWithHTTPClient(client *http.Client) *ListReleasesParams {
	var ()
	return &ListReleasesParams{
		HTTPClient: client,
	}
}

/*ListReleasesParams contains all the parameters to send to the API endpoint
for the list releases operation typically these are written to a http.Request
*/
type ListReleasesParams struct {

	/*Limit*/
	Limit *int64
	/*Namespace*/
	Namespace *string
	/*Offset*/
	Offset *int64
	/*ReleaseName*/
	ReleaseName *string
	/*RuntimeID*/
	RuntimeID *string
	/*Status*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list releases params
func (o *ListReleasesParams) WithTimeout(timeout time.Duration) *ListReleasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list releases params
func (o *ListReleasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list releases params
func (o *ListReleasesParams) WithContext(ctx context.Context) *ListReleasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list releases params
func (o *ListReleasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list releases params
func (o *ListReleasesParams) WithHTTPClient(client *http.Client) *ListReleasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list releases params
func (o *ListReleasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list releases params
func (o *ListReleasesParams) WithLimit(limit *int64) *ListReleasesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list releases params
func (o *ListReleasesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the list releases params
func (o *ListReleasesParams) WithNamespace(namespace *string) *ListReleasesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list releases params
func (o *ListReleasesParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithOffset adds the offset to the list releases params
func (o *ListReleasesParams) WithOffset(offset *int64) *ListReleasesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list releases params
func (o *ListReleasesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithReleaseName adds the releaseName to the list releases params
func (o *ListReleasesParams) WithReleaseName(releaseName *string) *ListReleasesParams {
	o.SetReleaseName(releaseName)
	return o
}

// SetReleaseName adds the releaseName to the list releases params
func (o *ListReleasesParams) SetReleaseName(releaseName *string) {
	o.ReleaseName = releaseName
}

// WithRuntimeID adds the runtimeID to the list releases params
func (o *ListReleasesParams) WithRuntimeID(runtimeID *string) *ListReleasesParams {
	o.SetRuntimeID(runtimeID)
	return o
}

// SetRuntimeID adds the runtimeId to the list releases params
func (o *ListReleasesParams) SetRuntimeID(runtimeID *string) {
	o.RuntimeID = runtimeID
}

// WithStatus adds the status to the list releases params
func (o *ListReleasesParams) WithStatus(status *string) *ListReleasesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list releases params
func (o *ListReleasesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListReleasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.ReleaseName != nil {

		// query param release_name
		var qrReleaseName string
		if o.ReleaseName != nil {
			qrReleaseName = *o.ReleaseName
		}
		qReleaseName := qrReleaseName
		if qReleaseName != "" {
			if err := r.SetQueryParam("release_name", qReleaseName); err != nil {
				return err
			}
		}

	}

	if o.RuntimeID != nil {

		// query param runtime_id
		var qrRuntimeID string
		if o.RuntimeID != nil {
			qrRuntimeID = *o.RuntimeID
		}
		qRuntimeID := qrRuntimeID
		if qRuntimeID != "" {
			if err := r.SetQueryParam("runtime_id", qRuntimeID); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
